
lcd_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000724c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007360  08007360  00017360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800770c  0800770c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800770c  0800770c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800770c  0800770c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800770c  0800770c  0001770c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001e4  080078f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  080078f8  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b444  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd1  00000000  00000000  0002b694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  0002d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad2  00000000  00000000  0002e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001880d  00000000  00000000  0002ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0cf  00000000  00000000  0004741f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c53a  00000000  00000000  000564ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b90  00000000  00000000  000e2a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e75b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007344 	.word	0x08007344

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007344 	.word	0x08007344

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b32:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <HD44780_Init+0xec>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HD44780_Init+0xf0>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <HD44780_Init+0xf4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <HD44780_Init+0xec>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d907      	bls.n	8000b5c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HD44780_Init+0xf4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <HD44780_Init+0xf4>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e006      	b.n	8000b6a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HD44780_Init+0xf4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HD44780_Init+0xf4>)
 8000b68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000b6a:	f000 f985 	bl	8000e78 <DelayInit>
  HAL_Delay(50);
 8000b6e:	2032      	movs	r0, #50	; 0x32
 8000b70:	f000 ff88 	bl	8001a84 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HD44780_Init+0xf0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f943 	bl	8000e04 <ExpanderWrite>
  HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 ff7f 	bl	8001a84 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000b86:	2030      	movs	r0, #48	; 0x30
 8000b88:	f000 f92b 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b8c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b90:	f000 f99a 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000b94:	2030      	movs	r0, #48	; 0x30
 8000b96:	f000 f924 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000b9a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b9e:	f000 f993 	bl	8000ec8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ba2:	2030      	movs	r0, #48	; 0x30
 8000ba4:	f000 f91d 	bl	8000de2 <Write4Bits>
  DelayUS(4500);
 8000ba8:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bac:	f000 f98c 	bl	8000ec8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f000 f916 	bl	8000de2 <Write4Bits>
  DelayUS(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f000 f986 	bl	8000ec8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HD44780_Init+0xf4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f8ce 	bl	8000d68 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HD44780_Init+0xf8>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000bd2:	f000 f875 	bl	8000cc0 <HD44780_Display>
  HD44780_Clear();
 8000bd6:	f000 f82b 	bl	8000c30 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HD44780_Init+0xfc>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HD44780_Init+0xfc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8bc 	bl	8000d68 <SendCommand>
  DelayUS(4500);
 8000bf0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000bf4:	f000 f968 	bl	8000ec8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000bf8:	490b      	ldr	r1, [pc, #44]	; (8000c28 <HD44780_Init+0x100>)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f876 	bl	8000cec <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c00:	490a      	ldr	r1, [pc, #40]	; (8000c2c <HD44780_Init+0x104>)
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 f872 	bl	8000cec <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c08:	f000 f81d 	bl	8000c46 <HD44780_Home>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000203 	.word	0x20000203
 8000c18:	20000204 	.word	0x20000204
 8000c1c:	20000200 	.word	0x20000200
 8000c20:	20000201 	.word	0x20000201
 8000c24:	20000202 	.word	0x20000202
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HD44780_Clear>:

void HD44780_Clear()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f897 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c3e:	f000 f943 	bl	8000ec8 <DelayUS>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HD44780_Home>:

void HD44780_Home()
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 f88c 	bl	8000d68 <SendCommand>
  DelayUS(2000);
 8000c50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c54:	f000 f938 	bl	8000ec8 <DelayUS>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HD44780_SetCursor+0x5c>)
 8000c6e:	f107 0408 	add.w	r4, r7, #8
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d303      	bcc.n	8000c8a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HD44780_SetCursor+0x60>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3318      	adds	r3, #24
 8000c90:	443b      	add	r3, r7
 8000c92:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f85d 	bl	8000d68 <SendCommand>
}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08007360 	.word	0x08007360
 8000cbc:	20000203 	.word	0x20000203

08000cc0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HD44780_Display+0x28>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HD44780_Display+0x28>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f843 	bl	8000d68 <SendCommand>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000201 	.word	0x20000201

08000cec <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f82a 	bl	8000d68 <SendCommand>
  for (int i=0; i<8; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	e009      	b.n	8000d2e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f82e 	bl	8000d84 <SendChar>
  for (int i=0; i<8; i++)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	ddf2      	ble.n	8000d1a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d46:	e006      	b.n	8000d56 <HD44780_PrintStr+0x18>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f817 	bl	8000d84 <SendChar>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f4      	bne.n	8000d48 <HD44780_PrintStr+0xa>
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f812 	bl	8000da0 <Send>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2101      	movs	r1, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f804 	bl	8000da0 <Send>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f023 030f 	bic.w	r3, r3, #15
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f80b 	bl	8000de2 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f804 	bl	8000de2 <Write4Bits>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f808 	bl	8000e04 <ExpanderWrite>
  PulseEnable(value);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f820 	bl	8000e3c <PulseEnable>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <ExpanderWrite+0x30>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e1a:	f107 020f 	add.w	r2, r7, #15
 8000e1e:	230a      	movs	r3, #10
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	214e      	movs	r1, #78	; 0x4e
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <ExpanderWrite+0x34>)
 8000e28:	f001 f9fc 	bl	8002224 <HAL_I2C_Master_Transmit>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000204 	.word	0x20000204
 8000e38:	20000208 	.word	0x20000208

08000e3c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffd8 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e54:	2014      	movs	r0, #20
 8000e56:	f000 f837 	bl	8000ec8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffce 	bl	8000e04 <ExpanderWrite>
  DelayUS(20);
 8000e68:	2014      	movs	r0, #20
 8000e6a:	f000 f82d 	bl	8000ec8 <DelayUS>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <DelayInit>:

static void DelayInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <DelayInit+0x48>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <DelayInit+0x48>)
 8000e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e86:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <DelayInit+0x48>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <DelayInit+0x48>)
 8000e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e92:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <DelayInit+0x4c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <DelayInit+0x4c>)
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <DelayInit+0x4c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <DelayInit+0x4c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <DelayInit+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000eb2:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb4:	bf00      	nop
  __ASM volatile ("NOP");
 8000eb6:	bf00      	nop
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000edf0 	.word	0xe000edf0
 8000ec4:	e0001000 	.word	0xe0001000

08000ec8 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <DelayUS+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <DelayUS+0x44>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9a      	lsrs	r2, r3, #18
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <DelayUS+0x48>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <DelayUS+0x48>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f6      	bhi.n	8000eea <DelayUS+0x22>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	e0001000 	.word	0xe0001000

08000f14 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2275      	movs	r2, #117	; 0x75
 8000f2c:	21d0      	movs	r1, #208	; 0xd0
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f30:	f001 fb70 	bl	8002614 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b68      	cmp	r3, #104	; 0x68
 8000f38:	d13b      	bne.n	8000fb2 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	226b      	movs	r2, #107	; 0x6b
 8000f50:	21d0      	movs	r1, #208	; 0xd0
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f54:	f001 fa64 	bl	8002420 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2219      	movs	r2, #25
 8000f6e:	21d0      	movs	r1, #208	; 0xd0
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f72:	f001 fa55 	bl	8002420 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dbb      	adds	r3, r7, #6
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	221c      	movs	r2, #28
 8000f8c:	21d0      	movs	r1, #208	; 0xd0
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <MPU6050_Init+0xa8>)
 8000f90:	f001 fa46 	bl	8002420 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	221b      	movs	r2, #27
 8000faa:	21d0      	movs	r1, #208	; 0xd0
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MPU6050_Init+0xa8>)
 8000fae:	f001 fa37 	bl	8002420 <HAL_I2C_Mem_Write>
	}

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000025c 	.word	0x2000025c

08000fc0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2306      	movs	r3, #6
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	223b      	movs	r2, #59	; 0x3b
 8000fd8:	21d0      	movs	r1, #208	; 0xd0
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MPU6050_Read_Accel+0xd8>)
 8000fdc:	f001 fb1a 	bl	8002614 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000fe0:	783b      	ldrb	r3, [r7, #0]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001002:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001014:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MPU6050_Read_Accel+0xdc>)
 8001018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f1 	bl	8000404 <__aeabi_i2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001028:	f7ff fb80 	bl	800072c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd28 	bl	8000a88 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MPU6050_Read_Accel+0xec>)
 800103c:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MPU6050_Read_Accel+0xe0>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f9dd 	bl	8000404 <__aeabi_i2d>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001050:	f7ff fb6c 	bl	800072c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd14 	bl	8000a88 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MPU6050_Read_Accel+0xf0>)
 8001064:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MPU6050_Read_Accel+0xe4>)
 8001068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f9c9 	bl	8000404 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MPU6050_Read_Accel+0xe8>)
 8001078:	f7ff fb58 	bl	800072c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <MPU6050_Read_Accel+0xf4>)
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000025c 	.word	0x2000025c
 800109c:	200002f8 	.word	0x200002f8
 80010a0:	200002fa 	.word	0x200002fa
 80010a4:	200002fc 	.word	0x200002fc
 80010a8:	40d00000 	.word	0x40d00000
 80010ac:	20000304 	.word	0x20000304
 80010b0:	20000308 	.word	0x20000308
 80010b4:	2000030c 	.word	0x2000030c

080010b8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2306      	movs	r3, #6
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	463b      	mov	r3, r7
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2243      	movs	r2, #67	; 0x43
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	4831      	ldr	r0, [pc, #196]	; (8001198 <MPU6050_Read_Gyro+0xe0>)
 80010d4:	f001 fa9e 	bl	8002614 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010d8:	783b      	ldrb	r3, [r7, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	787b      	ldrb	r3, [r7, #1]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 80010fa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 800110c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <MPU6050_Read_Gyro+0xe4>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f975 	bl	8000404 <__aeabi_i2d>
 800111a:	a31d      	add	r3, pc, #116	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fb04 	bl	800072c <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fcac 	bl	8000a88 <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <MPU6050_Read_Gyro+0xf0>)
 8001134:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MPU6050_Read_Gyro+0xe8>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	a313      	add	r3, pc, #76	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff faf0 	bl	800072c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fc98 	bl	8000a88 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <MPU6050_Read_Gyro+0xf4>)
 800115c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MPU6050_Read_Gyro+0xec>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f94d 	bl	8000404 <__aeabi_i2d>
 800116a:	a309      	add	r3, pc, #36	; (adr r3, 8001190 <MPU6050_Read_Gyro+0xd8>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fadc 	bl	800072c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc84 	bl	8000a88 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <MPU6050_Read_Gyro+0xf8>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40606000 	.word	0x40606000
 8001198:	2000025c 	.word	0x2000025c
 800119c:	200002fe 	.word	0x200002fe
 80011a0:	20000300 	.word	0x20000300
 80011a4:	20000302 	.word	0x20000302
 80011a8:	20000310 	.word	0x20000310
 80011ac:	20000314 	.word	0x20000314
 80011b0:	20000318 	.word	0x20000318

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int32_t CH1_DC = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t CH2_DC = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  int32_t CH3_DC = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  int32_t CH4_DC = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  int32_t quar_const = 16383;
 80011ca:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80011ce:	617b      	str	r3, [r7, #20]
  int32_t final_pwm = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  int32_t x_mov;
  int32_t y_mov;
  char snum[5];
  float sinatra = -1;
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <main+0x144>)
 80011d6:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f000 fbf2 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f896 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f9cc 	bl	800157c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011e4:	f000 f8d8 	bl	8001398 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011e8:	f000 f904 	bl	80013f4 <MX_I2C2_Init>
  MX_TIM2_Init();
 80011ec:	f000 f930 	bl	8001450 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011f0:	2100      	movs	r1, #0
 80011f2:	4842      	ldr	r0, [pc, #264]	; (80012fc <main+0x148>)
 80011f4:	f002 fd00 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011f8:	2104      	movs	r1, #4
 80011fa:	4840      	ldr	r0, [pc, #256]	; (80012fc <main+0x148>)
 80011fc:	f002 fcfc 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001200:	2108      	movs	r1, #8
 8001202:	483e      	ldr	r0, [pc, #248]	; (80012fc <main+0x148>)
 8001204:	f002 fcf8 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001208:	210c      	movs	r1, #12
 800120a:	483c      	ldr	r0, [pc, #240]	; (80012fc <main+0x148>)
 800120c:	f002 fcf4 	bl	8003bf8 <HAL_TIM_PWM_Start>
  HD44780_Init(2);
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fc89 	bl	8000b28 <HD44780_Init>
  MPU6050_Init();
 8001216:	f7ff fe7d 	bl	8000f14 <MPU6050_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // read the Accelerometer and Gyro values

	  MPU6050_Read_Accel();
 800121a:	f7ff fed1 	bl	8000fc0 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 800121e:	f7ff ff4b 	bl	80010b8 <MPU6050_Read_Gyro>

	  HD44780_Clear();
 8001222:	f7ff fd05 	bl	8000c30 <HD44780_Clear>
	  snprintf(snum, 7, "%.2f", Az);
	  HD44780_PrintStr(snum);

	  */

	  HD44780_SetCursor(0,1);
 8001226:	2101      	movs	r1, #1
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fd17 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%d", ((32767 + ((Accel_X_RAW - Accel_Y_RAW) * 4))));
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <main+0x14c>)
 8001230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001234:	461a      	mov	r2, r3
 8001236:	4b33      	ldr	r3, [pc, #204]	; (8001304 <main+0x150>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001244:	337f      	adds	r3, #127	; 0x7f
 8001246:	1d38      	adds	r0, r7, #4
 8001248:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <main+0x154>)
 800124a:	2107      	movs	r1, #7
 800124c:	f003 ff1a 	bl	8005084 <sniprintf>
	  HD44780_PrintStr(snum);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fd73 	bl	8000d3e <HD44780_PrintStr>

	  HD44780_SetCursor(8,1);
 8001258:	2101      	movs	r1, #1
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fcfe 	bl	8000c5c <HD44780_SetCursor>
	  snprintf(snum, 7, "%d", Accel_Y_RAW);
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <main+0x150>)
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	1d38      	adds	r0, r7, #4
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <main+0x154>)
 800126a:	2107      	movs	r1, #7
 800126c:	f003 ff0a 	bl	8005084 <sniprintf>
	  HD44780_PrintStr(snum);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd63 	bl	8000d3e <HD44780_PrintStr>





	  HAL_Delay(20);
 8001278:	2014      	movs	r0, #20
 800127a:	f000 fc03 	bl	8001a84 <HAL_Delay>
	   TIM2->CCR4 = (32767 + ((-Accel_X_RAW + Accel_Y_RAW) * 4));

	   */


	  TIM2->CCR1 = (32767 + ((Accel_X_RAW - Accel_Y_RAW) * 4));
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <main+0x14c>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	461a      	mov	r2, r3
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <main+0x150>)
 8001288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001294:	337f      	adds	r3, #127	; 0x7f
 8001296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129a:	6353      	str	r3, [r2, #52]	; 0x34

	  TIM2->CCR2 = (32767 + ((-Accel_X_RAW - Accel_Y_RAW) * 4));
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <main+0x14c>)
 800129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a2:	425b      	negs	r3, r3
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <main+0x150>)
 80012a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80012b2:	337f      	adds	r3, #127	; 0x7f
 80012b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b8:	6393      	str	r3, [r2, #56]	; 0x38

	  TIM2->CCR3 = (32767 + ((Accel_X_RAW + Accel_Y_RAW) * 4));
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <main+0x14c>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <main+0x150>)
 80012c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80012d0:	337f      	adds	r3, #127	; 0x7f
 80012d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d6:	63d3      	str	r3, [r2, #60]	; 0x3c

	  TIM2->CCR4 = (32767 + ((-Accel_X_RAW + Accel_Y_RAW) * 4));
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <main+0x150>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <main+0x14c>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80012ee:	337f      	adds	r3, #127	; 0x7f
 80012f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
	  MPU6050_Read_Accel();
 80012f6:	e790      	b.n	800121a <main+0x66>
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	200002b0 	.word	0x200002b0
 8001300:	200002f8 	.word	0x200002f8
 8001304:	200002fa 	.word	0x200002fa
 8001308:	08007370 	.word	0x08007370

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b090      	sub	sp, #64	; 0x40
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	2228      	movs	r2, #40	; 0x28
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f003 ff29 	bl	8005172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001336:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	2302      	movs	r3, #2
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800134a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	4618      	mov	r0, r3
 8001356:	f001 ffa1 	bl	800329c <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001360:	f000 f93a 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fa0e 	bl	80037a0 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800138a:	f000 f925 	bl	80015d8 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3740      	adds	r7, #64	; 0x40
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <MX_I2C1_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d6:	f000 fde1 	bl	8001f9c <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 f8fa 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000208 	.word	0x20000208
 80013ec:	40005400 	.word	0x40005400
 80013f0:	000186a0 	.word	0x000186a0

080013f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C2_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C2_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C2_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C2_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C2_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C2_Init+0x50>)
 8001432:	f000 fdb3 	bl	8001f9c <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 f8cc 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000025c 	.word	0x2000025c
 8001448:	40005800 	.word	0x40005800
 800144c:	000186a0 	.word	0x000186a0

08001450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	; 0x38
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]
 800147e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MX_TIM2_Init+0x128>)
 8001482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001488:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <MX_TIM2_Init+0x128>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <MX_TIM2_Init+0x128>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <MX_TIM2_Init+0x128>)
 8001496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <MX_TIM2_Init+0x128>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <MX_TIM2_Init+0x128>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a8:	4833      	ldr	r0, [pc, #204]	; (8001578 <MX_TIM2_Init+0x128>)
 80014aa:	f002 fafd 	bl	8003aa8 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014b4:	f000 f890 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c2:	4619      	mov	r1, r3
 80014c4:	482c      	ldr	r0, [pc, #176]	; (8001578 <MX_TIM2_Init+0x128>)
 80014c6:	f002 fcf7 	bl	8003eb8 <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014d0:	f000 f882 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014d4:	4828      	ldr	r0, [pc, #160]	; (8001578 <MX_TIM2_Init+0x128>)
 80014d6:	f002 fb36 	bl	8003b46 <HAL_TIM_PWM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014e0:	f000 f87a 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4619      	mov	r1, r3
 80014f2:	4821      	ldr	r0, [pc, #132]	; (8001578 <MX_TIM2_Init+0x128>)
 80014f4:	f003 f848 	bl	8004588 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014fe:	f000 f86b 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	; 0x60
 8001504:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	4817      	ldr	r0, [pc, #92]	; (8001578 <MX_TIM2_Init+0x128>)
 800151a:	f002 fc0f 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001524:	f000 f858 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2204      	movs	r2, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <MX_TIM2_Init+0x128>)
 8001530:	f002 fc04 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800153a:	f000 f84d 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2208      	movs	r2, #8
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_TIM2_Init+0x128>)
 8001546:	f002 fbf9 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001550:	f000 f842 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	220c      	movs	r2, #12
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_TIM2_Init+0x128>)
 800155c:	f002 fbee 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001566:	f000 f837 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <MX_TIM2_Init+0x128>)
 800156c:	f000 f8e4 	bl	8001738 <HAL_TIM_MspPostInit>

}
 8001570:	bf00      	nop
 8001572:	3738      	adds	r7, #56	; 0x38
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200002b0 	.word	0x200002b0

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_GPIO_Init+0x58>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <MX_GPIO_Init+0x58>)
 8001588:	f043 0320 	orr.w	r3, r3, #32
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_GPIO_Init+0x58>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_GPIO_Init+0x58>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <MX_GPIO_Init+0x58>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_GPIO_Init+0x58>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_GPIO_Init+0x58>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <MX_GPIO_Init+0x58>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <MX_GPIO_Init+0x58>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_MspInit+0x40>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_MspInit+0x40>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6193      	str	r3, [r2, #24]
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_MspInit+0x40>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_MspInit+0x40>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_MspInit+0x40>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_MspInit+0x40>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_I2C_MspInit+0xc8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d124      	bne.n	8001692 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001664:	2312      	movs	r3, #18
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4821      	ldr	r0, [pc, #132]	; (80016f8 <HAL_I2C_MspInit+0xd0>)
 8001674:	f000 fb0e 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800167e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001682:	61d3      	str	r3, [r2, #28]
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001690:	e029      	b.n	80016e6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_I2C_MspInit+0xd4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d124      	bne.n	80016e6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	4619      	mov	r1, r3
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <HAL_I2C_MspInit+0xd0>)
 80016ca:	f000 fae3 	bl	8001c94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40005800 	.word	0x40005800

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001710:	d10b      	bne.n	800172a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_TIM_Base_MspInit+0x34>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_TIM_Base_MspInit+0x34>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_TIM_Base_MspInit+0x34>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001756:	d117      	bne.n	8001788 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_TIM_MspPostInit+0x58>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_TIM_MspPostInit+0x58>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_MspPostInit+0x58>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001770:	230f      	movs	r3, #15
 8001772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <HAL_TIM_MspPostInit+0x5c>)
 8001784:	f000 fa86 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40010800 	.word	0x40010800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017de:	f000 f935 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
	return 1;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <_kill>:

int _kill(int pid, int sig)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017fe:	f003 fd0b 	bl	8005218 <__errno>
 8001802:	4603      	mov	r3, r0
 8001804:	2216      	movs	r2, #22
 8001806:	601a      	str	r2, [r3, #0]
	return -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_exit>:

void _exit (int status)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffe7 	bl	80017f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001826:	e7fe      	b.n	8001826 <_exit+0x12>

08001828 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e00a      	b.n	8001850 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800183a:	f3af 8000 	nop.w
 800183e:	4601      	mov	r1, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf0      	blt.n	800183a <_read+0x12>
	}

return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e009      	b.n	8001888 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf1      	blt.n	8001874 <_write+0x12>
	}
	return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_close>:

int _close(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
	return -1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c0:	605a      	str	r2, [r3, #4]
	return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <_isatty>:

int _isatty(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	return 1;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
	return 0;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
	...

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f003 fc74 	bl	8005218 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20005000 	.word	0x20005000
 800195c:	00000400 	.word	0x00000400
 8001960:	2000031c 	.word	0x2000031c
 8001964:	20000470 	.word	0x20000470

08001968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001976:	490d      	ldr	r1, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800198c:	4c0a      	ldr	r4, [pc, #40]	; (80019b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800199a:	f7ff ffe5 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f003 fc41 	bl	8005224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a2:	f7ff fc07 	bl	80011b4 <main>
  bx lr
 80019a6:	4770      	bx	lr
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80019b0:	08007714 	.word	0x08007714
  ldr r2, =_sbss
 80019b4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80019b8:	20000470 	.word	0x20000470

080019bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_2_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x28>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x28>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f92b 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	200f      	movs	r0, #15
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fe02 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f935 	bl	8001c7a <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f90b 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000010 	.word	0x20000010
 8001a44:	20000018 	.word	0x20000018
 8001a48:	20000014 	.word	0x20000014

08001a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x1c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x20>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_IncTick+0x20>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000018 	.word	0x20000018
 8001a6c:	20000320 	.word	0x20000320

08001a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <HAL_GetTick+0x10>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	20000320 	.word	0x20000320

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_Delay+0x44>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffe0 	bl	8001a70 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000018 	.word	0x20000018

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff90 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff49 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff5e 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff90 	bl	8001b84 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5f 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffb0 	bl	8001be8 <SysTick_Config>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b08b      	sub	sp, #44	; 0x2c
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca6:	e169      	b.n	8001f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8158 	bne.w	8001f76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4a9a      	ldr	r2, [pc, #616]	; (8001f34 <HAL_GPIO_Init+0x2a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d05e      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cd0:	4a98      	ldr	r2, [pc, #608]	; (8001f34 <HAL_GPIO_Init+0x2a0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d875      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a98      	ldr	r2, [pc, #608]	; (8001f38 <HAL_GPIO_Init+0x2a4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d058      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cdc:	4a96      	ldr	r2, [pc, #600]	; (8001f38 <HAL_GPIO_Init+0x2a4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d86f      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a96      	ldr	r2, [pc, #600]	; (8001f3c <HAL_GPIO_Init+0x2a8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d052      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001ce8:	4a94      	ldr	r2, [pc, #592]	; (8001f3c <HAL_GPIO_Init+0x2a8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d869      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cee:	4a94      	ldr	r2, [pc, #592]	; (8001f40 <HAL_GPIO_Init+0x2ac>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d04c      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cf4:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_GPIO_Init+0x2ac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d863      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cfa:	4a92      	ldr	r2, [pc, #584]	; (8001f44 <HAL_GPIO_Init+0x2b0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d046      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001d00:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_GPIO_Init+0x2b0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d85d      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d82a      	bhi.n	8001d60 <HAL_GPIO_Init+0xcc>
 8001d0a:	2b12      	cmp	r3, #18
 8001d0c:	d859      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <HAL_GPIO_Init+0x80>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d7b 	.word	0x08001d7b
 8001d20:	08001dbd 	.word	0x08001dbd
 8001d24:	08001dc3 	.word	0x08001dc3
 8001d28:	08001dc3 	.word	0x08001dc3
 8001d2c:	08001dc3 	.word	0x08001dc3
 8001d30:	08001dc3 	.word	0x08001dc3
 8001d34:	08001dc3 	.word	0x08001dc3
 8001d38:	08001dc3 	.word	0x08001dc3
 8001d3c:	08001dc3 	.word	0x08001dc3
 8001d40:	08001dc3 	.word	0x08001dc3
 8001d44:	08001dc3 	.word	0x08001dc3
 8001d48:	08001dc3 	.word	0x08001dc3
 8001d4c:	08001dc3 	.word	0x08001dc3
 8001d50:	08001dc3 	.word	0x08001dc3
 8001d54:	08001dc3 	.word	0x08001dc3
 8001d58:	08001d71 	.word	0x08001d71
 8001d5c:	08001d85 	.word	0x08001d85
 8001d60:	4a79      	ldr	r2, [pc, #484]	; (8001f48 <HAL_GPIO_Init+0x2b4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d66:	e02c      	b.n	8001dc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e029      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	3304      	adds	r3, #4
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e024      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	3308      	adds	r3, #8
 8001d80:	623b      	str	r3, [r7, #32]
          break;
 8001d82:	e01f      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	330c      	adds	r3, #12
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e01a      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d96:	2304      	movs	r3, #4
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e013      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	611a      	str	r2, [r3, #16]
          break;
 8001dae:	e009      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	615a      	str	r2, [r3, #20]
          break;
 8001dba:	e003      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          break;
 8001dc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d801      	bhi.n	8001dce <HAL_GPIO_Init+0x13a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_Init+0x13e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d802      	bhi.n	8001de0 <HAL_GPIO_Init+0x14c>
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	e002      	b.n	8001de6 <HAL_GPIO_Init+0x152>
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	3b08      	subs	r3, #8
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	210f      	movs	r1, #15
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	431a      	orrs	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80b1 	beq.w	8001f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a4c      	ldr	r2, [pc, #304]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e2c:	4a48      	ldr	r2, [pc, #288]	; (8001f50 <HAL_GPIO_Init+0x2bc>)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <HAL_GPIO_Init+0x2c0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_GPIO_Init+0x1ec>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3f      	ldr	r2, [pc, #252]	; (8001f58 <HAL_GPIO_Init+0x2c4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <HAL_GPIO_Init+0x1e8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <HAL_GPIO_Init+0x2c8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3d      	ldr	r2, [pc, #244]	; (8001f60 <HAL_GPIO_Init+0x2cc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_GPIO_Init+0x1e0>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e006      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e004      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e80:	2300      	movs	r3, #0
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e92:	492f      	ldr	r1, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x2bc>)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	492c      	ldr	r1, [pc, #176]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eba:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4928      	ldr	r1, [pc, #160]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed4:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4922      	ldr	r1, [pc, #136]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	491e      	ldr	r1, [pc, #120]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4918      	ldr	r1, [pc, #96]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4914      	ldr	r1, [pc, #80]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d021      	beq.n	8001f68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
 8001f30:	e021      	b.n	8001f76 <HAL_GPIO_Init+0x2e2>
 8001f32:	bf00      	nop
 8001f34:	10320000 	.word	0x10320000
 8001f38:	10310000 	.word	0x10310000
 8001f3c:	10220000 	.word	0x10220000
 8001f40:	10210000 	.word	0x10210000
 8001f44:	10120000 	.word	0x10120000
 8001f48:	10110000 	.word	0x10110000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40010800 	.word	0x40010800
 8001f58:	40010c00 	.word	0x40010c00
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	40011400 	.word	0x40011400
 8001f64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4909      	ldr	r1, [pc, #36]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	3301      	adds	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f47f ae8e 	bne.w	8001ca8 <HAL_GPIO_Init+0x14>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	372c      	adds	r7, #44	; 0x2c
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e12b      	b.n	8002206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fb30 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002000:	f001 fd20 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8002004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a81      	ldr	r2, [pc, #516]	; (8002210 <HAL_I2C_Init+0x274>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d807      	bhi.n	8002020 <HAL_I2C_Init+0x84>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a80      	ldr	r2, [pc, #512]	; (8002214 <HAL_I2C_Init+0x278>)
 8002014:	4293      	cmp	r3, r2
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e006      	b.n	800202e <HAL_I2C_Init+0x92>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a7d      	ldr	r2, [pc, #500]	; (8002218 <HAL_I2C_Init+0x27c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	bf94      	ite	ls
 8002028:	2301      	movls	r3, #1
 800202a:	2300      	movhi	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0e7      	b.n	8002206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4a78      	ldr	r2, [pc, #480]	; (800221c <HAL_I2C_Init+0x280>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0c9b      	lsrs	r3, r3, #18
 8002040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <HAL_I2C_Init+0x274>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d802      	bhi.n	8002070 <HAL_I2C_Init+0xd4>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3301      	adds	r3, #1
 800206e:	e009      	b.n	8002084 <HAL_I2C_Init+0xe8>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	4a69      	ldr	r2, [pc, #420]	; (8002220 <HAL_I2C_Init+0x284>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	3301      	adds	r3, #1
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	430b      	orrs	r3, r1
 800208a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002096:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	495c      	ldr	r1, [pc, #368]	; (8002210 <HAL_I2C_Init+0x274>)
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d819      	bhi.n	80020d8 <HAL_I2C_Init+0x13c>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e59      	subs	r1, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b2:	1c59      	adds	r1, r3, #1
 80020b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020b8:	400b      	ands	r3, r1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_I2C_Init+0x138>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e59      	subs	r1, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d2:	e051      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 80020d4:	2304      	movs	r3, #4
 80020d6:	e04f      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d111      	bne.n	8002104 <HAL_I2C_Init+0x168>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	440b      	add	r3, r1
 80020ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e012      	b.n	800212a <HAL_I2C_Init+0x18e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e58      	subs	r0, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	0099      	lsls	r1, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	fbb0 f3f3 	udiv	r3, r0, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Init+0x196>
 800212e:	2301      	movs	r3, #1
 8002130:	e022      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10e      	bne.n	8002158 <HAL_I2C_Init+0x1bc>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e58      	subs	r0, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	440b      	add	r3, r1
 8002148:	fbb0 f3f3 	udiv	r3, r0, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002156:	e00f      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	0099      	lsls	r1, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	6809      	ldr	r1, [r1, #0]
 800217c:	4313      	orrs	r3, r2
 800217e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6911      	ldr	r1, [r2, #16]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68d2      	ldr	r2, [r2, #12]
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	000186a0 	.word	0x000186a0
 8002214:	001e847f 	.word	0x001e847f
 8002218:	003d08ff 	.word	0x003d08ff
 800221c:	431bde83 	.word	0x431bde83
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	460b      	mov	r3, r1
 8002232:	817b      	strh	r3, [r7, #10]
 8002234:	4613      	mov	r3, r2
 8002236:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fc1a 	bl	8001a70 <HAL_GetTick>
 800223c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	f040 80e0 	bne.w	800240c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2319      	movs	r3, #25
 8002252:	2201      	movs	r2, #1
 8002254:	4970      	ldr	r1, [pc, #448]	; (8002418 <HAL_I2C_Master_Transmit+0x1f4>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fe44 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	e0d3      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_I2C_Master_Transmit+0x50>
 8002270:	2302      	movs	r3, #2
 8002272:	e0cc      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d007      	beq.n	800229a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2221      	movs	r2, #33	; 0x21
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2210      	movs	r2, #16
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	893a      	ldrh	r2, [r7, #8]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a50      	ldr	r2, [pc, #320]	; (800241c <HAL_I2C_Master_Transmit+0x1f8>)
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022dc:	8979      	ldrh	r1, [r7, #10]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6a3a      	ldr	r2, [r7, #32]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fbfe 	bl	8002ae4 <I2C_MasterRequestWrite>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e08d      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002308:	e066      	b.n	80023d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6a39      	ldr	r1, [r7, #32]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 febe 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00d      	beq.n	8002336 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	2b04      	cmp	r3, #4
 8002320:	d107      	bne.n	8002332 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d11b      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x188>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d017      	beq.n	80023ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	6a39      	ldr	r1, [r7, #32]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 feae 	bl	8003112 <I2C_WaitOnBTFFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d107      	bne.n	80023d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e01a      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d194      	bne.n	800230a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	00100002 	.word	0x00100002
 800241c:	ffff0000 	.word	0xffff0000

08002420 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4603      	mov	r3, r0
 8002430:	817b      	strh	r3, [r7, #10]
 8002432:	460b      	mov	r3, r1
 8002434:	813b      	strh	r3, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800243a:	f7ff fb19 	bl	8001a70 <HAL_GetTick>
 800243e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	f040 80d9 	bne.w	8002600 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2319      	movs	r3, #25
 8002454:	2201      	movs	r2, #1
 8002456:	496d      	ldr	r1, [pc, #436]	; (800260c <HAL_I2C_Mem_Write+0x1ec>)
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fd43 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
 8002466:	e0cc      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_I2C_Mem_Write+0x56>
 8002472:	2302      	movs	r3, #2
 8002474:	e0c5      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d007      	beq.n	800249c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2221      	movs	r2, #33	; 0x21
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a3a      	ldr	r2, [r7, #32]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <HAL_I2C_Mem_Write+0x1f0>)
 80024dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024de:	88f8      	ldrh	r0, [r7, #6]
 80024e0:	893a      	ldrh	r2, [r7, #8]
 80024e2:	8979      	ldrh	r1, [r7, #10]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4603      	mov	r3, r0
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fb7a 	bl	8002be8 <I2C_RequestMemoryWrite>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d052      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e081      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fdc4 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b04      	cmp	r3, #4
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b04      	cmp	r3, #4
 8002566:	d11b      	bne.n	80025a0 <HAL_I2C_Mem_Write+0x180>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d017      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1aa      	bne.n	80024fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fdb0 	bl	8003112 <I2C_WaitOnBTFFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e016      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	00100002 	.word	0x00100002
 8002610:	ffff0000 	.word	0xffff0000

08002614 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	817b      	strh	r3, [r7, #10]
 8002626:	460b      	mov	r3, r1
 8002628:	813b      	strh	r3, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002632:	f7ff fa1d 	bl	8001a70 <HAL_GetTick>
 8002636:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b20      	cmp	r3, #32
 8002642:	f040 8244 	bne.w	8002ace <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2319      	movs	r3, #25
 800264c:	2201      	movs	r2, #1
 800264e:	4982      	ldr	r1, [pc, #520]	; (8002858 <HAL_I2C_Mem_Read+0x244>)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fc47 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
 800265e:	e237      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_I2C_Mem_Read+0x5a>
 800266a:	2302      	movs	r3, #2
 800266c:	e230      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2222      	movs	r2, #34	; 0x22
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a62      	ldr	r2, [pc, #392]	; (800285c <HAL_I2C_Mem_Read+0x248>)
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d6:	88f8      	ldrh	r0, [r7, #6]
 80026d8:	893a      	ldrh	r2, [r7, #8]
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4603      	mov	r3, r0
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fb14 	bl	8002d14 <I2C_RequestMemoryRead>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1ec      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d113      	bne.n	8002726 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e1c0      	b.n	8002aa8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b01      	cmp	r3, #1
 800272c:	d11e      	bne.n	800276c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800273e:	b672      	cpsid	i
}
 8002740:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002768:	b662      	cpsie	i
}
 800276a:	e035      	b.n	80027d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	2b02      	cmp	r3, #2
 8002772:	d11e      	bne.n	80027b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002782:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027ae:	b662      	cpsie	i
}
 80027b0:	e012      	b.n	80027d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027d8:	e166      	b.n	8002aa8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	2b03      	cmp	r3, #3
 80027e0:	f200 811f 	bhi.w	8002a22 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d123      	bne.n	8002834 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fccf 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e167      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002832:	e139      	b.n	8002aa8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	2b02      	cmp	r3, #2
 800283a:	d152      	bne.n	80028e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	2200      	movs	r2, #0
 8002844:	4906      	ldr	r1, [pc, #24]	; (8002860 <HAL_I2C_Mem_Read+0x24c>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fb4c 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e13c      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
 8002856:	bf00      	nop
 8002858:	00100002 	.word	0x00100002
 800285c:	ffff0000 	.word	0xffff0000
 8002860:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002864:	b672      	cpsid	i
}
 8002866:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028aa:	b662      	cpsie	i
}
 80028ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028e0:	e0e2      	b.n	8002aa8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	2200      	movs	r2, #0
 80028ea:	497b      	ldr	r1, [pc, #492]	; (8002ad8 <HAL_I2C_Mem_Read+0x4c4>)
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 faf9 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0e9      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800290c:	b672      	cpsid	i
}
 800290e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002942:	4b66      	ldr	r3, [pc, #408]	; (8002adc <HAL_I2C_Mem_Read+0x4c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	08db      	lsrs	r3, r3, #3
 8002948:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <HAL_I2C_Mem_Read+0x4cc>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0a1a      	lsrs	r2, r3, #8
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00da      	lsls	r2, r3, #3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	3b01      	subs	r3, #1
 8002960:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800298a:	b662      	cpsie	i
}
 800298c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e09a      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d1d9      	bne.n	800295c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029ea:	b662      	cpsie	i
}
 80029ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a20:	e042      	b.n	8002aa8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fbb4 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e04c      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d118      	bne.n	8002aa8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f47f ae94 	bne.w	80027da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	00010004 	.word	0x00010004
 8002adc:	20000010 	.word	0x20000010
 8002ae0:	14f8b589 	.word	0x14f8b589

08002ae4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	460b      	mov	r3, r1
 8002af2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d006      	beq.n	8002b0e <I2C_MasterRequestWrite+0x2a>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d003      	beq.n	8002b0e <I2C_MasterRequestWrite+0x2a>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b0c:	d108      	bne.n	8002b20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e00b      	b.n	8002b38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d107      	bne.n	8002b38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f9cd 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d103      	bne.n	8002b68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e035      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b74:	d108      	bne.n	8002b88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e01b      	b.n	8002bc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	11db      	asrs	r3, r3, #7
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 0306 	and.w	r3, r3, #6
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f063 030f 	orn	r3, r3, #15
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <I2C_MasterRequestWrite+0xfc>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f9f3 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e010      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4907      	ldr	r1, [pc, #28]	; (8002be4 <I2C_MasterRequestWrite+0x100>)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f9e3 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	00010008 	.word	0x00010008
 8002be4:	00010002 	.word	0x00010002

08002be8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	817b      	strh	r3, [r7, #10]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	813b      	strh	r3, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f960 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c38:	d103      	bne.n	8002c42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e05f      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	492d      	ldr	r1, [pc, #180]	; (8002d10 <I2C_RequestMemoryWrite+0x128>)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f998 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e04c      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	6a39      	ldr	r1, [r7, #32]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fa02 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d107      	bne.n	8002caa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e02b      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	e021      	b.n	8002d04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc0:	893b      	ldrh	r3, [r7, #8]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f9dc 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e005      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	00010002 	.word	0x00010002

08002d14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f8c2 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d74:	d103      	bne.n	8002d7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0aa      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	6a3a      	ldr	r2, [r7, #32]
 8002d96:	4952      	ldr	r1, [pc, #328]	; (8002ee0 <I2C_RequestMemoryRead+0x1cc>)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f8fa 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e097      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	6a39      	ldr	r1, [r7, #32]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f964 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d107      	bne.n	8002de6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e076      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	611a      	str	r2, [r3, #16]
 8002dfa:	e021      	b.n	8002e40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f93e 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e050      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f923 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e035      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f82b 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d103      	bne.n	8002eac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e013      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	6a3a      	ldr	r2, [r7, #32]
 8002ec4:	4906      	ldr	r1, [pc, #24]	; (8002ee0 <I2C_RequestMemoryRead+0x1cc>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f863 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	00010002 	.word	0x00010002

08002ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	e025      	b.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d021      	beq.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe fdb7 	bl	8001a70 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e023      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10d      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	e00c      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d0b6      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa0:	e051      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb0:	d123      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e046      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d021      	beq.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fe fd35 	bl	8001a70 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e020      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e00b      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d18d      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309c:	e02d      	b.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8ce 	bl	8003240 <I2C_IsAcknowledgeFailed>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e02d      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d021      	beq.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe fcdb 	bl	8001a70 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e007      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d1ca      	bne.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800311e:	e02d      	b.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f88d 	bl	8003240 <I2C_IsAcknowledgeFailed>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e02d      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d021      	beq.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fe fc9a 	bl	8001a70 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d1ca      	bne.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a0:	e042      	b.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d119      	bne.n	80031e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0210 	mvn.w	r2, #16
 80031b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e029      	b.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fc44 	bl	8001a70 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e007      	b.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d1b5      	bne.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	d11b      	bne.n	8003290 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003260:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e272      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8087 	beq.w	80033ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032bc:	4b92      	ldr	r3, [pc, #584]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d00c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032c8:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d112      	bne.n	80032fa <HAL_RCC_OscConfig+0x5e>
 80032d4:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d10b      	bne.n	80032fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x12c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d168      	bne.n	80033c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e24c      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x76>
 8003304:	4b80      	ldr	r3, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a7f      	ldr	r2, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800330a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e02e      	b.n	8003370 <HAL_RCC_OscConfig+0xd4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7a      	ldr	r2, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b78      	ldr	r3, [pc, #480]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a77      	ldr	r2, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0xd4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0xbc>
 800333e:	4b72      	ldr	r3, [pc, #456]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a71      	ldr	r2, [pc, #452]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b6f      	ldr	r3, [pc, #444]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6e      	ldr	r2, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xd4>
 8003358:	4b6b      	ldr	r3, [pc, #428]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a67      	ldr	r2, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe fb7a 	bl	8001a70 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe fb76 	bl	8001a70 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e200      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b5d      	ldr	r3, [pc, #372]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xe4>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fb66 	bl	8001a70 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fb62 	bl	8001a70 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1ec      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x10c>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d063      	beq.n	800349e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d6:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d11c      	bne.n	8003428 <HAL_RCC_OscConfig+0x18c>
 80033ee:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d116      	bne.n	8003428 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x176>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1c0      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4939      	ldr	r1, [pc, #228]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	e03a      	b.n	800349e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003430:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x270>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fe fb1b 	bl	8001a70 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343e:	f7fe fb17 	bl	8001a70 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1a1      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4927      	ldr	r1, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003472:	4b26      	ldr	r3, [pc, #152]	; (800350c <HAL_RCC_OscConfig+0x270>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fafa 	bl	8001a70 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe faf6 	bl	8001a70 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e180      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d03a      	beq.n	8003520 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d019      	beq.n	80034e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fe fada 	bl	8001a70 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fe fad6 	bl	8001a70 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e160      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034de:	2001      	movs	r0, #1
 80034e0:	f000 fac4 	bl	8003a6c <RCC_Delay>
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7fe fac0 	bl	8001a70 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f2:	e00f      	b.n	8003514 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe fabc 	bl	8001a70 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d908      	bls.n	8003514 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e146      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	42420000 	.word	0x42420000
 8003510:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	4b92      	ldr	r3, [pc, #584]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e9      	bne.n	80034f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a6 	beq.w	800367a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003532:	4b8b      	ldr	r3, [pc, #556]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10d      	bne.n	800355a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	4b88      	ldr	r3, [pc, #544]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4a87      	ldr	r2, [pc, #540]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	61d3      	str	r3, [r2, #28]
 800354a:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b82      	ldr	r3, [pc, #520]	; (8003764 <HAL_RCC_OscConfig+0x4c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b7f      	ldr	r3, [pc, #508]	; (8003764 <HAL_RCC_OscConfig+0x4c8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7e      	ldr	r2, [pc, #504]	; (8003764 <HAL_RCC_OscConfig+0x4c8>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fa7d 	bl	8001a70 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe fa79 	bl	8001a70 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e103      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b75      	ldr	r3, [pc, #468]	; (8003764 <HAL_RCC_OscConfig+0x4c8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x312>
 80035a0:	4b6f      	ldr	r3, [pc, #444]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4a6e      	ldr	r2, [pc, #440]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	e02d      	b.n	800360a <HAL_RCC_OscConfig+0x36e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035b6:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4a69      	ldr	r2, [pc, #420]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6213      	str	r3, [r2, #32]
 80035c2:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a66      	ldr	r2, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	e01c      	b.n	800360a <HAL_RCC_OscConfig+0x36e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCC_OscConfig+0x356>
 80035d8:	4b61      	ldr	r3, [pc, #388]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4a60      	ldr	r2, [pc, #384]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6213      	str	r3, [r2, #32]
 80035e4:	4b5e      	ldr	r3, [pc, #376]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4a5d      	ldr	r2, [pc, #372]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6213      	str	r3, [r2, #32]
 80035f0:	e00b      	b.n	800360a <HAL_RCC_OscConfig+0x36e>
 80035f2:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a5a      	ldr	r2, [pc, #360]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	4b58      	ldr	r3, [pc, #352]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a57      	ldr	r2, [pc, #348]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d015      	beq.n	800363e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe fa2d 	bl	8001a70 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe fa29 	bl	8001a70 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0b1      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ee      	beq.n	800361a <HAL_RCC_OscConfig+0x37e>
 800363c:	e014      	b.n	8003668 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fe fa17 	bl	8001a70 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe fa13 	bl	8001a70 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e09b      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ee      	bne.n	8003646 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4b3c      	ldr	r3, [pc, #240]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4a3b      	ldr	r2, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8087 	beq.w	8003792 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b08      	cmp	r3, #8
 800368e:	d061      	beq.n	8003754 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d146      	bne.n	8003726 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b33      	ldr	r3, [pc, #204]	; (8003768 <HAL_RCC_OscConfig+0x4cc>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fe f9e7 	bl	8001a70 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fe f9e3 	bl	8001a70 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e06d      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	4b29      	ldr	r3, [pc, #164]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d108      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4921      	ldr	r1, [pc, #132]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a19      	ldr	r1, [r3, #32]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	430b      	orrs	r3, r1
 80036f2:	491b      	ldr	r1, [pc, #108]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x4cc>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fe f9b7 	bl	8001a70 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe f9b3 	bl	8001a70 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e03d      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x46a>
 8003724:	e035      	b.n	8003792 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe f9a0 	bl	8001a70 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe f99c 	bl	8001a70 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e026      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x498>
 8003752:	e01e      	b.n	8003792 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e019      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
 8003760:	40021000 	.word	0x40021000
 8003764:	40007000 	.word	0x40007000
 8003768:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	429a      	cmp	r2, r3
 800377e:	d106      	bne.n	800378e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d001      	beq.n	8003792 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0d0      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b67      	ldr	r3, [pc, #412]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4965      	ldr	r1, [pc, #404]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800381e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d040      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d115      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e073      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06b      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4936      	ldr	r1, [pc, #216]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003890:	f7fe f8ee 	bl	8001a70 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fe f8ea 	bl	8001a70 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e053      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d210      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4922      	ldr	r1, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392e:	f000 f821 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003932:	4602      	mov	r2, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	490a      	ldr	r1, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	5ccb      	ldrb	r3, [r1, r3]
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1cc>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1d0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe f84c 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40022000 	.word	0x40022000
 8003964:	40021000 	.word	0x40021000
 8003968:	08007384 	.word	0x08007384
 800396c:	20000010 	.word	0x20000010
 8003970:	20000014 	.word	0x20000014

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800397a:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xac>)
 800397c:	1d3c      	adds	r4, r7, #4
 800397e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003984:	f240 2301 	movw	r3, #513	; 0x201
 8003988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399e:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x46>
 80039b2:	e02b      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039b6:	623b      	str	r3, [r7, #32]
      break;
 80039b8:	e02b      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3328      	adds	r3, #40	; 0x28
 80039c4:	443b      	add	r3, r7
 80039c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d012      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	0c5b      	lsrs	r3, r3, #17
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	3328      	adds	r3, #40	; 0x28
 80039e2:	443b      	add	r3, r7
 80039e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ee:	fb03 f202 	mul.w	r2, r3, r2
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e004      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	623b      	str	r3, [r7, #32]
      break;
 8003a0a:	e002      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a0e:	623b      	str	r3, [r7, #32]
      break;
 8003a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a12:	6a3b      	ldr	r3, [r7, #32]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc90      	pop	{r4, r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	08007374 	.word	0x08007374
 8003a24:	40021000 	.word	0x40021000
 8003a28:	007a1200 	.word	0x007a1200
 8003a2c:	003d0900 	.word	0x003d0900

08003a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	20000010 	.word	0x20000010

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a48:	f7ff fff2 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08007394 	.word	0x08007394

08003a6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <RCC_Delay+0x34>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <RCC_Delay+0x38>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	0a5b      	lsrs	r3, r3, #9
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a88:	bf00      	nop
  }
  while (Delay --);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	60fa      	str	r2, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f9      	bne.n	8003a88 <RCC_Delay+0x1c>
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	20000010 	.word	0x20000010
 8003aa4:	10624dd3 	.word	0x10624dd3

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e041      	b.n	8003b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fe16 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 faaa 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e041      	b.n	8003bdc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f839 	bl	8003be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f000 fa5b 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_TIM_PWM_Start+0x24>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e022      	b.n	8003c62 <HAL_TIM_PWM_Start+0x6a>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d109      	bne.n	8003c36 <HAL_TIM_PWM_Start+0x3e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	e015      	b.n	8003c62 <HAL_TIM_PWM_Start+0x6a>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d109      	bne.n	8003c50 <HAL_TIM_PWM_Start+0x58>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	bf14      	ite	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	2300      	moveq	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e008      	b.n	8003c62 <HAL_TIM_PWM_Start+0x6a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e05e      	b.n	8003d28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x82>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	e013      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xaa>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x92>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c88:	e00b      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xaa>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_PWM_Start+0xa2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c98:	e003      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xaa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	6839      	ldr	r1, [r7, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fc48 	bl	8004540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <HAL_TIM_PWM_Start+0x138>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d107      	bne.n	8003cca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_TIM_PWM_Start+0x138>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0xfa>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cdc:	d009      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0xfa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <HAL_TIM_PWM_Start+0x13c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0xfa>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <HAL_TIM_PWM_Start+0x140>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d010      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	e007      	b.n	8003d26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e0ac      	b.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	f200 809f 	bhi.w	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003ea5 	.word	0x08003ea5
 8003d74:	08003ea5 	.word	0x08003ea5
 8003d78:	08003ea5 	.word	0x08003ea5
 8003d7c:	08003de1 	.word	0x08003de1
 8003d80:	08003ea5 	.word	0x08003ea5
 8003d84:	08003ea5 	.word	0x08003ea5
 8003d88:	08003ea5 	.word	0x08003ea5
 8003d8c:	08003e23 	.word	0x08003e23
 8003d90:	08003ea5 	.word	0x08003ea5
 8003d94:	08003ea5 	.word	0x08003ea5
 8003d98:	08003ea5 	.word	0x08003ea5
 8003d9c:	08003e63 	.word	0x08003e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f9ac 	bl	8004104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0204 	bic.w	r2, r2, #4
 8003dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6999      	ldr	r1, [r3, #24]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	619a      	str	r2, [r3, #24]
      break;
 8003dde:	e062      	b.n	8003ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f9f2 	bl	80041d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6999      	ldr	r1, [r3, #24]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	619a      	str	r2, [r3, #24]
      break;
 8003e20:	e041      	b.n	8003ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fa3b 	bl	80042a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0208 	orr.w	r2, r2, #8
 8003e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0204 	bic.w	r2, r2, #4
 8003e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69d9      	ldr	r1, [r3, #28]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	61da      	str	r2, [r3, #28]
      break;
 8003e60:	e021      	b.n	8003ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fa85 	bl	8004378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69d9      	ldr	r1, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	021a      	lsls	r2, r3, #8
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	61da      	str	r2, [r3, #28]
      break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_ConfigClockSource+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0b3      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x180>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f08:	d03e      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0xd0>
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	f200 8087 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	f000 8085 	beq.w	8004024 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1e:	d87f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d01a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0xa2>
 8003f24:	2b70      	cmp	r3, #112	; 0x70
 8003f26:	d87b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f28:	2b60      	cmp	r3, #96	; 0x60
 8003f2a:	d050      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x116>
 8003f2c:	2b60      	cmp	r3, #96	; 0x60
 8003f2e:	d877      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f30:	2b50      	cmp	r3, #80	; 0x50
 8003f32:	d03c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0xf6>
 8003f34:	2b50      	cmp	r3, #80	; 0x50
 8003f36:	d873      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d058      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x136>
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d86f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f40:	2b30      	cmp	r3, #48	; 0x30
 8003f42:	d064      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x156>
 8003f44:	2b30      	cmp	r3, #48	; 0x30
 8003f46:	d86b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d060      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x156>
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d867      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x156>
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d05a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f58:	e062      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6899      	ldr	r1, [r3, #8]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f000 faca 	bl	8004502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	609a      	str	r2, [r3, #8]
      break;
 8003f86:	e04e      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6899      	ldr	r1, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f000 fab3 	bl	8004502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003faa:	609a      	str	r2, [r3, #8]
      break;
 8003fac:	e03b      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 fa2a 	bl	8004414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2150      	movs	r1, #80	; 0x50
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fa81 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e02b      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fa48 	bl	8004470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2160      	movs	r1, #96	; 0x60
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fa71 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003fec:	e01b      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fa0a 	bl	8004414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fa61 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 800400c:	e00b      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 fa58 	bl	80044ce <TIM_ITRx_SetConfig>
        break;
 800401e:	e002      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004020:	bf00      	nop
 8004022:	e000      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004024:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <TIM_Base_SetConfig+0xb8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00b      	beq.n	8004070 <TIM_Base_SetConfig+0x30>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405e:	d007      	beq.n	8004070 <TIM_Base_SetConfig+0x30>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0xbc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_Base_SetConfig+0x30>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0xc0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d108      	bne.n	8004082 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <TIM_Base_SetConfig+0xb8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0x62>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0x62>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <TIM_Base_SetConfig+0xbc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0x62>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a18      	ldr	r2, [pc, #96]	; (8004100 <TIM_Base_SetConfig+0xc0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <TIM_Base_SetConfig+0xb8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800

08004104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f023 0201 	bic.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 0302 	bic.w	r3, r3, #2
 800414c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <TIM_OC1_SetConfig+0xc8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0308 	bic.w	r3, r3, #8
 8004166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a13      	ldr	r2, [pc, #76]	; (80041cc <TIM_OC1_SetConfig+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d111      	bne.n	80041a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00

080041d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0210 	bic.w	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0320 	bic.w	r3, r3, #32
 800421a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <TIM_OC2_SetConfig+0xd0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10d      	bne.n	800424c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <TIM_OC2_SetConfig+0xd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d113      	bne.n	800427c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	40012c00 	.word	0x40012c00

080042a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <TIM_OC3_SetConfig+0xd0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10d      	bne.n	800431e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800431c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <TIM_OC3_SetConfig+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d113      	bne.n	800434e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800432c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00

08004378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <TIM_OC4_SetConfig+0x98>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d109      	bne.n	80043ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00

08004414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 030a 	bic.w	r3, r3, #10
 8004450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 0210 	bic.w	r2, r3, #16
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800449a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	031b      	lsls	r3, r3, #12
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f043 0307 	orr.w	r3, r3, #7
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr

08004502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800451c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	021a      	lsls	r2, r3, #8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	431a      	orrs	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	609a      	str	r2, [r3, #8]
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2201      	movs	r2, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800459c:	2302      	movs	r3, #2
 800459e:	e046      	b.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ec:	d009      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a10      	ldr	r2, [pc, #64]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10c      	bne.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800

08004644 <__cvt>:
 8004644:	2b00      	cmp	r3, #0
 8004646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800464a:	461f      	mov	r7, r3
 800464c:	bfbb      	ittet	lt
 800464e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004652:	461f      	movlt	r7, r3
 8004654:	2300      	movge	r3, #0
 8004656:	232d      	movlt	r3, #45	; 0x2d
 8004658:	b088      	sub	sp, #32
 800465a:	4614      	mov	r4, r2
 800465c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800465e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004660:	7013      	strb	r3, [r2, #0]
 8004662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004664:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004668:	f023 0820 	bic.w	r8, r3, #32
 800466c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004670:	d005      	beq.n	800467e <__cvt+0x3a>
 8004672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004676:	d100      	bne.n	800467a <__cvt+0x36>
 8004678:	3501      	adds	r5, #1
 800467a:	2302      	movs	r3, #2
 800467c:	e000      	b.n	8004680 <__cvt+0x3c>
 800467e:	2303      	movs	r3, #3
 8004680:	aa07      	add	r2, sp, #28
 8004682:	9204      	str	r2, [sp, #16]
 8004684:	aa06      	add	r2, sp, #24
 8004686:	e9cd a202 	strd	sl, r2, [sp, #8]
 800468a:	e9cd 3500 	strd	r3, r5, [sp]
 800468e:	4622      	mov	r2, r4
 8004690:	463b      	mov	r3, r7
 8004692:	f000 fe85 	bl	80053a0 <_dtoa_r>
 8004696:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800469a:	4606      	mov	r6, r0
 800469c:	d102      	bne.n	80046a4 <__cvt+0x60>
 800469e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046a0:	07db      	lsls	r3, r3, #31
 80046a2:	d522      	bpl.n	80046ea <__cvt+0xa6>
 80046a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046a8:	eb06 0905 	add.w	r9, r6, r5
 80046ac:	d110      	bne.n	80046d0 <__cvt+0x8c>
 80046ae:	7833      	ldrb	r3, [r6, #0]
 80046b0:	2b30      	cmp	r3, #48	; 0x30
 80046b2:	d10a      	bne.n	80046ca <__cvt+0x86>
 80046b4:	2200      	movs	r2, #0
 80046b6:	2300      	movs	r3, #0
 80046b8:	4620      	mov	r0, r4
 80046ba:	4639      	mov	r1, r7
 80046bc:	f7fc f974 	bl	80009a8 <__aeabi_dcmpeq>
 80046c0:	b918      	cbnz	r0, 80046ca <__cvt+0x86>
 80046c2:	f1c5 0501 	rsb	r5, r5, #1
 80046c6:	f8ca 5000 	str.w	r5, [sl]
 80046ca:	f8da 3000 	ldr.w	r3, [sl]
 80046ce:	4499      	add	r9, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	2300      	movs	r3, #0
 80046d4:	4620      	mov	r0, r4
 80046d6:	4639      	mov	r1, r7
 80046d8:	f7fc f966 	bl	80009a8 <__aeabi_dcmpeq>
 80046dc:	b108      	cbz	r0, 80046e2 <__cvt+0x9e>
 80046de:	f8cd 901c 	str.w	r9, [sp, #28]
 80046e2:	2230      	movs	r2, #48	; 0x30
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	454b      	cmp	r3, r9
 80046e8:	d307      	bcc.n	80046fa <__cvt+0xb6>
 80046ea:	4630      	mov	r0, r6
 80046ec:	9b07      	ldr	r3, [sp, #28]
 80046ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046f0:	1b9b      	subs	r3, r3, r6
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	b008      	add	sp, #32
 80046f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	9107      	str	r1, [sp, #28]
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	e7f0      	b.n	80046e4 <__cvt+0xa0>

08004702 <__exponent>:
 8004702:	4603      	mov	r3, r0
 8004704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004706:	2900      	cmp	r1, #0
 8004708:	f803 2b02 	strb.w	r2, [r3], #2
 800470c:	bfb6      	itet	lt
 800470e:	222d      	movlt	r2, #45	; 0x2d
 8004710:	222b      	movge	r2, #43	; 0x2b
 8004712:	4249      	neglt	r1, r1
 8004714:	2909      	cmp	r1, #9
 8004716:	7042      	strb	r2, [r0, #1]
 8004718:	dd2a      	ble.n	8004770 <__exponent+0x6e>
 800471a:	f10d 0207 	add.w	r2, sp, #7
 800471e:	4617      	mov	r7, r2
 8004720:	260a      	movs	r6, #10
 8004722:	fb91 f5f6 	sdiv	r5, r1, r6
 8004726:	4694      	mov	ip, r2
 8004728:	fb06 1415 	mls	r4, r6, r5, r1
 800472c:	3430      	adds	r4, #48	; 0x30
 800472e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004732:	460c      	mov	r4, r1
 8004734:	2c63      	cmp	r4, #99	; 0x63
 8004736:	4629      	mov	r1, r5
 8004738:	f102 32ff 	add.w	r2, r2, #4294967295
 800473c:	dcf1      	bgt.n	8004722 <__exponent+0x20>
 800473e:	3130      	adds	r1, #48	; 0x30
 8004740:	f1ac 0402 	sub.w	r4, ip, #2
 8004744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004748:	4622      	mov	r2, r4
 800474a:	1c41      	adds	r1, r0, #1
 800474c:	42ba      	cmp	r2, r7
 800474e:	d30a      	bcc.n	8004766 <__exponent+0x64>
 8004750:	f10d 0209 	add.w	r2, sp, #9
 8004754:	eba2 020c 	sub.w	r2, r2, ip
 8004758:	42bc      	cmp	r4, r7
 800475a:	bf88      	it	hi
 800475c:	2200      	movhi	r2, #0
 800475e:	4413      	add	r3, r2
 8004760:	1a18      	subs	r0, r3, r0
 8004762:	b003      	add	sp, #12
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	f812 5b01 	ldrb.w	r5, [r2], #1
 800476a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800476e:	e7ed      	b.n	800474c <__exponent+0x4a>
 8004770:	2330      	movs	r3, #48	; 0x30
 8004772:	3130      	adds	r1, #48	; 0x30
 8004774:	7083      	strb	r3, [r0, #2]
 8004776:	70c1      	strb	r1, [r0, #3]
 8004778:	1d03      	adds	r3, r0, #4
 800477a:	e7f1      	b.n	8004760 <__exponent+0x5e>

0800477c <_printf_float>:
 800477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004780:	b091      	sub	sp, #68	; 0x44
 8004782:	460c      	mov	r4, r1
 8004784:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004788:	4616      	mov	r6, r2
 800478a:	461f      	mov	r7, r3
 800478c:	4605      	mov	r5, r0
 800478e:	f000 fcf9 	bl	8005184 <_localeconv_r>
 8004792:	6803      	ldr	r3, [r0, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	9309      	str	r3, [sp, #36]	; 0x24
 8004798:	f7fb fcda 	bl	8000150 <strlen>
 800479c:	2300      	movs	r3, #0
 800479e:	930e      	str	r3, [sp, #56]	; 0x38
 80047a0:	f8d8 3000 	ldr.w	r3, [r8]
 80047a4:	900a      	str	r0, [sp, #40]	; 0x28
 80047a6:	3307      	adds	r3, #7
 80047a8:	f023 0307 	bic.w	r3, r3, #7
 80047ac:	f103 0208 	add.w	r2, r3, #8
 80047b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80047b4:	f8d4 b000 	ldr.w	fp, [r4]
 80047b8:	f8c8 2000 	str.w	r2, [r8]
 80047bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80047c0:	4652      	mov	r2, sl
 80047c2:	4643      	mov	r3, r8
 80047c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80047cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ce:	f04f 32ff 	mov.w	r2, #4294967295
 80047d2:	4650      	mov	r0, sl
 80047d4:	4b9c      	ldr	r3, [pc, #624]	; (8004a48 <_printf_float+0x2cc>)
 80047d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047d8:	f7fc f918 	bl	8000a0c <__aeabi_dcmpun>
 80047dc:	bb70      	cbnz	r0, 800483c <_printf_float+0xc0>
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	4650      	mov	r0, sl
 80047e4:	4b98      	ldr	r3, [pc, #608]	; (8004a48 <_printf_float+0x2cc>)
 80047e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047e8:	f7fc f8f2 	bl	80009d0 <__aeabi_dcmple>
 80047ec:	bb30      	cbnz	r0, 800483c <_printf_float+0xc0>
 80047ee:	2200      	movs	r2, #0
 80047f0:	2300      	movs	r3, #0
 80047f2:	4650      	mov	r0, sl
 80047f4:	4641      	mov	r1, r8
 80047f6:	f7fc f8e1 	bl	80009bc <__aeabi_dcmplt>
 80047fa:	b110      	cbz	r0, 8004802 <_printf_float+0x86>
 80047fc:	232d      	movs	r3, #45	; 0x2d
 80047fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004802:	4a92      	ldr	r2, [pc, #584]	; (8004a4c <_printf_float+0x2d0>)
 8004804:	4b92      	ldr	r3, [pc, #584]	; (8004a50 <_printf_float+0x2d4>)
 8004806:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800480a:	bf94      	ite	ls
 800480c:	4690      	movls	r8, r2
 800480e:	4698      	movhi	r8, r3
 8004810:	2303      	movs	r3, #3
 8004812:	f04f 0a00 	mov.w	sl, #0
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	f02b 0304 	bic.w	r3, fp, #4
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	4633      	mov	r3, r6
 8004820:	4621      	mov	r1, r4
 8004822:	4628      	mov	r0, r5
 8004824:	9700      	str	r7, [sp, #0]
 8004826:	aa0f      	add	r2, sp, #60	; 0x3c
 8004828:	f000 f9d6 	bl	8004bd8 <_printf_common>
 800482c:	3001      	adds	r0, #1
 800482e:	f040 8090 	bne.w	8004952 <_printf_float+0x1d6>
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
 8004836:	b011      	add	sp, #68	; 0x44
 8004838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483c:	4652      	mov	r2, sl
 800483e:	4643      	mov	r3, r8
 8004840:	4650      	mov	r0, sl
 8004842:	4641      	mov	r1, r8
 8004844:	f7fc f8e2 	bl	8000a0c <__aeabi_dcmpun>
 8004848:	b148      	cbz	r0, 800485e <_printf_float+0xe2>
 800484a:	f1b8 0f00 	cmp.w	r8, #0
 800484e:	bfb8      	it	lt
 8004850:	232d      	movlt	r3, #45	; 0x2d
 8004852:	4a80      	ldr	r2, [pc, #512]	; (8004a54 <_printf_float+0x2d8>)
 8004854:	bfb8      	it	lt
 8004856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800485a:	4b7f      	ldr	r3, [pc, #508]	; (8004a58 <_printf_float+0x2dc>)
 800485c:	e7d3      	b.n	8004806 <_printf_float+0x8a>
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	d142      	bne.n	80048ee <_printf_float+0x172>
 8004868:	2306      	movs	r3, #6
 800486a:	6063      	str	r3, [r4, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	9206      	str	r2, [sp, #24]
 8004870:	aa0e      	add	r2, sp, #56	; 0x38
 8004872:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004876:	aa0d      	add	r2, sp, #52	; 0x34
 8004878:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800487c:	9203      	str	r2, [sp, #12]
 800487e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004882:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	4652      	mov	r2, sl
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4628      	mov	r0, r5
 8004890:	4643      	mov	r3, r8
 8004892:	910b      	str	r1, [sp, #44]	; 0x2c
 8004894:	f7ff fed6 	bl	8004644 <__cvt>
 8004898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800489a:	4680      	mov	r8, r0
 800489c:	2947      	cmp	r1, #71	; 0x47
 800489e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048a0:	d108      	bne.n	80048b4 <_printf_float+0x138>
 80048a2:	1cc8      	adds	r0, r1, #3
 80048a4:	db02      	blt.n	80048ac <_printf_float+0x130>
 80048a6:	6863      	ldr	r3, [r4, #4]
 80048a8:	4299      	cmp	r1, r3
 80048aa:	dd40      	ble.n	800492e <_printf_float+0x1b2>
 80048ac:	f1a9 0902 	sub.w	r9, r9, #2
 80048b0:	fa5f f989 	uxtb.w	r9, r9
 80048b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048b8:	d81f      	bhi.n	80048fa <_printf_float+0x17e>
 80048ba:	464a      	mov	r2, r9
 80048bc:	3901      	subs	r1, #1
 80048be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048c2:	910d      	str	r1, [sp, #52]	; 0x34
 80048c4:	f7ff ff1d 	bl	8004702 <__exponent>
 80048c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ca:	4682      	mov	sl, r0
 80048cc:	1813      	adds	r3, r2, r0
 80048ce:	2a01      	cmp	r2, #1
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	dc02      	bgt.n	80048da <_printf_float+0x15e>
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	07d2      	lsls	r2, r2, #31
 80048d8:	d501      	bpl.n	80048de <_printf_float+0x162>
 80048da:	3301      	adds	r3, #1
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d09b      	beq.n	800481e <_printf_float+0xa2>
 80048e6:	232d      	movs	r3, #45	; 0x2d
 80048e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ec:	e797      	b.n	800481e <_printf_float+0xa2>
 80048ee:	2947      	cmp	r1, #71	; 0x47
 80048f0:	d1bc      	bne.n	800486c <_printf_float+0xf0>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ba      	bne.n	800486c <_printf_float+0xf0>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7b7      	b.n	800486a <_printf_float+0xee>
 80048fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048fe:	d118      	bne.n	8004932 <_printf_float+0x1b6>
 8004900:	2900      	cmp	r1, #0
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	dd0b      	ble.n	800491e <_printf_float+0x1a2>
 8004906:	6121      	str	r1, [r4, #16]
 8004908:	b913      	cbnz	r3, 8004910 <_printf_float+0x194>
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	07d0      	lsls	r0, r2, #31
 800490e:	d502      	bpl.n	8004916 <_printf_float+0x19a>
 8004910:	3301      	adds	r3, #1
 8004912:	440b      	add	r3, r1
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	f04f 0a00 	mov.w	sl, #0
 800491a:	65a1      	str	r1, [r4, #88]	; 0x58
 800491c:	e7df      	b.n	80048de <_printf_float+0x162>
 800491e:	b913      	cbnz	r3, 8004926 <_printf_float+0x1aa>
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	07d2      	lsls	r2, r2, #31
 8004924:	d501      	bpl.n	800492a <_printf_float+0x1ae>
 8004926:	3302      	adds	r3, #2
 8004928:	e7f4      	b.n	8004914 <_printf_float+0x198>
 800492a:	2301      	movs	r3, #1
 800492c:	e7f2      	b.n	8004914 <_printf_float+0x198>
 800492e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004934:	4299      	cmp	r1, r3
 8004936:	db05      	blt.n	8004944 <_printf_float+0x1c8>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	6121      	str	r1, [r4, #16]
 800493c:	07d8      	lsls	r0, r3, #31
 800493e:	d5ea      	bpl.n	8004916 <_printf_float+0x19a>
 8004940:	1c4b      	adds	r3, r1, #1
 8004942:	e7e7      	b.n	8004914 <_printf_float+0x198>
 8004944:	2900      	cmp	r1, #0
 8004946:	bfcc      	ite	gt
 8004948:	2201      	movgt	r2, #1
 800494a:	f1c1 0202 	rsble	r2, r1, #2
 800494e:	4413      	add	r3, r2
 8004950:	e7e0      	b.n	8004914 <_printf_float+0x198>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	055a      	lsls	r2, r3, #21
 8004956:	d407      	bmi.n	8004968 <_printf_float+0x1ec>
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	4642      	mov	r2, r8
 800495c:	4631      	mov	r1, r6
 800495e:	4628      	mov	r0, r5
 8004960:	47b8      	blx	r7
 8004962:	3001      	adds	r0, #1
 8004964:	d12b      	bne.n	80049be <_printf_float+0x242>
 8004966:	e764      	b.n	8004832 <_printf_float+0xb6>
 8004968:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800496c:	f240 80dd 	bls.w	8004b2a <_printf_float+0x3ae>
 8004970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004974:	2200      	movs	r2, #0
 8004976:	2300      	movs	r3, #0
 8004978:	f7fc f816 	bl	80009a8 <__aeabi_dcmpeq>
 800497c:	2800      	cmp	r0, #0
 800497e:	d033      	beq.n	80049e8 <_printf_float+0x26c>
 8004980:	2301      	movs	r3, #1
 8004982:	4631      	mov	r1, r6
 8004984:	4628      	mov	r0, r5
 8004986:	4a35      	ldr	r2, [pc, #212]	; (8004a5c <_printf_float+0x2e0>)
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	f43f af51 	beq.w	8004832 <_printf_float+0xb6>
 8004990:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004994:	429a      	cmp	r2, r3
 8004996:	db02      	blt.n	800499e <_printf_float+0x222>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	07d8      	lsls	r0, r3, #31
 800499c:	d50f      	bpl.n	80049be <_printf_float+0x242>
 800499e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	f43f af42 	beq.w	8004832 <_printf_float+0xb6>
 80049ae:	f04f 0800 	mov.w	r8, #0
 80049b2:	f104 091a 	add.w	r9, r4, #26
 80049b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b8:	3b01      	subs	r3, #1
 80049ba:	4543      	cmp	r3, r8
 80049bc:	dc09      	bgt.n	80049d2 <_printf_float+0x256>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	079b      	lsls	r3, r3, #30
 80049c2:	f100 8104 	bmi.w	8004bce <_printf_float+0x452>
 80049c6:	68e0      	ldr	r0, [r4, #12]
 80049c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049ca:	4298      	cmp	r0, r3
 80049cc:	bfb8      	it	lt
 80049ce:	4618      	movlt	r0, r3
 80049d0:	e731      	b.n	8004836 <_printf_float+0xba>
 80049d2:	2301      	movs	r3, #1
 80049d4:	464a      	mov	r2, r9
 80049d6:	4631      	mov	r1, r6
 80049d8:	4628      	mov	r0, r5
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	f43f af28 	beq.w	8004832 <_printf_float+0xb6>
 80049e2:	f108 0801 	add.w	r8, r8, #1
 80049e6:	e7e6      	b.n	80049b6 <_printf_float+0x23a>
 80049e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dc38      	bgt.n	8004a60 <_printf_float+0x2e4>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <_printf_float+0x2e0>)
 80049f6:	47b8      	blx	r7
 80049f8:	3001      	adds	r0, #1
 80049fa:	f43f af1a 	beq.w	8004832 <_printf_float+0xb6>
 80049fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004a02:	4313      	orrs	r3, r2
 8004a04:	d102      	bne.n	8004a0c <_printf_float+0x290>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	07d9      	lsls	r1, r3, #31
 8004a0a:	d5d8      	bpl.n	80049be <_printf_float+0x242>
 8004a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f af0b 	beq.w	8004832 <_printf_float+0xb6>
 8004a1c:	f04f 0900 	mov.w	r9, #0
 8004a20:	f104 0a1a 	add.w	sl, r4, #26
 8004a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a26:	425b      	negs	r3, r3
 8004a28:	454b      	cmp	r3, r9
 8004a2a:	dc01      	bgt.n	8004a30 <_printf_float+0x2b4>
 8004a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a2e:	e794      	b.n	800495a <_printf_float+0x1de>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4652      	mov	r2, sl
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f aef9 	beq.w	8004832 <_printf_float+0xb6>
 8004a40:	f109 0901 	add.w	r9, r9, #1
 8004a44:	e7ee      	b.n	8004a24 <_printf_float+0x2a8>
 8004a46:	bf00      	nop
 8004a48:	7fefffff 	.word	0x7fefffff
 8004a4c:	0800739c 	.word	0x0800739c
 8004a50:	080073a0 	.word	0x080073a0
 8004a54:	080073a4 	.word	0x080073a4
 8004a58:	080073a8 	.word	0x080073a8
 8004a5c:	080073ac 	.word	0x080073ac
 8004a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a64:	429a      	cmp	r2, r3
 8004a66:	bfa8      	it	ge
 8004a68:	461a      	movge	r2, r3
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	4691      	mov	r9, r2
 8004a6e:	dc37      	bgt.n	8004ae0 <_printf_float+0x364>
 8004a70:	f04f 0b00 	mov.w	fp, #0
 8004a74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a78:	f104 021a 	add.w	r2, r4, #26
 8004a7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a80:	ebaa 0309 	sub.w	r3, sl, r9
 8004a84:	455b      	cmp	r3, fp
 8004a86:	dc33      	bgt.n	8004af0 <_printf_float+0x374>
 8004a88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	db3b      	blt.n	8004b08 <_printf_float+0x38c>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	07da      	lsls	r2, r3, #31
 8004a94:	d438      	bmi.n	8004b08 <_printf_float+0x38c>
 8004a96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004a9a:	eba2 0903 	sub.w	r9, r2, r3
 8004a9e:	eba2 020a 	sub.w	r2, r2, sl
 8004aa2:	4591      	cmp	r9, r2
 8004aa4:	bfa8      	it	ge
 8004aa6:	4691      	movge	r9, r2
 8004aa8:	f1b9 0f00 	cmp.w	r9, #0
 8004aac:	dc34      	bgt.n	8004b18 <_printf_float+0x39c>
 8004aae:	f04f 0800 	mov.w	r8, #0
 8004ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ab6:	f104 0a1a 	add.w	sl, r4, #26
 8004aba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	eba3 0309 	sub.w	r3, r3, r9
 8004ac4:	4543      	cmp	r3, r8
 8004ac6:	f77f af7a 	ble.w	80049be <_printf_float+0x242>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4652      	mov	r2, sl
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f43f aeac 	beq.w	8004832 <_printf_float+0xb6>
 8004ada:	f108 0801 	add.w	r8, r8, #1
 8004ade:	e7ec      	b.n	8004aba <_printf_float+0x33e>
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b8      	blx	r7
 8004aea:	3001      	adds	r0, #1
 8004aec:	d1c0      	bne.n	8004a70 <_printf_float+0x2f4>
 8004aee:	e6a0      	b.n	8004832 <_printf_float+0xb6>
 8004af0:	2301      	movs	r3, #1
 8004af2:	4631      	mov	r1, r6
 8004af4:	4628      	mov	r0, r5
 8004af6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f43f ae99 	beq.w	8004832 <_printf_float+0xb6>
 8004b00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b02:	f10b 0b01 	add.w	fp, fp, #1
 8004b06:	e7b9      	b.n	8004a7c <_printf_float+0x300>
 8004b08:	4631      	mov	r1, r6
 8004b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b0e:	4628      	mov	r0, r5
 8004b10:	47b8      	blx	r7
 8004b12:	3001      	adds	r0, #1
 8004b14:	d1bf      	bne.n	8004a96 <_printf_float+0x31a>
 8004b16:	e68c      	b.n	8004832 <_printf_float+0xb6>
 8004b18:	464b      	mov	r3, r9
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	eb08 020a 	add.w	r2, r8, sl
 8004b22:	47b8      	blx	r7
 8004b24:	3001      	adds	r0, #1
 8004b26:	d1c2      	bne.n	8004aae <_printf_float+0x332>
 8004b28:	e683      	b.n	8004832 <_printf_float+0xb6>
 8004b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b2c:	2a01      	cmp	r2, #1
 8004b2e:	dc01      	bgt.n	8004b34 <_printf_float+0x3b8>
 8004b30:	07db      	lsls	r3, r3, #31
 8004b32:	d539      	bpl.n	8004ba8 <_printf_float+0x42c>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4642      	mov	r2, r8
 8004b38:	4631      	mov	r1, r6
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	47b8      	blx	r7
 8004b3e:	3001      	adds	r0, #1
 8004b40:	f43f ae77 	beq.w	8004832 <_printf_float+0xb6>
 8004b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b8      	blx	r7
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f43f ae6f 	beq.w	8004832 <_printf_float+0xb6>
 8004b54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004b60:	f7fb ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8004b64:	b9d8      	cbnz	r0, 8004b9e <_printf_float+0x422>
 8004b66:	f109 33ff 	add.w	r3, r9, #4294967295
 8004b6a:	f108 0201 	add.w	r2, r8, #1
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4628      	mov	r0, r5
 8004b72:	47b8      	blx	r7
 8004b74:	3001      	adds	r0, #1
 8004b76:	d10e      	bne.n	8004b96 <_printf_float+0x41a>
 8004b78:	e65b      	b.n	8004832 <_printf_float+0xb6>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	464a      	mov	r2, r9
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b8      	blx	r7
 8004b84:	3001      	adds	r0, #1
 8004b86:	f43f ae54 	beq.w	8004832 <_printf_float+0xb6>
 8004b8a:	f108 0801 	add.w	r8, r8, #1
 8004b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b90:	3b01      	subs	r3, #1
 8004b92:	4543      	cmp	r3, r8
 8004b94:	dcf1      	bgt.n	8004b7a <_printf_float+0x3fe>
 8004b96:	4653      	mov	r3, sl
 8004b98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b9c:	e6de      	b.n	800495c <_printf_float+0x1e0>
 8004b9e:	f04f 0800 	mov.w	r8, #0
 8004ba2:	f104 091a 	add.w	r9, r4, #26
 8004ba6:	e7f2      	b.n	8004b8e <_printf_float+0x412>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4642      	mov	r2, r8
 8004bac:	e7df      	b.n	8004b6e <_printf_float+0x3f2>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	464a      	mov	r2, r9
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b8      	blx	r7
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f43f ae3a 	beq.w	8004832 <_printf_float+0xb6>
 8004bbe:	f108 0801 	add.w	r8, r8, #1
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004bc6:	1a5b      	subs	r3, r3, r1
 8004bc8:	4543      	cmp	r3, r8
 8004bca:	dcf0      	bgt.n	8004bae <_printf_float+0x432>
 8004bcc:	e6fb      	b.n	80049c6 <_printf_float+0x24a>
 8004bce:	f04f 0800 	mov.w	r8, #0
 8004bd2:	f104 0919 	add.w	r9, r4, #25
 8004bd6:	e7f4      	b.n	8004bc2 <_printf_float+0x446>

08004bd8 <_printf_common>:
 8004bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	4616      	mov	r6, r2
 8004bde:	4699      	mov	r9, r3
 8004be0:	688a      	ldr	r2, [r1, #8]
 8004be2:	690b      	ldr	r3, [r1, #16]
 8004be4:	4607      	mov	r7, r0
 8004be6:	4293      	cmp	r3, r2
 8004be8:	bfb8      	it	lt
 8004bea:	4613      	movlt	r3, r2
 8004bec:	6033      	str	r3, [r6, #0]
 8004bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bf8:	b10a      	cbz	r2, 8004bfe <_printf_common+0x26>
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	6033      	str	r3, [r6, #0]
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	0699      	lsls	r1, r3, #26
 8004c02:	bf42      	ittt	mi
 8004c04:	6833      	ldrmi	r3, [r6, #0]
 8004c06:	3302      	addmi	r3, #2
 8004c08:	6033      	strmi	r3, [r6, #0]
 8004c0a:	6825      	ldr	r5, [r4, #0]
 8004c0c:	f015 0506 	ands.w	r5, r5, #6
 8004c10:	d106      	bne.n	8004c20 <_printf_common+0x48>
 8004c12:	f104 0a19 	add.w	sl, r4, #25
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	6832      	ldr	r2, [r6, #0]
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	42ab      	cmp	r3, r5
 8004c1e:	dc2b      	bgt.n	8004c78 <_printf_common+0xa0>
 8004c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c24:	1e13      	subs	r3, r2, #0
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	bf18      	it	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	0692      	lsls	r2, r2, #26
 8004c2e:	d430      	bmi.n	8004c92 <_printf_common+0xba>
 8004c30:	4649      	mov	r1, r9
 8004c32:	4638      	mov	r0, r7
 8004c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c38:	47c0      	blx	r8
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d023      	beq.n	8004c86 <_printf_common+0xae>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	6922      	ldr	r2, [r4, #16]
 8004c42:	f003 0306 	and.w	r3, r3, #6
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	bf14      	ite	ne
 8004c4a:	2500      	movne	r5, #0
 8004c4c:	6833      	ldreq	r3, [r6, #0]
 8004c4e:	f04f 0600 	mov.w	r6, #0
 8004c52:	bf08      	it	eq
 8004c54:	68e5      	ldreq	r5, [r4, #12]
 8004c56:	f104 041a 	add.w	r4, r4, #26
 8004c5a:	bf08      	it	eq
 8004c5c:	1aed      	subeq	r5, r5, r3
 8004c5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c62:	bf08      	it	eq
 8004c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	bfc4      	itt	gt
 8004c6c:	1a9b      	subgt	r3, r3, r2
 8004c6e:	18ed      	addgt	r5, r5, r3
 8004c70:	42b5      	cmp	r5, r6
 8004c72:	d11a      	bne.n	8004caa <_printf_common+0xd2>
 8004c74:	2000      	movs	r0, #0
 8004c76:	e008      	b.n	8004c8a <_printf_common+0xb2>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d103      	bne.n	8004c8e <_printf_common+0xb6>
 8004c86:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8e:	3501      	adds	r5, #1
 8004c90:	e7c1      	b.n	8004c16 <_printf_common+0x3e>
 8004c92:	2030      	movs	r0, #48	; 0x30
 8004c94:	18e1      	adds	r1, r4, r3
 8004c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ca0:	4422      	add	r2, r4
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ca8:	e7c2      	b.n	8004c30 <_printf_common+0x58>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4622      	mov	r2, r4
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	47c0      	blx	r8
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d0e6      	beq.n	8004c86 <_printf_common+0xae>
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7d9      	b.n	8004c70 <_printf_common+0x98>

08004cbc <_printf_i>:
 8004cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	7e0f      	ldrb	r7, [r1, #24]
 8004cc2:	4691      	mov	r9, r2
 8004cc4:	2f78      	cmp	r7, #120	; 0x78
 8004cc6:	4680      	mov	r8, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	469a      	mov	sl, r3
 8004ccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cd2:	d807      	bhi.n	8004ce4 <_printf_i+0x28>
 8004cd4:	2f62      	cmp	r7, #98	; 0x62
 8004cd6:	d80a      	bhi.n	8004cee <_printf_i+0x32>
 8004cd8:	2f00      	cmp	r7, #0
 8004cda:	f000 80d5 	beq.w	8004e88 <_printf_i+0x1cc>
 8004cde:	2f58      	cmp	r7, #88	; 0x58
 8004ce0:	f000 80c1 	beq.w	8004e66 <_printf_i+0x1aa>
 8004ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cec:	e03a      	b.n	8004d64 <_printf_i+0xa8>
 8004cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cf2:	2b15      	cmp	r3, #21
 8004cf4:	d8f6      	bhi.n	8004ce4 <_printf_i+0x28>
 8004cf6:	a101      	add	r1, pc, #4	; (adr r1, 8004cfc <_printf_i+0x40>)
 8004cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cfc:	08004d55 	.word	0x08004d55
 8004d00:	08004d69 	.word	0x08004d69
 8004d04:	08004ce5 	.word	0x08004ce5
 8004d08:	08004ce5 	.word	0x08004ce5
 8004d0c:	08004ce5 	.word	0x08004ce5
 8004d10:	08004ce5 	.word	0x08004ce5
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004ce5 	.word	0x08004ce5
 8004d1c:	08004ce5 	.word	0x08004ce5
 8004d20:	08004ce5 	.word	0x08004ce5
 8004d24:	08004ce5 	.word	0x08004ce5
 8004d28:	08004e6f 	.word	0x08004e6f
 8004d2c:	08004d95 	.word	0x08004d95
 8004d30:	08004e29 	.word	0x08004e29
 8004d34:	08004ce5 	.word	0x08004ce5
 8004d38:	08004ce5 	.word	0x08004ce5
 8004d3c:	08004e91 	.word	0x08004e91
 8004d40:	08004ce5 	.word	0x08004ce5
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004ce5 	.word	0x08004ce5
 8004d4c:	08004ce5 	.word	0x08004ce5
 8004d50:	08004e31 	.word	0x08004e31
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	1d1a      	adds	r2, r3, #4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	602a      	str	r2, [r5, #0]
 8004d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0a0      	b.n	8004eaa <_printf_i+0x1ee>
 8004d68:	6820      	ldr	r0, [r4, #0]
 8004d6a:	682b      	ldr	r3, [r5, #0]
 8004d6c:	0607      	lsls	r7, r0, #24
 8004d6e:	f103 0104 	add.w	r1, r3, #4
 8004d72:	6029      	str	r1, [r5, #0]
 8004d74:	d501      	bpl.n	8004d7a <_printf_i+0xbe>
 8004d76:	681e      	ldr	r6, [r3, #0]
 8004d78:	e003      	b.n	8004d82 <_printf_i+0xc6>
 8004d7a:	0646      	lsls	r6, r0, #25
 8004d7c:	d5fb      	bpl.n	8004d76 <_printf_i+0xba>
 8004d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	da03      	bge.n	8004d8e <_printf_i+0xd2>
 8004d86:	232d      	movs	r3, #45	; 0x2d
 8004d88:	4276      	negs	r6, r6
 8004d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d8e:	230a      	movs	r3, #10
 8004d90:	4859      	ldr	r0, [pc, #356]	; (8004ef8 <_printf_i+0x23c>)
 8004d92:	e012      	b.n	8004dba <_printf_i+0xfe>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	1d19      	adds	r1, r3, #4
 8004d9a:	6029      	str	r1, [r5, #0]
 8004d9c:	0605      	lsls	r5, r0, #24
 8004d9e:	d501      	bpl.n	8004da4 <_printf_i+0xe8>
 8004da0:	681e      	ldr	r6, [r3, #0]
 8004da2:	e002      	b.n	8004daa <_printf_i+0xee>
 8004da4:	0641      	lsls	r1, r0, #25
 8004da6:	d5fb      	bpl.n	8004da0 <_printf_i+0xe4>
 8004da8:	881e      	ldrh	r6, [r3, #0]
 8004daa:	2f6f      	cmp	r7, #111	; 0x6f
 8004dac:	bf0c      	ite	eq
 8004dae:	2308      	moveq	r3, #8
 8004db0:	230a      	movne	r3, #10
 8004db2:	4851      	ldr	r0, [pc, #324]	; (8004ef8 <_printf_i+0x23c>)
 8004db4:	2100      	movs	r1, #0
 8004db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dba:	6865      	ldr	r5, [r4, #4]
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	bfa8      	it	ge
 8004dc0:	6821      	ldrge	r1, [r4, #0]
 8004dc2:	60a5      	str	r5, [r4, #8]
 8004dc4:	bfa4      	itt	ge
 8004dc6:	f021 0104 	bicge.w	r1, r1, #4
 8004dca:	6021      	strge	r1, [r4, #0]
 8004dcc:	b90e      	cbnz	r6, 8004dd2 <_printf_i+0x116>
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	d04b      	beq.n	8004e6a <_printf_i+0x1ae>
 8004dd2:	4615      	mov	r5, r2
 8004dd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dd8:	fb03 6711 	mls	r7, r3, r1, r6
 8004ddc:	5dc7      	ldrb	r7, [r0, r7]
 8004dde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004de2:	4637      	mov	r7, r6
 8004de4:	42bb      	cmp	r3, r7
 8004de6:	460e      	mov	r6, r1
 8004de8:	d9f4      	bls.n	8004dd4 <_printf_i+0x118>
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d10b      	bne.n	8004e06 <_printf_i+0x14a>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	07de      	lsls	r6, r3, #31
 8004df2:	d508      	bpl.n	8004e06 <_printf_i+0x14a>
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	6861      	ldr	r1, [r4, #4]
 8004df8:	4299      	cmp	r1, r3
 8004dfa:	bfde      	ittt	le
 8004dfc:	2330      	movle	r3, #48	; 0x30
 8004dfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e06:	1b52      	subs	r2, r2, r5
 8004e08:	6122      	str	r2, [r4, #16]
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	4640      	mov	r0, r8
 8004e10:	f8cd a000 	str.w	sl, [sp]
 8004e14:	aa03      	add	r2, sp, #12
 8004e16:	f7ff fedf 	bl	8004bd8 <_printf_common>
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d14a      	bne.n	8004eb4 <_printf_i+0x1f8>
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e22:	b004      	add	sp, #16
 8004e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	f043 0320 	orr.w	r3, r3, #32
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	2778      	movs	r7, #120	; 0x78
 8004e32:	4832      	ldr	r0, [pc, #200]	; (8004efc <_printf_i+0x240>)
 8004e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	6829      	ldr	r1, [r5, #0]
 8004e3c:	061f      	lsls	r7, r3, #24
 8004e3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e42:	d402      	bmi.n	8004e4a <_printf_i+0x18e>
 8004e44:	065f      	lsls	r7, r3, #25
 8004e46:	bf48      	it	mi
 8004e48:	b2b6      	uxthmi	r6, r6
 8004e4a:	07df      	lsls	r7, r3, #31
 8004e4c:	bf48      	it	mi
 8004e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e52:	6029      	str	r1, [r5, #0]
 8004e54:	bf48      	it	mi
 8004e56:	6023      	strmi	r3, [r4, #0]
 8004e58:	b91e      	cbnz	r6, 8004e62 <_printf_i+0x1a6>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	f023 0320 	bic.w	r3, r3, #32
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	2310      	movs	r3, #16
 8004e64:	e7a6      	b.n	8004db4 <_printf_i+0xf8>
 8004e66:	4824      	ldr	r0, [pc, #144]	; (8004ef8 <_printf_i+0x23c>)
 8004e68:	e7e4      	b.n	8004e34 <_printf_i+0x178>
 8004e6a:	4615      	mov	r5, r2
 8004e6c:	e7bd      	b.n	8004dea <_printf_i+0x12e>
 8004e6e:	682b      	ldr	r3, [r5, #0]
 8004e70:	6826      	ldr	r6, [r4, #0]
 8004e72:	1d18      	adds	r0, r3, #4
 8004e74:	6961      	ldr	r1, [r4, #20]
 8004e76:	6028      	str	r0, [r5, #0]
 8004e78:	0635      	lsls	r5, r6, #24
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	d501      	bpl.n	8004e82 <_printf_i+0x1c6>
 8004e7e:	6019      	str	r1, [r3, #0]
 8004e80:	e002      	b.n	8004e88 <_printf_i+0x1cc>
 8004e82:	0670      	lsls	r0, r6, #25
 8004e84:	d5fb      	bpl.n	8004e7e <_printf_i+0x1c2>
 8004e86:	8019      	strh	r1, [r3, #0]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4615      	mov	r5, r2
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	e7bc      	b.n	8004e0a <_printf_i+0x14e>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	2100      	movs	r1, #0
 8004e94:	1d1a      	adds	r2, r3, #4
 8004e96:	602a      	str	r2, [r5, #0]
 8004e98:	681d      	ldr	r5, [r3, #0]
 8004e9a:	6862      	ldr	r2, [r4, #4]
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f9e8 	bl	8005272 <memchr>
 8004ea2:	b108      	cbz	r0, 8004ea8 <_printf_i+0x1ec>
 8004ea4:	1b40      	subs	r0, r0, r5
 8004ea6:	6060      	str	r0, [r4, #4]
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	6123      	str	r3, [r4, #16]
 8004eac:	2300      	movs	r3, #0
 8004eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb2:	e7aa      	b.n	8004e0a <_printf_i+0x14e>
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	4640      	mov	r0, r8
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	47d0      	blx	sl
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d0ad      	beq.n	8004e1e <_printf_i+0x162>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	079b      	lsls	r3, r3, #30
 8004ec6:	d413      	bmi.n	8004ef0 <_printf_i+0x234>
 8004ec8:	68e0      	ldr	r0, [r4, #12]
 8004eca:	9b03      	ldr	r3, [sp, #12]
 8004ecc:	4298      	cmp	r0, r3
 8004ece:	bfb8      	it	lt
 8004ed0:	4618      	movlt	r0, r3
 8004ed2:	e7a6      	b.n	8004e22 <_printf_i+0x166>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4632      	mov	r2, r6
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4640      	mov	r0, r8
 8004edc:	47d0      	blx	sl
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d09d      	beq.n	8004e1e <_printf_i+0x162>
 8004ee2:	3501      	adds	r5, #1
 8004ee4:	68e3      	ldr	r3, [r4, #12]
 8004ee6:	9903      	ldr	r1, [sp, #12]
 8004ee8:	1a5b      	subs	r3, r3, r1
 8004eea:	42ab      	cmp	r3, r5
 8004eec:	dcf2      	bgt.n	8004ed4 <_printf_i+0x218>
 8004eee:	e7eb      	b.n	8004ec8 <_printf_i+0x20c>
 8004ef0:	2500      	movs	r5, #0
 8004ef2:	f104 0619 	add.w	r6, r4, #25
 8004ef6:	e7f5      	b.n	8004ee4 <_printf_i+0x228>
 8004ef8:	080073ae 	.word	0x080073ae
 8004efc:	080073bf 	.word	0x080073bf

08004f00 <std>:
 8004f00:	2300      	movs	r3, #0
 8004f02:	b510      	push	{r4, lr}
 8004f04:	4604      	mov	r4, r0
 8004f06:	e9c0 3300 	strd	r3, r3, [r0]
 8004f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f0e:	6083      	str	r3, [r0, #8]
 8004f10:	8181      	strh	r1, [r0, #12]
 8004f12:	6643      	str	r3, [r0, #100]	; 0x64
 8004f14:	81c2      	strh	r2, [r0, #14]
 8004f16:	6183      	str	r3, [r0, #24]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	305c      	adds	r0, #92	; 0x5c
 8004f1e:	f000 f928 	bl	8005172 <memset>
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <std+0x58>)
 8004f24:	6224      	str	r4, [r4, #32]
 8004f26:	6263      	str	r3, [r4, #36]	; 0x24
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <std+0x5c>)
 8004f2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <std+0x60>)
 8004f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <std+0x64>)
 8004f32:	6323      	str	r3, [r4, #48]	; 0x30
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <std+0x68>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	d006      	beq.n	8004f48 <std+0x48>
 8004f3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f3e:	4294      	cmp	r4, r2
 8004f40:	d002      	beq.n	8004f48 <std+0x48>
 8004f42:	33d0      	adds	r3, #208	; 0xd0
 8004f44:	429c      	cmp	r4, r3
 8004f46:	d105      	bne.n	8004f54 <std+0x54>
 8004f48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f50:	f000 b98c 	b.w	800526c <__retarget_lock_init_recursive>
 8004f54:	bd10      	pop	{r4, pc}
 8004f56:	bf00      	nop
 8004f58:	080050ed 	.word	0x080050ed
 8004f5c:	0800510f 	.word	0x0800510f
 8004f60:	08005147 	.word	0x08005147
 8004f64:	0800516b 	.word	0x0800516b
 8004f68:	20000324 	.word	0x20000324

08004f6c <stdio_exit_handler>:
 8004f6c:	4a02      	ldr	r2, [pc, #8]	; (8004f78 <stdio_exit_handler+0xc>)
 8004f6e:	4903      	ldr	r1, [pc, #12]	; (8004f7c <stdio_exit_handler+0x10>)
 8004f70:	4803      	ldr	r0, [pc, #12]	; (8004f80 <stdio_exit_handler+0x14>)
 8004f72:	f000 b869 	b.w	8005048 <_fwalk_sglue>
 8004f76:	bf00      	nop
 8004f78:	2000001c 	.word	0x2000001c
 8004f7c:	08006c05 	.word	0x08006c05
 8004f80:	20000028 	.word	0x20000028

08004f84 <cleanup_stdio>:
 8004f84:	6841      	ldr	r1, [r0, #4]
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <cleanup_stdio+0x34>)
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	4299      	cmp	r1, r3
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	d001      	beq.n	8004f94 <cleanup_stdio+0x10>
 8004f90:	f001 fe38 	bl	8006c04 <_fflush_r>
 8004f94:	68a1      	ldr	r1, [r4, #8]
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <cleanup_stdio+0x38>)
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	d002      	beq.n	8004fa2 <cleanup_stdio+0x1e>
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f001 fe31 	bl	8006c04 <_fflush_r>
 8004fa2:	68e1      	ldr	r1, [r4, #12]
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <cleanup_stdio+0x3c>)
 8004fa6:	4299      	cmp	r1, r3
 8004fa8:	d004      	beq.n	8004fb4 <cleanup_stdio+0x30>
 8004faa:	4620      	mov	r0, r4
 8004fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb0:	f001 be28 	b.w	8006c04 <_fflush_r>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000324 	.word	0x20000324
 8004fbc:	2000038c 	.word	0x2000038c
 8004fc0:	200003f4 	.word	0x200003f4

08004fc4 <global_stdio_init.part.0>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <global_stdio_init.part.0+0x30>)
 8004fc8:	4c0b      	ldr	r4, [pc, #44]	; (8004ff8 <global_stdio_init.part.0+0x34>)
 8004fca:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <global_stdio_init.part.0+0x38>)
 8004fcc:	4620      	mov	r0, r4
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f7ff ff94 	bl	8004f00 <std>
 8004fd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004fdc:	2201      	movs	r2, #1
 8004fde:	2109      	movs	r1, #9
 8004fe0:	f7ff ff8e 	bl	8004f00 <std>
 8004fe4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004fe8:	2202      	movs	r2, #2
 8004fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fee:	2112      	movs	r1, #18
 8004ff0:	f7ff bf86 	b.w	8004f00 <std>
 8004ff4:	2000045c 	.word	0x2000045c
 8004ff8:	20000324 	.word	0x20000324
 8004ffc:	08004f6d 	.word	0x08004f6d

08005000 <__sfp_lock_acquire>:
 8005000:	4801      	ldr	r0, [pc, #4]	; (8005008 <__sfp_lock_acquire+0x8>)
 8005002:	f000 b934 	b.w	800526e <__retarget_lock_acquire_recursive>
 8005006:	bf00      	nop
 8005008:	20000465 	.word	0x20000465

0800500c <__sfp_lock_release>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__sfp_lock_release+0x8>)
 800500e:	f000 b92f 	b.w	8005270 <__retarget_lock_release_recursive>
 8005012:	bf00      	nop
 8005014:	20000465 	.word	0x20000465

08005018 <__sinit>:
 8005018:	b510      	push	{r4, lr}
 800501a:	4604      	mov	r4, r0
 800501c:	f7ff fff0 	bl	8005000 <__sfp_lock_acquire>
 8005020:	6a23      	ldr	r3, [r4, #32]
 8005022:	b11b      	cbz	r3, 800502c <__sinit+0x14>
 8005024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005028:	f7ff bff0 	b.w	800500c <__sfp_lock_release>
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <__sinit+0x28>)
 800502e:	6223      	str	r3, [r4, #32]
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <__sinit+0x2c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f5      	bne.n	8005024 <__sinit+0xc>
 8005038:	f7ff ffc4 	bl	8004fc4 <global_stdio_init.part.0>
 800503c:	e7f2      	b.n	8005024 <__sinit+0xc>
 800503e:	bf00      	nop
 8005040:	08004f85 	.word	0x08004f85
 8005044:	2000045c 	.word	0x2000045c

08005048 <_fwalk_sglue>:
 8005048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800504c:	4607      	mov	r7, r0
 800504e:	4688      	mov	r8, r1
 8005050:	4614      	mov	r4, r2
 8005052:	2600      	movs	r6, #0
 8005054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005058:	f1b9 0901 	subs.w	r9, r9, #1
 800505c:	d505      	bpl.n	800506a <_fwalk_sglue+0x22>
 800505e:	6824      	ldr	r4, [r4, #0]
 8005060:	2c00      	cmp	r4, #0
 8005062:	d1f7      	bne.n	8005054 <_fwalk_sglue+0xc>
 8005064:	4630      	mov	r0, r6
 8005066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d907      	bls.n	8005080 <_fwalk_sglue+0x38>
 8005070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005074:	3301      	adds	r3, #1
 8005076:	d003      	beq.n	8005080 <_fwalk_sglue+0x38>
 8005078:	4629      	mov	r1, r5
 800507a:	4638      	mov	r0, r7
 800507c:	47c0      	blx	r8
 800507e:	4306      	orrs	r6, r0
 8005080:	3568      	adds	r5, #104	; 0x68
 8005082:	e7e9      	b.n	8005058 <_fwalk_sglue+0x10>

08005084 <sniprintf>:
 8005084:	b40c      	push	{r2, r3}
 8005086:	b530      	push	{r4, r5, lr}
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <sniprintf+0x64>)
 800508a:	1e0c      	subs	r4, r1, #0
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	b09d      	sub	sp, #116	; 0x74
 8005090:	da08      	bge.n	80050a4 <sniprintf+0x20>
 8005092:	238b      	movs	r3, #139	; 0x8b
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	b01d      	add	sp, #116	; 0x74
 800509c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050a0:	b002      	add	sp, #8
 80050a2:	4770      	bx	lr
 80050a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80050a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050ac:	bf0c      	ite	eq
 80050ae:	4623      	moveq	r3, r4
 80050b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050bc:	9002      	str	r0, [sp, #8]
 80050be:	9006      	str	r0, [sp, #24]
 80050c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050c4:	4628      	mov	r0, r5
 80050c6:	ab21      	add	r3, sp, #132	; 0x84
 80050c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80050ca:	a902      	add	r1, sp, #8
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	f001 fc19 	bl	8006904 <_svfiprintf_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	bfbc      	itt	lt
 80050d6:	238b      	movlt	r3, #139	; 0x8b
 80050d8:	602b      	strlt	r3, [r5, #0]
 80050da:	2c00      	cmp	r4, #0
 80050dc:	d0dd      	beq.n	800509a <sniprintf+0x16>
 80050de:	2200      	movs	r2, #0
 80050e0:	9b02      	ldr	r3, [sp, #8]
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e7d9      	b.n	800509a <sniprintf+0x16>
 80050e6:	bf00      	nop
 80050e8:	20000074 	.word	0x20000074

080050ec <__sread>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	460c      	mov	r4, r1
 80050f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f4:	f000 f86c 	bl	80051d0 <_read_r>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	bfab      	itete	ge
 80050fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005100:	181b      	addge	r3, r3, r0
 8005102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005106:	bfac      	ite	ge
 8005108:	6563      	strge	r3, [r4, #84]	; 0x54
 800510a:	81a3      	strhlt	r3, [r4, #12]
 800510c:	bd10      	pop	{r4, pc}

0800510e <__swrite>:
 800510e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005112:	461f      	mov	r7, r3
 8005114:	898b      	ldrh	r3, [r1, #12]
 8005116:	4605      	mov	r5, r0
 8005118:	05db      	lsls	r3, r3, #23
 800511a:	460c      	mov	r4, r1
 800511c:	4616      	mov	r6, r2
 800511e:	d505      	bpl.n	800512c <__swrite+0x1e>
 8005120:	2302      	movs	r3, #2
 8005122:	2200      	movs	r2, #0
 8005124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005128:	f000 f840 	bl	80051ac <_lseek_r>
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	4632      	mov	r2, r6
 8005130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005134:	81a3      	strh	r3, [r4, #12]
 8005136:	4628      	mov	r0, r5
 8005138:	463b      	mov	r3, r7
 800513a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800513e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005142:	f000 b857 	b.w	80051f4 <_write_r>

08005146 <__sseek>:
 8005146:	b510      	push	{r4, lr}
 8005148:	460c      	mov	r4, r1
 800514a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514e:	f000 f82d 	bl	80051ac <_lseek_r>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	bf15      	itete	ne
 8005158:	6560      	strne	r0, [r4, #84]	; 0x54
 800515a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800515e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005162:	81a3      	strheq	r3, [r4, #12]
 8005164:	bf18      	it	ne
 8005166:	81a3      	strhne	r3, [r4, #12]
 8005168:	bd10      	pop	{r4, pc}

0800516a <__sclose>:
 800516a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516e:	f000 b80d 	b.w	800518c <_close_r>

08005172 <memset>:
 8005172:	4603      	mov	r3, r0
 8005174:	4402      	add	r2, r0
 8005176:	4293      	cmp	r3, r2
 8005178:	d100      	bne.n	800517c <memset+0xa>
 800517a:	4770      	bx	lr
 800517c:	f803 1b01 	strb.w	r1, [r3], #1
 8005180:	e7f9      	b.n	8005176 <memset+0x4>
	...

08005184 <_localeconv_r>:
 8005184:	4800      	ldr	r0, [pc, #0]	; (8005188 <_localeconv_r+0x4>)
 8005186:	4770      	bx	lr
 8005188:	20000168 	.word	0x20000168

0800518c <_close_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	2300      	movs	r3, #0
 8005190:	4d05      	ldr	r5, [pc, #20]	; (80051a8 <_close_r+0x1c>)
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	f7fc fb7f 	bl	800189a <_close>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_close_r+0x1a>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_close_r+0x1a>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000460 	.word	0x20000460

080051ac <_lseek_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4604      	mov	r4, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	2200      	movs	r2, #0
 80051b6:	4d05      	ldr	r5, [pc, #20]	; (80051cc <_lseek_r+0x20>)
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fc fb91 	bl	80018e2 <_lseek>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_lseek_r+0x1e>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_lseek_r+0x1e>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000460 	.word	0x20000460

080051d0 <_read_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4604      	mov	r4, r0
 80051d4:	4608      	mov	r0, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	2200      	movs	r2, #0
 80051da:	4d05      	ldr	r5, [pc, #20]	; (80051f0 <_read_r+0x20>)
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f7fc fb22 	bl	8001828 <_read>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_read_r+0x1e>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_read_r+0x1e>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	20000460 	.word	0x20000460

080051f4 <_write_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4604      	mov	r4, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	2200      	movs	r2, #0
 80051fe:	4d05      	ldr	r5, [pc, #20]	; (8005214 <_write_r+0x20>)
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fc fb2d 	bl	8001862 <_write>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_write_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_write_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000460 	.word	0x20000460

08005218 <__errno>:
 8005218:	4b01      	ldr	r3, [pc, #4]	; (8005220 <__errno+0x8>)
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000074 	.word	0x20000074

08005224 <__libc_init_array>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	2600      	movs	r6, #0
 8005228:	4d0c      	ldr	r5, [pc, #48]	; (800525c <__libc_init_array+0x38>)
 800522a:	4c0d      	ldr	r4, [pc, #52]	; (8005260 <__libc_init_array+0x3c>)
 800522c:	1b64      	subs	r4, r4, r5
 800522e:	10a4      	asrs	r4, r4, #2
 8005230:	42a6      	cmp	r6, r4
 8005232:	d109      	bne.n	8005248 <__libc_init_array+0x24>
 8005234:	f002 f886 	bl	8007344 <_init>
 8005238:	2600      	movs	r6, #0
 800523a:	4d0a      	ldr	r5, [pc, #40]	; (8005264 <__libc_init_array+0x40>)
 800523c:	4c0a      	ldr	r4, [pc, #40]	; (8005268 <__libc_init_array+0x44>)
 800523e:	1b64      	subs	r4, r4, r5
 8005240:	10a4      	asrs	r4, r4, #2
 8005242:	42a6      	cmp	r6, r4
 8005244:	d105      	bne.n	8005252 <__libc_init_array+0x2e>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	f855 3b04 	ldr.w	r3, [r5], #4
 800524c:	4798      	blx	r3
 800524e:	3601      	adds	r6, #1
 8005250:	e7ee      	b.n	8005230 <__libc_init_array+0xc>
 8005252:	f855 3b04 	ldr.w	r3, [r5], #4
 8005256:	4798      	blx	r3
 8005258:	3601      	adds	r6, #1
 800525a:	e7f2      	b.n	8005242 <__libc_init_array+0x1e>
 800525c:	0800770c 	.word	0x0800770c
 8005260:	0800770c 	.word	0x0800770c
 8005264:	0800770c 	.word	0x0800770c
 8005268:	08007710 	.word	0x08007710

0800526c <__retarget_lock_init_recursive>:
 800526c:	4770      	bx	lr

0800526e <__retarget_lock_acquire_recursive>:
 800526e:	4770      	bx	lr

08005270 <__retarget_lock_release_recursive>:
 8005270:	4770      	bx	lr

08005272 <memchr>:
 8005272:	4603      	mov	r3, r0
 8005274:	b510      	push	{r4, lr}
 8005276:	b2c9      	uxtb	r1, r1
 8005278:	4402      	add	r2, r0
 800527a:	4293      	cmp	r3, r2
 800527c:	4618      	mov	r0, r3
 800527e:	d101      	bne.n	8005284 <memchr+0x12>
 8005280:	2000      	movs	r0, #0
 8005282:	e003      	b.n	800528c <memchr+0x1a>
 8005284:	7804      	ldrb	r4, [r0, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	428c      	cmp	r4, r1
 800528a:	d1f6      	bne.n	800527a <memchr+0x8>
 800528c:	bd10      	pop	{r4, pc}

0800528e <quorem>:
 800528e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005292:	6903      	ldr	r3, [r0, #16]
 8005294:	690c      	ldr	r4, [r1, #16]
 8005296:	4607      	mov	r7, r0
 8005298:	42a3      	cmp	r3, r4
 800529a:	db7f      	blt.n	800539c <quorem+0x10e>
 800529c:	3c01      	subs	r4, #1
 800529e:	f100 0514 	add.w	r5, r0, #20
 80052a2:	f101 0814 	add.w	r8, r1, #20
 80052a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b4:	3301      	adds	r3, #1
 80052b6:	429a      	cmp	r2, r3
 80052b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052c4:	d331      	bcc.n	800532a <quorem+0x9c>
 80052c6:	f04f 0e00 	mov.w	lr, #0
 80052ca:	4640      	mov	r0, r8
 80052cc:	46ac      	mov	ip, r5
 80052ce:	46f2      	mov	sl, lr
 80052d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80052d4:	b293      	uxth	r3, r2
 80052d6:	fb06 e303 	mla	r3, r6, r3, lr
 80052da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052de:	0c1a      	lsrs	r2, r3, #16
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	fb06 220e 	mla	r2, r6, lr, r2
 80052e6:	ebaa 0303 	sub.w	r3, sl, r3
 80052ea:	f8dc a000 	ldr.w	sl, [ip]
 80052ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052f2:	fa1f fa8a 	uxth.w	sl, sl
 80052f6:	4453      	add	r3, sl
 80052f8:	f8dc a000 	ldr.w	sl, [ip]
 80052fc:	b292      	uxth	r2, r2
 80052fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005302:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005306:	b29b      	uxth	r3, r3
 8005308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800530c:	4581      	cmp	r9, r0
 800530e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005312:	f84c 3b04 	str.w	r3, [ip], #4
 8005316:	d2db      	bcs.n	80052d0 <quorem+0x42>
 8005318:	f855 300b 	ldr.w	r3, [r5, fp]
 800531c:	b92b      	cbnz	r3, 800532a <quorem+0x9c>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	3b04      	subs	r3, #4
 8005322:	429d      	cmp	r5, r3
 8005324:	461a      	mov	r2, r3
 8005326:	d32d      	bcc.n	8005384 <quorem+0xf6>
 8005328:	613c      	str	r4, [r7, #16]
 800532a:	4638      	mov	r0, r7
 800532c:	f001 f992 	bl	8006654 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	db23      	blt.n	800537c <quorem+0xee>
 8005334:	4629      	mov	r1, r5
 8005336:	2000      	movs	r0, #0
 8005338:	3601      	adds	r6, #1
 800533a:	f858 2b04 	ldr.w	r2, [r8], #4
 800533e:	f8d1 c000 	ldr.w	ip, [r1]
 8005342:	b293      	uxth	r3, r2
 8005344:	1ac3      	subs	r3, r0, r3
 8005346:	0c12      	lsrs	r2, r2, #16
 8005348:	fa1f f08c 	uxth.w	r0, ip
 800534c:	4403      	add	r3, r0
 800534e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005352:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800535c:	45c1      	cmp	r9, r8
 800535e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005362:	f841 3b04 	str.w	r3, [r1], #4
 8005366:	d2e8      	bcs.n	800533a <quorem+0xac>
 8005368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800536c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005370:	b922      	cbnz	r2, 800537c <quorem+0xee>
 8005372:	3b04      	subs	r3, #4
 8005374:	429d      	cmp	r5, r3
 8005376:	461a      	mov	r2, r3
 8005378:	d30a      	bcc.n	8005390 <quorem+0x102>
 800537a:	613c      	str	r4, [r7, #16]
 800537c:	4630      	mov	r0, r6
 800537e:	b003      	add	sp, #12
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	3b04      	subs	r3, #4
 8005388:	2a00      	cmp	r2, #0
 800538a:	d1cd      	bne.n	8005328 <quorem+0x9a>
 800538c:	3c01      	subs	r4, #1
 800538e:	e7c8      	b.n	8005322 <quorem+0x94>
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	3b04      	subs	r3, #4
 8005394:	2a00      	cmp	r2, #0
 8005396:	d1f0      	bne.n	800537a <quorem+0xec>
 8005398:	3c01      	subs	r4, #1
 800539a:	e7eb      	b.n	8005374 <quorem+0xe6>
 800539c:	2000      	movs	r0, #0
 800539e:	e7ee      	b.n	800537e <quorem+0xf0>

080053a0 <_dtoa_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	4616      	mov	r6, r2
 80053a6:	461f      	mov	r7, r3
 80053a8:	69c4      	ldr	r4, [r0, #28]
 80053aa:	b099      	sub	sp, #100	; 0x64
 80053ac:	4605      	mov	r5, r0
 80053ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80053b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80053b6:	b974      	cbnz	r4, 80053d6 <_dtoa_r+0x36>
 80053b8:	2010      	movs	r0, #16
 80053ba:	f000 fe1d 	bl	8005ff8 <malloc>
 80053be:	4602      	mov	r2, r0
 80053c0:	61e8      	str	r0, [r5, #28]
 80053c2:	b920      	cbnz	r0, 80053ce <_dtoa_r+0x2e>
 80053c4:	21ef      	movs	r1, #239	; 0xef
 80053c6:	4bac      	ldr	r3, [pc, #688]	; (8005678 <_dtoa_r+0x2d8>)
 80053c8:	48ac      	ldr	r0, [pc, #688]	; (800567c <_dtoa_r+0x2dc>)
 80053ca:	f001 fc7b 	bl	8006cc4 <__assert_func>
 80053ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053d2:	6004      	str	r4, [r0, #0]
 80053d4:	60c4      	str	r4, [r0, #12]
 80053d6:	69eb      	ldr	r3, [r5, #28]
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	b151      	cbz	r1, 80053f2 <_dtoa_r+0x52>
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	2301      	movs	r3, #1
 80053e0:	4093      	lsls	r3, r2
 80053e2:	604a      	str	r2, [r1, #4]
 80053e4:	608b      	str	r3, [r1, #8]
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fefa 	bl	80061e0 <_Bfree>
 80053ec:	2200      	movs	r2, #0
 80053ee:	69eb      	ldr	r3, [r5, #28]
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	1e3b      	subs	r3, r7, #0
 80053f4:	bfaf      	iteee	ge
 80053f6:	2300      	movge	r3, #0
 80053f8:	2201      	movlt	r2, #1
 80053fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053fe:	9305      	strlt	r3, [sp, #20]
 8005400:	bfa8      	it	ge
 8005402:	f8c8 3000 	strge.w	r3, [r8]
 8005406:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800540a:	4b9d      	ldr	r3, [pc, #628]	; (8005680 <_dtoa_r+0x2e0>)
 800540c:	bfb8      	it	lt
 800540e:	f8c8 2000 	strlt.w	r2, [r8]
 8005412:	ea33 0309 	bics.w	r3, r3, r9
 8005416:	d119      	bne.n	800544c <_dtoa_r+0xac>
 8005418:	f242 730f 	movw	r3, #9999	; 0x270f
 800541c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005424:	4333      	orrs	r3, r6
 8005426:	f000 8589 	beq.w	8005f3c <_dtoa_r+0xb9c>
 800542a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800542c:	b953      	cbnz	r3, 8005444 <_dtoa_r+0xa4>
 800542e:	4b95      	ldr	r3, [pc, #596]	; (8005684 <_dtoa_r+0x2e4>)
 8005430:	e023      	b.n	800547a <_dtoa_r+0xda>
 8005432:	4b95      	ldr	r3, [pc, #596]	; (8005688 <_dtoa_r+0x2e8>)
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	3308      	adds	r3, #8
 8005438:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	9803      	ldr	r0, [sp, #12]
 800543e:	b019      	add	sp, #100	; 0x64
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	4b8f      	ldr	r3, [pc, #572]	; (8005684 <_dtoa_r+0x2e4>)
 8005446:	9303      	str	r3, [sp, #12]
 8005448:	3303      	adds	r3, #3
 800544a:	e7f5      	b.n	8005438 <_dtoa_r+0x98>
 800544c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005450:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	f7fb faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8005460:	4680      	mov	r8, r0
 8005462:	b160      	cbz	r0, 800547e <_dtoa_r+0xde>
 8005464:	2301      	movs	r3, #1
 8005466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8562 	beq.w	8005f36 <_dtoa_r+0xb96>
 8005472:	4b86      	ldr	r3, [pc, #536]	; (800568c <_dtoa_r+0x2ec>)
 8005474:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	3b01      	subs	r3, #1
 800547a:	9303      	str	r3, [sp, #12]
 800547c:	e7de      	b.n	800543c <_dtoa_r+0x9c>
 800547e:	ab16      	add	r3, sp, #88	; 0x58
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	ab17      	add	r3, sp, #92	; 0x5c
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	4628      	mov	r0, r5
 8005488:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800548c:	f001 f98a 	bl	80067a4 <__d2b>
 8005490:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005494:	4682      	mov	sl, r0
 8005496:	2c00      	cmp	r4, #0
 8005498:	d07e      	beq.n	8005598 <_dtoa_r+0x1f8>
 800549a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800549e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80054a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80054ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80054b4:	4619      	mov	r1, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	4b75      	ldr	r3, [pc, #468]	; (8005690 <_dtoa_r+0x2f0>)
 80054ba:	f7fa fe55 	bl	8000168 <__aeabi_dsub>
 80054be:	a368      	add	r3, pc, #416	; (adr r3, 8005660 <_dtoa_r+0x2c0>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fb f808 	bl	80004d8 <__aeabi_dmul>
 80054c8:	a367      	add	r3, pc, #412	; (adr r3, 8005668 <_dtoa_r+0x2c8>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fa fe4d 	bl	800016c <__adddf3>
 80054d2:	4606      	mov	r6, r0
 80054d4:	4620      	mov	r0, r4
 80054d6:	460f      	mov	r7, r1
 80054d8:	f7fa ff94 	bl	8000404 <__aeabi_i2d>
 80054dc:	a364      	add	r3, pc, #400	; (adr r3, 8005670 <_dtoa_r+0x2d0>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fa fff9 	bl	80004d8 <__aeabi_dmul>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4630      	mov	r0, r6
 80054ec:	4639      	mov	r1, r7
 80054ee:	f7fa fe3d 	bl	800016c <__adddf3>
 80054f2:	4606      	mov	r6, r0
 80054f4:	460f      	mov	r7, r1
 80054f6:	f7fb fa9f 	bl	8000a38 <__aeabi_d2iz>
 80054fa:	2200      	movs	r2, #0
 80054fc:	4683      	mov	fp, r0
 80054fe:	2300      	movs	r3, #0
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb fa5a 	bl	80009bc <__aeabi_dcmplt>
 8005508:	b148      	cbz	r0, 800551e <_dtoa_r+0x17e>
 800550a:	4658      	mov	r0, fp
 800550c:	f7fa ff7a 	bl	8000404 <__aeabi_i2d>
 8005510:	4632      	mov	r2, r6
 8005512:	463b      	mov	r3, r7
 8005514:	f7fb fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8005518:	b908      	cbnz	r0, 800551e <_dtoa_r+0x17e>
 800551a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800551e:	f1bb 0f16 	cmp.w	fp, #22
 8005522:	d857      	bhi.n	80055d4 <_dtoa_r+0x234>
 8005524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005528:	4b5a      	ldr	r3, [pc, #360]	; (8005694 <_dtoa_r+0x2f4>)
 800552a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fb fa43 	bl	80009bc <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	d04e      	beq.n	80055d8 <_dtoa_r+0x238>
 800553a:	2300      	movs	r3, #0
 800553c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005540:	930f      	str	r3, [sp, #60]	; 0x3c
 8005542:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005544:	1b1b      	subs	r3, r3, r4
 8005546:	1e5a      	subs	r2, r3, #1
 8005548:	bf46      	itte	mi
 800554a:	f1c3 0901 	rsbmi	r9, r3, #1
 800554e:	2300      	movmi	r3, #0
 8005550:	f04f 0900 	movpl.w	r9, #0
 8005554:	9209      	str	r2, [sp, #36]	; 0x24
 8005556:	bf48      	it	mi
 8005558:	9309      	strmi	r3, [sp, #36]	; 0x24
 800555a:	f1bb 0f00 	cmp.w	fp, #0
 800555e:	db3d      	blt.n	80055dc <_dtoa_r+0x23c>
 8005560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005562:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005566:	445b      	add	r3, fp
 8005568:	9309      	str	r3, [sp, #36]	; 0x24
 800556a:	2300      	movs	r3, #0
 800556c:	930a      	str	r3, [sp, #40]	; 0x28
 800556e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005570:	2b09      	cmp	r3, #9
 8005572:	d867      	bhi.n	8005644 <_dtoa_r+0x2a4>
 8005574:	2b05      	cmp	r3, #5
 8005576:	bfc4      	itt	gt
 8005578:	3b04      	subgt	r3, #4
 800557a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800557c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800557e:	bfc8      	it	gt
 8005580:	2400      	movgt	r4, #0
 8005582:	f1a3 0302 	sub.w	r3, r3, #2
 8005586:	bfd8      	it	le
 8005588:	2401      	movle	r4, #1
 800558a:	2b03      	cmp	r3, #3
 800558c:	f200 8086 	bhi.w	800569c <_dtoa_r+0x2fc>
 8005590:	e8df f003 	tbb	[pc, r3]
 8005594:	5637392c 	.word	0x5637392c
 8005598:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800559c:	441c      	add	r4, r3
 800559e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	bfc1      	itttt	gt
 80055a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80055ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80055b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80055b6:	bfd6      	itet	le
 80055b8:	f1c3 0320 	rsble	r3, r3, #32
 80055bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80055c0:	fa06 f003 	lslle.w	r0, r6, r3
 80055c4:	f7fa ff0e 	bl	80003e4 <__aeabi_ui2d>
 80055c8:	2201      	movs	r2, #1
 80055ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80055ce:	3c01      	subs	r4, #1
 80055d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80055d2:	e76f      	b.n	80054b4 <_dtoa_r+0x114>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e7b3      	b.n	8005540 <_dtoa_r+0x1a0>
 80055d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80055da:	e7b2      	b.n	8005542 <_dtoa_r+0x1a2>
 80055dc:	f1cb 0300 	rsb	r3, fp, #0
 80055e0:	930a      	str	r3, [sp, #40]	; 0x28
 80055e2:	2300      	movs	r3, #0
 80055e4:	eba9 090b 	sub.w	r9, r9, fp
 80055e8:	930e      	str	r3, [sp, #56]	; 0x38
 80055ea:	e7c0      	b.n	800556e <_dtoa_r+0x1ce>
 80055ec:	2300      	movs	r3, #0
 80055ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	dc55      	bgt.n	80056a2 <_dtoa_r+0x302>
 80055f6:	2301      	movs	r3, #1
 80055f8:	461a      	mov	r2, r3
 80055fa:	9306      	str	r3, [sp, #24]
 80055fc:	9308      	str	r3, [sp, #32]
 80055fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8005600:	e00b      	b.n	800561a <_dtoa_r+0x27a>
 8005602:	2301      	movs	r3, #1
 8005604:	e7f3      	b.n	80055ee <_dtoa_r+0x24e>
 8005606:	2300      	movs	r3, #0
 8005608:	930b      	str	r3, [sp, #44]	; 0x2c
 800560a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800560c:	445b      	add	r3, fp
 800560e:	9306      	str	r3, [sp, #24]
 8005610:	3301      	adds	r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	9308      	str	r3, [sp, #32]
 8005616:	bfb8      	it	lt
 8005618:	2301      	movlt	r3, #1
 800561a:	2100      	movs	r1, #0
 800561c:	2204      	movs	r2, #4
 800561e:	69e8      	ldr	r0, [r5, #28]
 8005620:	f102 0614 	add.w	r6, r2, #20
 8005624:	429e      	cmp	r6, r3
 8005626:	d940      	bls.n	80056aa <_dtoa_r+0x30a>
 8005628:	6041      	str	r1, [r0, #4]
 800562a:	4628      	mov	r0, r5
 800562c:	f000 fd98 	bl	8006160 <_Balloc>
 8005630:	9003      	str	r0, [sp, #12]
 8005632:	2800      	cmp	r0, #0
 8005634:	d13c      	bne.n	80056b0 <_dtoa_r+0x310>
 8005636:	4602      	mov	r2, r0
 8005638:	f240 11af 	movw	r1, #431	; 0x1af
 800563c:	4b16      	ldr	r3, [pc, #88]	; (8005698 <_dtoa_r+0x2f8>)
 800563e:	e6c3      	b.n	80053c8 <_dtoa_r+0x28>
 8005640:	2301      	movs	r3, #1
 8005642:	e7e1      	b.n	8005608 <_dtoa_r+0x268>
 8005644:	2401      	movs	r4, #1
 8005646:	2300      	movs	r3, #0
 8005648:	940b      	str	r4, [sp, #44]	; 0x2c
 800564a:	9322      	str	r3, [sp, #136]	; 0x88
 800564c:	f04f 33ff 	mov.w	r3, #4294967295
 8005650:	2200      	movs	r2, #0
 8005652:	9306      	str	r3, [sp, #24]
 8005654:	9308      	str	r3, [sp, #32]
 8005656:	2312      	movs	r3, #18
 8005658:	e7d1      	b.n	80055fe <_dtoa_r+0x25e>
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w
 8005660:	636f4361 	.word	0x636f4361
 8005664:	3fd287a7 	.word	0x3fd287a7
 8005668:	8b60c8b3 	.word	0x8b60c8b3
 800566c:	3fc68a28 	.word	0x3fc68a28
 8005670:	509f79fb 	.word	0x509f79fb
 8005674:	3fd34413 	.word	0x3fd34413
 8005678:	080073dd 	.word	0x080073dd
 800567c:	080073f4 	.word	0x080073f4
 8005680:	7ff00000 	.word	0x7ff00000
 8005684:	080073d9 	.word	0x080073d9
 8005688:	080073d0 	.word	0x080073d0
 800568c:	080073ad 	.word	0x080073ad
 8005690:	3ff80000 	.word	0x3ff80000
 8005694:	080074e0 	.word	0x080074e0
 8005698:	0800744c 	.word	0x0800744c
 800569c:	2301      	movs	r3, #1
 800569e:	930b      	str	r3, [sp, #44]	; 0x2c
 80056a0:	e7d4      	b.n	800564c <_dtoa_r+0x2ac>
 80056a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056a4:	9306      	str	r3, [sp, #24]
 80056a6:	9308      	str	r3, [sp, #32]
 80056a8:	e7b7      	b.n	800561a <_dtoa_r+0x27a>
 80056aa:	3101      	adds	r1, #1
 80056ac:	0052      	lsls	r2, r2, #1
 80056ae:	e7b7      	b.n	8005620 <_dtoa_r+0x280>
 80056b0:	69eb      	ldr	r3, [r5, #28]
 80056b2:	9a03      	ldr	r2, [sp, #12]
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	9b08      	ldr	r3, [sp, #32]
 80056b8:	2b0e      	cmp	r3, #14
 80056ba:	f200 80a8 	bhi.w	800580e <_dtoa_r+0x46e>
 80056be:	2c00      	cmp	r4, #0
 80056c0:	f000 80a5 	beq.w	800580e <_dtoa_r+0x46e>
 80056c4:	f1bb 0f00 	cmp.w	fp, #0
 80056c8:	dd34      	ble.n	8005734 <_dtoa_r+0x394>
 80056ca:	4b9a      	ldr	r3, [pc, #616]	; (8005934 <_dtoa_r+0x594>)
 80056cc:	f00b 020f 	and.w	r2, fp, #15
 80056d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80056d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80056e4:	d016      	beq.n	8005714 <_dtoa_r+0x374>
 80056e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ea:	4b93      	ldr	r3, [pc, #588]	; (8005938 <_dtoa_r+0x598>)
 80056ec:	2703      	movs	r7, #3
 80056ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f2:	f7fb f81b 	bl	800072c <__aeabi_ddiv>
 80056f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056fa:	f004 040f 	and.w	r4, r4, #15
 80056fe:	4e8e      	ldr	r6, [pc, #568]	; (8005938 <_dtoa_r+0x598>)
 8005700:	b954      	cbnz	r4, 8005718 <_dtoa_r+0x378>
 8005702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800570a:	f7fb f80f 	bl	800072c <__aeabi_ddiv>
 800570e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005712:	e029      	b.n	8005768 <_dtoa_r+0x3c8>
 8005714:	2702      	movs	r7, #2
 8005716:	e7f2      	b.n	80056fe <_dtoa_r+0x35e>
 8005718:	07e1      	lsls	r1, r4, #31
 800571a:	d508      	bpl.n	800572e <_dtoa_r+0x38e>
 800571c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005720:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005724:	f7fa fed8 	bl	80004d8 <__aeabi_dmul>
 8005728:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800572c:	3701      	adds	r7, #1
 800572e:	1064      	asrs	r4, r4, #1
 8005730:	3608      	adds	r6, #8
 8005732:	e7e5      	b.n	8005700 <_dtoa_r+0x360>
 8005734:	f000 80a5 	beq.w	8005882 <_dtoa_r+0x4e2>
 8005738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800573c:	f1cb 0400 	rsb	r4, fp, #0
 8005740:	4b7c      	ldr	r3, [pc, #496]	; (8005934 <_dtoa_r+0x594>)
 8005742:	f004 020f 	and.w	r2, r4, #15
 8005746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fa fec3 	bl	80004d8 <__aeabi_dmul>
 8005752:	2702      	movs	r7, #2
 8005754:	2300      	movs	r3, #0
 8005756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800575a:	4e77      	ldr	r6, [pc, #476]	; (8005938 <_dtoa_r+0x598>)
 800575c:	1124      	asrs	r4, r4, #4
 800575e:	2c00      	cmp	r4, #0
 8005760:	f040 8084 	bne.w	800586c <_dtoa_r+0x4cc>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1d2      	bne.n	800570e <_dtoa_r+0x36e>
 8005768:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800576c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 8087 	beq.w	8005886 <_dtoa_r+0x4e6>
 8005778:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800577c:	2200      	movs	r2, #0
 800577e:	4b6f      	ldr	r3, [pc, #444]	; (800593c <_dtoa_r+0x59c>)
 8005780:	f7fb f91c 	bl	80009bc <__aeabi_dcmplt>
 8005784:	2800      	cmp	r0, #0
 8005786:	d07e      	beq.n	8005886 <_dtoa_r+0x4e6>
 8005788:	9b08      	ldr	r3, [sp, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d07b      	beq.n	8005886 <_dtoa_r+0x4e6>
 800578e:	9b06      	ldr	r3, [sp, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	dd38      	ble.n	8005806 <_dtoa_r+0x466>
 8005794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005798:	2200      	movs	r2, #0
 800579a:	4b69      	ldr	r3, [pc, #420]	; (8005940 <_dtoa_r+0x5a0>)
 800579c:	f7fa fe9c 	bl	80004d8 <__aeabi_dmul>
 80057a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057a4:	9c06      	ldr	r4, [sp, #24]
 80057a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80057aa:	3701      	adds	r7, #1
 80057ac:	4638      	mov	r0, r7
 80057ae:	f7fa fe29 	bl	8000404 <__aeabi_i2d>
 80057b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b6:	f7fa fe8f 	bl	80004d8 <__aeabi_dmul>
 80057ba:	2200      	movs	r2, #0
 80057bc:	4b61      	ldr	r3, [pc, #388]	; (8005944 <_dtoa_r+0x5a4>)
 80057be:	f7fa fcd5 	bl	800016c <__adddf3>
 80057c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057ca:	9611      	str	r6, [sp, #68]	; 0x44
 80057cc:	2c00      	cmp	r4, #0
 80057ce:	d15d      	bne.n	800588c <_dtoa_r+0x4ec>
 80057d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d4:	2200      	movs	r2, #0
 80057d6:	4b5c      	ldr	r3, [pc, #368]	; (8005948 <_dtoa_r+0x5a8>)
 80057d8:	f7fa fcc6 	bl	8000168 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057e4:	4633      	mov	r3, r6
 80057e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057e8:	f7fb f906 	bl	80009f8 <__aeabi_dcmpgt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 8295 	bne.w	8005d1c <_dtoa_r+0x97c>
 80057f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057fc:	f7fb f8de 	bl	80009bc <__aeabi_dcmplt>
 8005800:	2800      	cmp	r0, #0
 8005802:	f040 8289 	bne.w	8005d18 <_dtoa_r+0x978>
 8005806:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800580a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800580e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005810:	2b00      	cmp	r3, #0
 8005812:	f2c0 8151 	blt.w	8005ab8 <_dtoa_r+0x718>
 8005816:	f1bb 0f0e 	cmp.w	fp, #14
 800581a:	f300 814d 	bgt.w	8005ab8 <_dtoa_r+0x718>
 800581e:	4b45      	ldr	r3, [pc, #276]	; (8005934 <_dtoa_r+0x594>)
 8005820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005824:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005828:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800582c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800582e:	2b00      	cmp	r3, #0
 8005830:	f280 80da 	bge.w	80059e8 <_dtoa_r+0x648>
 8005834:	9b08      	ldr	r3, [sp, #32]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f300 80d6 	bgt.w	80059e8 <_dtoa_r+0x648>
 800583c:	f040 826b 	bne.w	8005d16 <_dtoa_r+0x976>
 8005840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005844:	2200      	movs	r2, #0
 8005846:	4b40      	ldr	r3, [pc, #256]	; (8005948 <_dtoa_r+0x5a8>)
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005850:	f7fb f8c8 	bl	80009e4 <__aeabi_dcmpge>
 8005854:	9c08      	ldr	r4, [sp, #32]
 8005856:	4626      	mov	r6, r4
 8005858:	2800      	cmp	r0, #0
 800585a:	f040 8241 	bne.w	8005ce0 <_dtoa_r+0x940>
 800585e:	2331      	movs	r3, #49	; 0x31
 8005860:	9f03      	ldr	r7, [sp, #12]
 8005862:	f10b 0b01 	add.w	fp, fp, #1
 8005866:	f807 3b01 	strb.w	r3, [r7], #1
 800586a:	e23d      	b.n	8005ce8 <_dtoa_r+0x948>
 800586c:	07e2      	lsls	r2, r4, #31
 800586e:	d505      	bpl.n	800587c <_dtoa_r+0x4dc>
 8005870:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005874:	f7fa fe30 	bl	80004d8 <__aeabi_dmul>
 8005878:	2301      	movs	r3, #1
 800587a:	3701      	adds	r7, #1
 800587c:	1064      	asrs	r4, r4, #1
 800587e:	3608      	adds	r6, #8
 8005880:	e76d      	b.n	800575e <_dtoa_r+0x3be>
 8005882:	2702      	movs	r7, #2
 8005884:	e770      	b.n	8005768 <_dtoa_r+0x3c8>
 8005886:	46d8      	mov	r8, fp
 8005888:	9c08      	ldr	r4, [sp, #32]
 800588a:	e78f      	b.n	80057ac <_dtoa_r+0x40c>
 800588c:	9903      	ldr	r1, [sp, #12]
 800588e:	4b29      	ldr	r3, [pc, #164]	; (8005934 <_dtoa_r+0x594>)
 8005890:	4421      	add	r1, r4
 8005892:	9112      	str	r1, [sp, #72]	; 0x48
 8005894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005896:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800589a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800589e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d054      	beq.n	8005950 <_dtoa_r+0x5b0>
 80058a6:	2000      	movs	r0, #0
 80058a8:	4928      	ldr	r1, [pc, #160]	; (800594c <_dtoa_r+0x5ac>)
 80058aa:	f7fa ff3f 	bl	800072c <__aeabi_ddiv>
 80058ae:	463b      	mov	r3, r7
 80058b0:	4632      	mov	r2, r6
 80058b2:	f7fa fc59 	bl	8000168 <__aeabi_dsub>
 80058b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058ba:	9f03      	ldr	r7, [sp, #12]
 80058bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c0:	f7fb f8ba 	bl	8000a38 <__aeabi_d2iz>
 80058c4:	4604      	mov	r4, r0
 80058c6:	f7fa fd9d 	bl	8000404 <__aeabi_i2d>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d2:	f7fa fc49 	bl	8000168 <__aeabi_dsub>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	3430      	adds	r4, #48	; 0x30
 80058dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058e4:	f807 4b01 	strb.w	r4, [r7], #1
 80058e8:	f7fb f868 	bl	80009bc <__aeabi_dcmplt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d173      	bne.n	80059d8 <_dtoa_r+0x638>
 80058f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058f4:	2000      	movs	r0, #0
 80058f6:	4911      	ldr	r1, [pc, #68]	; (800593c <_dtoa_r+0x59c>)
 80058f8:	f7fa fc36 	bl	8000168 <__aeabi_dsub>
 80058fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005900:	f7fb f85c 	bl	80009bc <__aeabi_dcmplt>
 8005904:	2800      	cmp	r0, #0
 8005906:	f040 80b6 	bne.w	8005a76 <_dtoa_r+0x6d6>
 800590a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800590c:	429f      	cmp	r7, r3
 800590e:	f43f af7a 	beq.w	8005806 <_dtoa_r+0x466>
 8005912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005916:	2200      	movs	r2, #0
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <_dtoa_r+0x5a0>)
 800591a:	f7fa fddd 	bl	80004d8 <__aeabi_dmul>
 800591e:	2200      	movs	r2, #0
 8005920:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <_dtoa_r+0x5a0>)
 800592a:	f7fa fdd5 	bl	80004d8 <__aeabi_dmul>
 800592e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005932:	e7c3      	b.n	80058bc <_dtoa_r+0x51c>
 8005934:	080074e0 	.word	0x080074e0
 8005938:	080074b8 	.word	0x080074b8
 800593c:	3ff00000 	.word	0x3ff00000
 8005940:	40240000 	.word	0x40240000
 8005944:	401c0000 	.word	0x401c0000
 8005948:	40140000 	.word	0x40140000
 800594c:	3fe00000 	.word	0x3fe00000
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fa fdc0 	bl	80004d8 <__aeabi_dmul>
 8005958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800595a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800595e:	9c03      	ldr	r4, [sp, #12]
 8005960:	9314      	str	r3, [sp, #80]	; 0x50
 8005962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005966:	f7fb f867 	bl	8000a38 <__aeabi_d2iz>
 800596a:	9015      	str	r0, [sp, #84]	; 0x54
 800596c:	f7fa fd4a 	bl	8000404 <__aeabi_i2d>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005978:	f7fa fbf6 	bl	8000168 <__aeabi_dsub>
 800597c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800597e:	4606      	mov	r6, r0
 8005980:	3330      	adds	r3, #48	; 0x30
 8005982:	f804 3b01 	strb.w	r3, [r4], #1
 8005986:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005988:	460f      	mov	r7, r1
 800598a:	429c      	cmp	r4, r3
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	d124      	bne.n	80059dc <_dtoa_r+0x63c>
 8005992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005996:	4baf      	ldr	r3, [pc, #700]	; (8005c54 <_dtoa_r+0x8b4>)
 8005998:	f7fa fbe8 	bl	800016c <__adddf3>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fb f828 	bl	80009f8 <__aeabi_dcmpgt>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d163      	bne.n	8005a74 <_dtoa_r+0x6d4>
 80059ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059b0:	2000      	movs	r0, #0
 80059b2:	49a8      	ldr	r1, [pc, #672]	; (8005c54 <_dtoa_r+0x8b4>)
 80059b4:	f7fa fbd8 	bl	8000168 <__aeabi_dsub>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4630      	mov	r0, r6
 80059be:	4639      	mov	r1, r7
 80059c0:	f7fa fffc 	bl	80009bc <__aeabi_dcmplt>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f43f af1e 	beq.w	8005806 <_dtoa_r+0x466>
 80059ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80059cc:	1e7b      	subs	r3, r7, #1
 80059ce:	9314      	str	r3, [sp, #80]	; 0x50
 80059d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80059d4:	2b30      	cmp	r3, #48	; 0x30
 80059d6:	d0f8      	beq.n	80059ca <_dtoa_r+0x62a>
 80059d8:	46c3      	mov	fp, r8
 80059da:	e03b      	b.n	8005a54 <_dtoa_r+0x6b4>
 80059dc:	4b9e      	ldr	r3, [pc, #632]	; (8005c58 <_dtoa_r+0x8b8>)
 80059de:	f7fa fd7b 	bl	80004d8 <__aeabi_dmul>
 80059e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e6:	e7bc      	b.n	8005962 <_dtoa_r+0x5c2>
 80059e8:	9f03      	ldr	r7, [sp, #12]
 80059ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80059ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fa fe99 	bl	800072c <__aeabi_ddiv>
 80059fa:	f7fb f81d 	bl	8000a38 <__aeabi_d2iz>
 80059fe:	4604      	mov	r4, r0
 8005a00:	f7fa fd00 	bl	8000404 <__aeabi_i2d>
 8005a04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a08:	f7fa fd66 	bl	80004d8 <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4640      	mov	r0, r8
 8005a12:	4649      	mov	r1, r9
 8005a14:	f7fa fba8 	bl	8000168 <__aeabi_dsub>
 8005a18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005a1c:	f807 6b01 	strb.w	r6, [r7], #1
 8005a20:	9e03      	ldr	r6, [sp, #12]
 8005a22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005a26:	1bbe      	subs	r6, r7, r6
 8005a28:	45b4      	cmp	ip, r6
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	d136      	bne.n	8005a9e <_dtoa_r+0x6fe>
 8005a30:	f7fa fb9c 	bl	800016c <__adddf3>
 8005a34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4689      	mov	r9, r1
 8005a3c:	f7fa ffdc 	bl	80009f8 <__aeabi_dcmpgt>
 8005a40:	bb58      	cbnz	r0, 8005a9a <_dtoa_r+0x6fa>
 8005a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a46:	4640      	mov	r0, r8
 8005a48:	4649      	mov	r1, r9
 8005a4a:	f7fa ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8005a4e:	b108      	cbz	r0, 8005a54 <_dtoa_r+0x6b4>
 8005a50:	07e3      	lsls	r3, r4, #31
 8005a52:	d422      	bmi.n	8005a9a <_dtoa_r+0x6fa>
 8005a54:	4651      	mov	r1, sl
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fbc2 	bl	80061e0 <_Bfree>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a60:	703b      	strb	r3, [r7, #0]
 8005a62:	f10b 0301 	add.w	r3, fp, #1
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f43f ace6 	beq.w	800543c <_dtoa_r+0x9c>
 8005a70:	601f      	str	r7, [r3, #0]
 8005a72:	e4e3      	b.n	800543c <_dtoa_r+0x9c>
 8005a74:	4627      	mov	r7, r4
 8005a76:	463b      	mov	r3, r7
 8005a78:	461f      	mov	r7, r3
 8005a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a7e:	2a39      	cmp	r2, #57	; 0x39
 8005a80:	d107      	bne.n	8005a92 <_dtoa_r+0x6f2>
 8005a82:	9a03      	ldr	r2, [sp, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d1f7      	bne.n	8005a78 <_dtoa_r+0x6d8>
 8005a88:	2230      	movs	r2, #48	; 0x30
 8005a8a:	9903      	ldr	r1, [sp, #12]
 8005a8c:	f108 0801 	add.w	r8, r8, #1
 8005a90:	700a      	strb	r2, [r1, #0]
 8005a92:	781a      	ldrb	r2, [r3, #0]
 8005a94:	3201      	adds	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e79e      	b.n	80059d8 <_dtoa_r+0x638>
 8005a9a:	46d8      	mov	r8, fp
 8005a9c:	e7eb      	b.n	8005a76 <_dtoa_r+0x6d6>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <_dtoa_r+0x8b8>)
 8005aa2:	f7fa fd19 	bl	80004d8 <__aeabi_dmul>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4680      	mov	r8, r0
 8005aac:	4689      	mov	r9, r1
 8005aae:	f7fa ff7b 	bl	80009a8 <__aeabi_dcmpeq>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d09b      	beq.n	80059ee <_dtoa_r+0x64e>
 8005ab6:	e7cd      	b.n	8005a54 <_dtoa_r+0x6b4>
 8005ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	f000 80c4 	beq.w	8005c48 <_dtoa_r+0x8a8>
 8005ac0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ac2:	2a01      	cmp	r2, #1
 8005ac4:	f300 80a8 	bgt.w	8005c18 <_dtoa_r+0x878>
 8005ac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	f000 80a0 	beq.w	8005c10 <_dtoa_r+0x870>
 8005ad0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ad4:	464f      	mov	r7, r9
 8005ad6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ada:	2101      	movs	r1, #1
 8005adc:	441a      	add	r2, r3
 8005ade:	4628      	mov	r0, r5
 8005ae0:	4499      	add	r9, r3
 8005ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae4:	f000 fc32 	bl	800634c <__i2b>
 8005ae8:	4606      	mov	r6, r0
 8005aea:	b15f      	cbz	r7, 8005b04 <_dtoa_r+0x764>
 8005aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd08      	ble.n	8005b04 <_dtoa_r+0x764>
 8005af2:	42bb      	cmp	r3, r7
 8005af4:	bfa8      	it	ge
 8005af6:	463b      	movge	r3, r7
 8005af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005afa:	eba9 0903 	sub.w	r9, r9, r3
 8005afe:	1aff      	subs	r7, r7, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
 8005b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b06:	b1f3      	cbz	r3, 8005b46 <_dtoa_r+0x7a6>
 8005b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80a0 	beq.w	8005c50 <_dtoa_r+0x8b0>
 8005b10:	2c00      	cmp	r4, #0
 8005b12:	dd10      	ble.n	8005b36 <_dtoa_r+0x796>
 8005b14:	4631      	mov	r1, r6
 8005b16:	4622      	mov	r2, r4
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 fcd5 	bl	80064c8 <__pow5mult>
 8005b1e:	4652      	mov	r2, sl
 8005b20:	4601      	mov	r1, r0
 8005b22:	4606      	mov	r6, r0
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 fc27 	bl	8006378 <__multiply>
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	4651      	mov	r1, sl
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 fb56 	bl	80061e0 <_Bfree>
 8005b34:	46c2      	mov	sl, r8
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	1b1a      	subs	r2, r3, r4
 8005b3a:	d004      	beq.n	8005b46 <_dtoa_r+0x7a6>
 8005b3c:	4651      	mov	r1, sl
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 fcc2 	bl	80064c8 <__pow5mult>
 8005b44:	4682      	mov	sl, r0
 8005b46:	2101      	movs	r1, #1
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 fbff 	bl	800634c <__i2b>
 8005b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b50:	4604      	mov	r4, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f340 8082 	ble.w	8005c5c <_dtoa_r+0x8bc>
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 fcb3 	bl	80064c8 <__pow5mult>
 8005b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b64:	4604      	mov	r4, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	dd7b      	ble.n	8005c62 <_dtoa_r+0x8c2>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b74:	6918      	ldr	r0, [r3, #16]
 8005b76:	f000 fb9b 	bl	80062b0 <__hi0bits>
 8005b7a:	f1c0 0020 	rsb	r0, r0, #32
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	4418      	add	r0, r3
 8005b82:	f010 001f 	ands.w	r0, r0, #31
 8005b86:	f000 8092 	beq.w	8005cae <_dtoa_r+0x90e>
 8005b8a:	f1c0 0320 	rsb	r3, r0, #32
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	f340 8085 	ble.w	8005c9e <_dtoa_r+0x8fe>
 8005b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b96:	f1c0 001c 	rsb	r0, r0, #28
 8005b9a:	4403      	add	r3, r0
 8005b9c:	4481      	add	r9, r0
 8005b9e:	4407      	add	r7, r0
 8005ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba2:	f1b9 0f00 	cmp.w	r9, #0
 8005ba6:	dd05      	ble.n	8005bb4 <_dtoa_r+0x814>
 8005ba8:	4651      	mov	r1, sl
 8005baa:	464a      	mov	r2, r9
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 fce5 	bl	800657c <__lshift>
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dd05      	ble.n	8005bc6 <_dtoa_r+0x826>
 8005bba:	4621      	mov	r1, r4
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 fcdc 	bl	800657c <__lshift>
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d072      	beq.n	8005cb2 <_dtoa_r+0x912>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4650      	mov	r0, sl
 8005bd0:	f000 fd40 	bl	8006654 <__mcmp>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	da6c      	bge.n	8005cb2 <_dtoa_r+0x912>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4651      	mov	r1, sl
 8005bdc:	220a      	movs	r2, #10
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 fb20 	bl	8006224 <__multadd>
 8005be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be6:	4682      	mov	sl, r0
 8005be8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 81ac 	beq.w	8005f4a <_dtoa_r+0xbaa>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	220a      	movs	r2, #10
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f000 fb13 	bl	8006224 <__multadd>
 8005bfe:	9b06      	ldr	r3, [sp, #24]
 8005c00:	4606      	mov	r6, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f300 8093 	bgt.w	8005d2e <_dtoa_r+0x98e>
 8005c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	dc59      	bgt.n	8005cc2 <_dtoa_r+0x922>
 8005c0e:	e08e      	b.n	8005d2e <_dtoa_r+0x98e>
 8005c10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c16:	e75d      	b.n	8005ad4 <_dtoa_r+0x734>
 8005c18:	9b08      	ldr	r3, [sp, #32]
 8005c1a:	1e5c      	subs	r4, r3, #1
 8005c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	bfbf      	itttt	lt
 8005c22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005c26:	1ae3      	sublt	r3, r4, r3
 8005c28:	18d2      	addlt	r2, r2, r3
 8005c2a:	bfa8      	it	ge
 8005c2c:	1b1c      	subge	r4, r3, r4
 8005c2e:	9b08      	ldr	r3, [sp, #32]
 8005c30:	bfbe      	ittt	lt
 8005c32:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005c34:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005c36:	2400      	movlt	r4, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bfb5      	itete	lt
 8005c3c:	eba9 0703 	sublt.w	r7, r9, r3
 8005c40:	464f      	movge	r7, r9
 8005c42:	2300      	movlt	r3, #0
 8005c44:	9b08      	ldrge	r3, [sp, #32]
 8005c46:	e747      	b.n	8005ad8 <_dtoa_r+0x738>
 8005c48:	464f      	mov	r7, r9
 8005c4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c4e:	e74c      	b.n	8005aea <_dtoa_r+0x74a>
 8005c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c52:	e773      	b.n	8005b3c <_dtoa_r+0x79c>
 8005c54:	3fe00000 	.word	0x3fe00000
 8005c58:	40240000 	.word	0x40240000
 8005c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	dc18      	bgt.n	8005c94 <_dtoa_r+0x8f4>
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	b9b3      	cbnz	r3, 8005c94 <_dtoa_r+0x8f4>
 8005c66:	9b05      	ldr	r3, [sp, #20]
 8005c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c6c:	b993      	cbnz	r3, 8005c94 <_dtoa_r+0x8f4>
 8005c6e:	9b05      	ldr	r3, [sp, #20]
 8005c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c74:	0d1b      	lsrs	r3, r3, #20
 8005c76:	051b      	lsls	r3, r3, #20
 8005c78:	b17b      	cbz	r3, 8005c9a <_dtoa_r+0x8fa>
 8005c7a:	f04f 0801 	mov.w	r8, #1
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	f109 0901 	add.w	r9, r9, #1
 8005c84:	3301      	adds	r3, #1
 8005c86:	9309      	str	r3, [sp, #36]	; 0x24
 8005c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f47f af6f 	bne.w	8005b6e <_dtoa_r+0x7ce>
 8005c90:	2001      	movs	r0, #1
 8005c92:	e774      	b.n	8005b7e <_dtoa_r+0x7de>
 8005c94:	f04f 0800 	mov.w	r8, #0
 8005c98:	e7f6      	b.n	8005c88 <_dtoa_r+0x8e8>
 8005c9a:	4698      	mov	r8, r3
 8005c9c:	e7f4      	b.n	8005c88 <_dtoa_r+0x8e8>
 8005c9e:	d080      	beq.n	8005ba2 <_dtoa_r+0x802>
 8005ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ca2:	331c      	adds	r3, #28
 8005ca4:	441a      	add	r2, r3
 8005ca6:	4499      	add	r9, r3
 8005ca8:	441f      	add	r7, r3
 8005caa:	9209      	str	r2, [sp, #36]	; 0x24
 8005cac:	e779      	b.n	8005ba2 <_dtoa_r+0x802>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	e7f6      	b.n	8005ca0 <_dtoa_r+0x900>
 8005cb2:	9b08      	ldr	r3, [sp, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dc34      	bgt.n	8005d22 <_dtoa_r+0x982>
 8005cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	dd31      	ble.n	8005d22 <_dtoa_r+0x982>
 8005cbe:	9b08      	ldr	r3, [sp, #32]
 8005cc0:	9306      	str	r3, [sp, #24]
 8005cc2:	9b06      	ldr	r3, [sp, #24]
 8005cc4:	b963      	cbnz	r3, 8005ce0 <_dtoa_r+0x940>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	2205      	movs	r2, #5
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 faaa 	bl	8006224 <__multadd>
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f000 fcbd 	bl	8006654 <__mcmp>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	f73f adbf 	bgt.w	800585e <_dtoa_r+0x4be>
 8005ce0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ce2:	9f03      	ldr	r7, [sp, #12]
 8005ce4:	ea6f 0b03 	mvn.w	fp, r3
 8005ce8:	f04f 0800 	mov.w	r8, #0
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 fa76 	bl	80061e0 <_Bfree>
 8005cf4:	2e00      	cmp	r6, #0
 8005cf6:	f43f aead 	beq.w	8005a54 <_dtoa_r+0x6b4>
 8005cfa:	f1b8 0f00 	cmp.w	r8, #0
 8005cfe:	d005      	beq.n	8005d0c <_dtoa_r+0x96c>
 8005d00:	45b0      	cmp	r8, r6
 8005d02:	d003      	beq.n	8005d0c <_dtoa_r+0x96c>
 8005d04:	4641      	mov	r1, r8
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 fa6a 	bl	80061e0 <_Bfree>
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 fa66 	bl	80061e0 <_Bfree>
 8005d14:	e69e      	b.n	8005a54 <_dtoa_r+0x6b4>
 8005d16:	2400      	movs	r4, #0
 8005d18:	4626      	mov	r6, r4
 8005d1a:	e7e1      	b.n	8005ce0 <_dtoa_r+0x940>
 8005d1c:	46c3      	mov	fp, r8
 8005d1e:	4626      	mov	r6, r4
 8005d20:	e59d      	b.n	800585e <_dtoa_r+0x4be>
 8005d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80c8 	beq.w	8005eba <_dtoa_r+0xb1a>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	9306      	str	r3, [sp, #24]
 8005d2e:	2f00      	cmp	r7, #0
 8005d30:	dd05      	ble.n	8005d3e <_dtoa_r+0x99e>
 8005d32:	4631      	mov	r1, r6
 8005d34:	463a      	mov	r2, r7
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 fc20 	bl	800657c <__lshift>
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	f1b8 0f00 	cmp.w	r8, #0
 8005d42:	d05b      	beq.n	8005dfc <_dtoa_r+0xa5c>
 8005d44:	4628      	mov	r0, r5
 8005d46:	6871      	ldr	r1, [r6, #4]
 8005d48:	f000 fa0a 	bl	8006160 <_Balloc>
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	b928      	cbnz	r0, 8005d5c <_dtoa_r+0x9bc>
 8005d50:	4602      	mov	r2, r0
 8005d52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005d56:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <_dtoa_r+0xbbc>)
 8005d58:	f7ff bb36 	b.w	80053c8 <_dtoa_r+0x28>
 8005d5c:	6932      	ldr	r2, [r6, #16]
 8005d5e:	f106 010c 	add.w	r1, r6, #12
 8005d62:	3202      	adds	r2, #2
 8005d64:	0092      	lsls	r2, r2, #2
 8005d66:	300c      	adds	r0, #12
 8005d68:	f000 ff9e 	bl	8006ca8 <memcpy>
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4639      	mov	r1, r7
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 fc03 	bl	800657c <__lshift>
 8005d76:	46b0      	mov	r8, r6
 8005d78:	4606      	mov	r6, r0
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	9a03      	ldr	r2, [sp, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	9308      	str	r3, [sp, #32]
 8005d82:	9b06      	ldr	r3, [sp, #24]
 8005d84:	4413      	add	r3, r2
 8005d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d88:	9b04      	ldr	r3, [sp, #16]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d90:	9b08      	ldr	r3, [sp, #32]
 8005d92:	4621      	mov	r1, r4
 8005d94:	3b01      	subs	r3, #1
 8005d96:	4650      	mov	r0, sl
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	f7ff fa78 	bl	800528e <quorem>
 8005d9e:	4641      	mov	r1, r8
 8005da0:	9006      	str	r0, [sp, #24]
 8005da2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005da6:	4650      	mov	r0, sl
 8005da8:	f000 fc54 	bl	8006654 <__mcmp>
 8005dac:	4632      	mov	r2, r6
 8005dae:	9009      	str	r0, [sp, #36]	; 0x24
 8005db0:	4621      	mov	r1, r4
 8005db2:	4628      	mov	r0, r5
 8005db4:	f000 fc6a 	bl	800668c <__mdiff>
 8005db8:	68c2      	ldr	r2, [r0, #12]
 8005dba:	4607      	mov	r7, r0
 8005dbc:	bb02      	cbnz	r2, 8005e00 <_dtoa_r+0xa60>
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	4650      	mov	r0, sl
 8005dc2:	f000 fc47 	bl	8006654 <__mcmp>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4639      	mov	r1, r7
 8005dca:	4628      	mov	r0, r5
 8005dcc:	920c      	str	r2, [sp, #48]	; 0x30
 8005dce:	f000 fa07 	bl	80061e0 <_Bfree>
 8005dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dd6:	9f08      	ldr	r7, [sp, #32]
 8005dd8:	ea43 0102 	orr.w	r1, r3, r2
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dde:	4319      	orrs	r1, r3
 8005de0:	d110      	bne.n	8005e04 <_dtoa_r+0xa64>
 8005de2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005de6:	d029      	beq.n	8005e3c <_dtoa_r+0xa9c>
 8005de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dd02      	ble.n	8005df4 <_dtoa_r+0xa54>
 8005dee:	9b06      	ldr	r3, [sp, #24]
 8005df0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	f883 9000 	strb.w	r9, [r3]
 8005dfa:	e777      	b.n	8005cec <_dtoa_r+0x94c>
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	e7ba      	b.n	8005d76 <_dtoa_r+0x9d6>
 8005e00:	2201      	movs	r2, #1
 8005e02:	e7e1      	b.n	8005dc8 <_dtoa_r+0xa28>
 8005e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	db04      	blt.n	8005e14 <_dtoa_r+0xa74>
 8005e0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e10:	430b      	orrs	r3, r1
 8005e12:	d120      	bne.n	8005e56 <_dtoa_r+0xab6>
 8005e14:	2a00      	cmp	r2, #0
 8005e16:	dded      	ble.n	8005df4 <_dtoa_r+0xa54>
 8005e18:	4651      	mov	r1, sl
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f000 fbad 	bl	800657c <__lshift>
 8005e22:	4621      	mov	r1, r4
 8005e24:	4682      	mov	sl, r0
 8005e26:	f000 fc15 	bl	8006654 <__mcmp>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	dc03      	bgt.n	8005e36 <_dtoa_r+0xa96>
 8005e2e:	d1e1      	bne.n	8005df4 <_dtoa_r+0xa54>
 8005e30:	f019 0f01 	tst.w	r9, #1
 8005e34:	d0de      	beq.n	8005df4 <_dtoa_r+0xa54>
 8005e36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e3a:	d1d8      	bne.n	8005dee <_dtoa_r+0xa4e>
 8005e3c:	2339      	movs	r3, #57	; 0x39
 8005e3e:	9a04      	ldr	r2, [sp, #16]
 8005e40:	7013      	strb	r3, [r2, #0]
 8005e42:	463b      	mov	r3, r7
 8005e44:	461f      	mov	r7, r3
 8005e46:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	2a39      	cmp	r2, #57	; 0x39
 8005e4e:	d06b      	beq.n	8005f28 <_dtoa_r+0xb88>
 8005e50:	3201      	adds	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e74a      	b.n	8005cec <_dtoa_r+0x94c>
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	dd07      	ble.n	8005e6a <_dtoa_r+0xaca>
 8005e5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e5e:	d0ed      	beq.n	8005e3c <_dtoa_r+0xa9c>
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	f109 0301 	add.w	r3, r9, #1
 8005e66:	7013      	strb	r3, [r2, #0]
 8005e68:	e740      	b.n	8005cec <_dtoa_r+0x94c>
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e6e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d042      	beq.n	8005efc <_dtoa_r+0xb5c>
 8005e76:	4651      	mov	r1, sl
 8005e78:	2300      	movs	r3, #0
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f9d1 	bl	8006224 <__multadd>
 8005e82:	45b0      	cmp	r8, r6
 8005e84:	4682      	mov	sl, r0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	f04f 020a 	mov.w	r2, #10
 8005e8e:	4641      	mov	r1, r8
 8005e90:	4628      	mov	r0, r5
 8005e92:	d107      	bne.n	8005ea4 <_dtoa_r+0xb04>
 8005e94:	f000 f9c6 	bl	8006224 <__multadd>
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	9b08      	ldr	r3, [sp, #32]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	9308      	str	r3, [sp, #32]
 8005ea2:	e775      	b.n	8005d90 <_dtoa_r+0x9f0>
 8005ea4:	f000 f9be 	bl	8006224 <__multadd>
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	4680      	mov	r8, r0
 8005eac:	2300      	movs	r3, #0
 8005eae:	220a      	movs	r2, #10
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f000 f9b7 	bl	8006224 <__multadd>
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	e7f0      	b.n	8005e9c <_dtoa_r+0xafc>
 8005eba:	9b08      	ldr	r3, [sp, #32]
 8005ebc:	9306      	str	r3, [sp, #24]
 8005ebe:	9f03      	ldr	r7, [sp, #12]
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	f7ff f9e3 	bl	800528e <quorem>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ece:	f807 9b01 	strb.w	r9, [r7], #1
 8005ed2:	1afa      	subs	r2, r7, r3
 8005ed4:	9b06      	ldr	r3, [sp, #24]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	dd07      	ble.n	8005eea <_dtoa_r+0xb4a>
 8005eda:	4651      	mov	r1, sl
 8005edc:	2300      	movs	r3, #0
 8005ede:	220a      	movs	r2, #10
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 f99f 	bl	8006224 <__multadd>
 8005ee6:	4682      	mov	sl, r0
 8005ee8:	e7ea      	b.n	8005ec0 <_dtoa_r+0xb20>
 8005eea:	9b06      	ldr	r3, [sp, #24]
 8005eec:	f04f 0800 	mov.w	r8, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfcc      	ite	gt
 8005ef4:	461f      	movgt	r7, r3
 8005ef6:	2701      	movle	r7, #1
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	441f      	add	r7, r3
 8005efc:	4651      	mov	r1, sl
 8005efe:	2201      	movs	r2, #1
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 fb3b 	bl	800657c <__lshift>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4682      	mov	sl, r0
 8005f0a:	f000 fba3 	bl	8006654 <__mcmp>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	dc97      	bgt.n	8005e42 <_dtoa_r+0xaa2>
 8005f12:	d102      	bne.n	8005f1a <_dtoa_r+0xb7a>
 8005f14:	f019 0f01 	tst.w	r9, #1
 8005f18:	d193      	bne.n	8005e42 <_dtoa_r+0xaa2>
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	461f      	mov	r7, r3
 8005f1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f22:	2a30      	cmp	r2, #48	; 0x30
 8005f24:	d0fa      	beq.n	8005f1c <_dtoa_r+0xb7c>
 8005f26:	e6e1      	b.n	8005cec <_dtoa_r+0x94c>
 8005f28:	9a03      	ldr	r2, [sp, #12]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d18a      	bne.n	8005e44 <_dtoa_r+0xaa4>
 8005f2e:	2331      	movs	r3, #49	; 0x31
 8005f30:	f10b 0b01 	add.w	fp, fp, #1
 8005f34:	e797      	b.n	8005e66 <_dtoa_r+0xac6>
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <_dtoa_r+0xbc0>)
 8005f38:	f7ff ba9f 	b.w	800547a <_dtoa_r+0xda>
 8005f3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f47f aa77 	bne.w	8005432 <_dtoa_r+0x92>
 8005f44:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <_dtoa_r+0xbc4>)
 8005f46:	f7ff ba98 	b.w	800547a <_dtoa_r+0xda>
 8005f4a:	9b06      	ldr	r3, [sp, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dcb6      	bgt.n	8005ebe <_dtoa_r+0xb1e>
 8005f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	f73f aeb5 	bgt.w	8005cc2 <_dtoa_r+0x922>
 8005f58:	e7b1      	b.n	8005ebe <_dtoa_r+0xb1e>
 8005f5a:	bf00      	nop
 8005f5c:	0800744c 	.word	0x0800744c
 8005f60:	080073ac 	.word	0x080073ac
 8005f64:	080073d0 	.word	0x080073d0

08005f68 <_free_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d040      	beq.n	8005ff2 <_free_r+0x8a>
 8005f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f74:	1f0c      	subs	r4, r1, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	18e4      	addlt	r4, r4, r3
 8005f7c:	f000 f8e4 	bl	8006148 <__malloc_lock>
 8005f80:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <_free_r+0x8c>)
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	b933      	cbnz	r3, 8005f94 <_free_r+0x2c>
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	6014      	str	r4, [r2, #0]
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f90:	f000 b8e0 	b.w	8006154 <__malloc_unlock>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d908      	bls.n	8005faa <_free_r+0x42>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1809      	addeq	r1, r1, r0
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	e7ed      	b.n	8005f86 <_free_r+0x1e>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x4c>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x42>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1850      	adds	r0, r2, r1
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x6c>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	1850      	adds	r0, r2, r1
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1e0      	bne.n	8005f8a <_free_r+0x22>
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4408      	add	r0, r1
 8005fce:	6010      	str	r0, [r2, #0]
 8005fd0:	6053      	str	r3, [r2, #4]
 8005fd2:	e7da      	b.n	8005f8a <_free_r+0x22>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x74>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	e7d6      	b.n	8005f8a <_free_r+0x22>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf01      	itttt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	1809      	addeq	r1, r1, r0
 8005fea:	6021      	streq	r1, [r4, #0]
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	6054      	str	r4, [r2, #4]
 8005ff0:	e7cb      	b.n	8005f8a <_free_r+0x22>
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	20000468 	.word	0x20000468

08005ff8 <malloc>:
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <malloc+0xc>)
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f000 b823 	b.w	8006048 <_malloc_r>
 8006002:	bf00      	nop
 8006004:	20000074 	.word	0x20000074

08006008 <sbrk_aligned>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	4e0e      	ldr	r6, [pc, #56]	; (8006044 <sbrk_aligned+0x3c>)
 800600c:	460c      	mov	r4, r1
 800600e:	6831      	ldr	r1, [r6, #0]
 8006010:	4605      	mov	r5, r0
 8006012:	b911      	cbnz	r1, 800601a <sbrk_aligned+0x12>
 8006014:	f000 fe38 	bl	8006c88 <_sbrk_r>
 8006018:	6030      	str	r0, [r6, #0]
 800601a:	4621      	mov	r1, r4
 800601c:	4628      	mov	r0, r5
 800601e:	f000 fe33 	bl	8006c88 <_sbrk_r>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	d00a      	beq.n	800603c <sbrk_aligned+0x34>
 8006026:	1cc4      	adds	r4, r0, #3
 8006028:	f024 0403 	bic.w	r4, r4, #3
 800602c:	42a0      	cmp	r0, r4
 800602e:	d007      	beq.n	8006040 <sbrk_aligned+0x38>
 8006030:	1a21      	subs	r1, r4, r0
 8006032:	4628      	mov	r0, r5
 8006034:	f000 fe28 	bl	8006c88 <_sbrk_r>
 8006038:	3001      	adds	r0, #1
 800603a:	d101      	bne.n	8006040 <sbrk_aligned+0x38>
 800603c:	f04f 34ff 	mov.w	r4, #4294967295
 8006040:	4620      	mov	r0, r4
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	2000046c 	.word	0x2000046c

08006048 <_malloc_r>:
 8006048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800604c:	1ccd      	adds	r5, r1, #3
 800604e:	f025 0503 	bic.w	r5, r5, #3
 8006052:	3508      	adds	r5, #8
 8006054:	2d0c      	cmp	r5, #12
 8006056:	bf38      	it	cc
 8006058:	250c      	movcc	r5, #12
 800605a:	2d00      	cmp	r5, #0
 800605c:	4607      	mov	r7, r0
 800605e:	db01      	blt.n	8006064 <_malloc_r+0x1c>
 8006060:	42a9      	cmp	r1, r5
 8006062:	d905      	bls.n	8006070 <_malloc_r+0x28>
 8006064:	230c      	movs	r3, #12
 8006066:	2600      	movs	r6, #0
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	4630      	mov	r0, r6
 800606c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006144 <_malloc_r+0xfc>
 8006074:	f000 f868 	bl	8006148 <__malloc_lock>
 8006078:	f8d8 3000 	ldr.w	r3, [r8]
 800607c:	461c      	mov	r4, r3
 800607e:	bb5c      	cbnz	r4, 80060d8 <_malloc_r+0x90>
 8006080:	4629      	mov	r1, r5
 8006082:	4638      	mov	r0, r7
 8006084:	f7ff ffc0 	bl	8006008 <sbrk_aligned>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	4604      	mov	r4, r0
 800608c:	d155      	bne.n	800613a <_malloc_r+0xf2>
 800608e:	f8d8 4000 	ldr.w	r4, [r8]
 8006092:	4626      	mov	r6, r4
 8006094:	2e00      	cmp	r6, #0
 8006096:	d145      	bne.n	8006124 <_malloc_r+0xdc>
 8006098:	2c00      	cmp	r4, #0
 800609a:	d048      	beq.n	800612e <_malloc_r+0xe6>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	4631      	mov	r1, r6
 80060a0:	4638      	mov	r0, r7
 80060a2:	eb04 0903 	add.w	r9, r4, r3
 80060a6:	f000 fdef 	bl	8006c88 <_sbrk_r>
 80060aa:	4581      	cmp	r9, r0
 80060ac:	d13f      	bne.n	800612e <_malloc_r+0xe6>
 80060ae:	6821      	ldr	r1, [r4, #0]
 80060b0:	4638      	mov	r0, r7
 80060b2:	1a6d      	subs	r5, r5, r1
 80060b4:	4629      	mov	r1, r5
 80060b6:	f7ff ffa7 	bl	8006008 <sbrk_aligned>
 80060ba:	3001      	adds	r0, #1
 80060bc:	d037      	beq.n	800612e <_malloc_r+0xe6>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	442b      	add	r3, r5
 80060c2:	6023      	str	r3, [r4, #0]
 80060c4:	f8d8 3000 	ldr.w	r3, [r8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d038      	beq.n	800613e <_malloc_r+0xf6>
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	42a2      	cmp	r2, r4
 80060d0:	d12b      	bne.n	800612a <_malloc_r+0xe2>
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	e00f      	b.n	80060f8 <_malloc_r+0xb0>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	1b52      	subs	r2, r2, r5
 80060dc:	d41f      	bmi.n	800611e <_malloc_r+0xd6>
 80060de:	2a0b      	cmp	r2, #11
 80060e0:	d917      	bls.n	8006112 <_malloc_r+0xca>
 80060e2:	1961      	adds	r1, r4, r5
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	6025      	str	r5, [r4, #0]
 80060e8:	bf18      	it	ne
 80060ea:	6059      	strne	r1, [r3, #4]
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	bf08      	it	eq
 80060f0:	f8c8 1000 	streq.w	r1, [r8]
 80060f4:	5162      	str	r2, [r4, r5]
 80060f6:	604b      	str	r3, [r1, #4]
 80060f8:	4638      	mov	r0, r7
 80060fa:	f104 060b 	add.w	r6, r4, #11
 80060fe:	f000 f829 	bl	8006154 <__malloc_unlock>
 8006102:	f026 0607 	bic.w	r6, r6, #7
 8006106:	1d23      	adds	r3, r4, #4
 8006108:	1af2      	subs	r2, r6, r3
 800610a:	d0ae      	beq.n	800606a <_malloc_r+0x22>
 800610c:	1b9b      	subs	r3, r3, r6
 800610e:	50a3      	str	r3, [r4, r2]
 8006110:	e7ab      	b.n	800606a <_malloc_r+0x22>
 8006112:	42a3      	cmp	r3, r4
 8006114:	6862      	ldr	r2, [r4, #4]
 8006116:	d1dd      	bne.n	80060d4 <_malloc_r+0x8c>
 8006118:	f8c8 2000 	str.w	r2, [r8]
 800611c:	e7ec      	b.n	80060f8 <_malloc_r+0xb0>
 800611e:	4623      	mov	r3, r4
 8006120:	6864      	ldr	r4, [r4, #4]
 8006122:	e7ac      	b.n	800607e <_malloc_r+0x36>
 8006124:	4634      	mov	r4, r6
 8006126:	6876      	ldr	r6, [r6, #4]
 8006128:	e7b4      	b.n	8006094 <_malloc_r+0x4c>
 800612a:	4613      	mov	r3, r2
 800612c:	e7cc      	b.n	80060c8 <_malloc_r+0x80>
 800612e:	230c      	movs	r3, #12
 8006130:	4638      	mov	r0, r7
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	f000 f80e 	bl	8006154 <__malloc_unlock>
 8006138:	e797      	b.n	800606a <_malloc_r+0x22>
 800613a:	6025      	str	r5, [r4, #0]
 800613c:	e7dc      	b.n	80060f8 <_malloc_r+0xb0>
 800613e:	605b      	str	r3, [r3, #4]
 8006140:	deff      	udf	#255	; 0xff
 8006142:	bf00      	nop
 8006144:	20000468 	.word	0x20000468

08006148 <__malloc_lock>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__malloc_lock+0x8>)
 800614a:	f7ff b890 	b.w	800526e <__retarget_lock_acquire_recursive>
 800614e:	bf00      	nop
 8006150:	20000464 	.word	0x20000464

08006154 <__malloc_unlock>:
 8006154:	4801      	ldr	r0, [pc, #4]	; (800615c <__malloc_unlock+0x8>)
 8006156:	f7ff b88b 	b.w	8005270 <__retarget_lock_release_recursive>
 800615a:	bf00      	nop
 800615c:	20000464 	.word	0x20000464

08006160 <_Balloc>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	69c6      	ldr	r6, [r0, #28]
 8006164:	4604      	mov	r4, r0
 8006166:	460d      	mov	r5, r1
 8006168:	b976      	cbnz	r6, 8006188 <_Balloc+0x28>
 800616a:	2010      	movs	r0, #16
 800616c:	f7ff ff44 	bl	8005ff8 <malloc>
 8006170:	4602      	mov	r2, r0
 8006172:	61e0      	str	r0, [r4, #28]
 8006174:	b920      	cbnz	r0, 8006180 <_Balloc+0x20>
 8006176:	216b      	movs	r1, #107	; 0x6b
 8006178:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <_Balloc+0x78>)
 800617a:	4818      	ldr	r0, [pc, #96]	; (80061dc <_Balloc+0x7c>)
 800617c:	f000 fda2 	bl	8006cc4 <__assert_func>
 8006180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006184:	6006      	str	r6, [r0, #0]
 8006186:	60c6      	str	r6, [r0, #12]
 8006188:	69e6      	ldr	r6, [r4, #28]
 800618a:	68f3      	ldr	r3, [r6, #12]
 800618c:	b183      	cbz	r3, 80061b0 <_Balloc+0x50>
 800618e:	69e3      	ldr	r3, [r4, #28]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006196:	b9b8      	cbnz	r0, 80061c8 <_Balloc+0x68>
 8006198:	2101      	movs	r1, #1
 800619a:	fa01 f605 	lsl.w	r6, r1, r5
 800619e:	1d72      	adds	r2, r6, #5
 80061a0:	4620      	mov	r0, r4
 80061a2:	0092      	lsls	r2, r2, #2
 80061a4:	f000 fdac 	bl	8006d00 <_calloc_r>
 80061a8:	b160      	cbz	r0, 80061c4 <_Balloc+0x64>
 80061aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061ae:	e00e      	b.n	80061ce <_Balloc+0x6e>
 80061b0:	2221      	movs	r2, #33	; 0x21
 80061b2:	2104      	movs	r1, #4
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fda3 	bl	8006d00 <_calloc_r>
 80061ba:	69e3      	ldr	r3, [r4, #28]
 80061bc:	60f0      	str	r0, [r6, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e4      	bne.n	800618e <_Balloc+0x2e>
 80061c4:	2000      	movs	r0, #0
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	6802      	ldr	r2, [r0, #0]
 80061ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061ce:	2300      	movs	r3, #0
 80061d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061d4:	e7f7      	b.n	80061c6 <_Balloc+0x66>
 80061d6:	bf00      	nop
 80061d8:	080073dd 	.word	0x080073dd
 80061dc:	0800745d 	.word	0x0800745d

080061e0 <_Bfree>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	69c6      	ldr	r6, [r0, #28]
 80061e4:	4605      	mov	r5, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	b976      	cbnz	r6, 8006208 <_Bfree+0x28>
 80061ea:	2010      	movs	r0, #16
 80061ec:	f7ff ff04 	bl	8005ff8 <malloc>
 80061f0:	4602      	mov	r2, r0
 80061f2:	61e8      	str	r0, [r5, #28]
 80061f4:	b920      	cbnz	r0, 8006200 <_Bfree+0x20>
 80061f6:	218f      	movs	r1, #143	; 0x8f
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <_Bfree+0x3c>)
 80061fa:	4809      	ldr	r0, [pc, #36]	; (8006220 <_Bfree+0x40>)
 80061fc:	f000 fd62 	bl	8006cc4 <__assert_func>
 8006200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006204:	6006      	str	r6, [r0, #0]
 8006206:	60c6      	str	r6, [r0, #12]
 8006208:	b13c      	cbz	r4, 800621a <_Bfree+0x3a>
 800620a:	69eb      	ldr	r3, [r5, #28]
 800620c:	6862      	ldr	r2, [r4, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006214:	6021      	str	r1, [r4, #0]
 8006216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	080073dd 	.word	0x080073dd
 8006220:	0800745d 	.word	0x0800745d

08006224 <__multadd>:
 8006224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	4607      	mov	r7, r0
 800622a:	460c      	mov	r4, r1
 800622c:	461e      	mov	r6, r3
 800622e:	2000      	movs	r0, #0
 8006230:	690d      	ldr	r5, [r1, #16]
 8006232:	f101 0c14 	add.w	ip, r1, #20
 8006236:	f8dc 3000 	ldr.w	r3, [ip]
 800623a:	3001      	adds	r0, #1
 800623c:	b299      	uxth	r1, r3
 800623e:	fb02 6101 	mla	r1, r2, r1, r6
 8006242:	0c1e      	lsrs	r6, r3, #16
 8006244:	0c0b      	lsrs	r3, r1, #16
 8006246:	fb02 3306 	mla	r3, r2, r6, r3
 800624a:	b289      	uxth	r1, r1
 800624c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006250:	4285      	cmp	r5, r0
 8006252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006256:	f84c 1b04 	str.w	r1, [ip], #4
 800625a:	dcec      	bgt.n	8006236 <__multadd+0x12>
 800625c:	b30e      	cbz	r6, 80062a2 <__multadd+0x7e>
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	42ab      	cmp	r3, r5
 8006262:	dc19      	bgt.n	8006298 <__multadd+0x74>
 8006264:	6861      	ldr	r1, [r4, #4]
 8006266:	4638      	mov	r0, r7
 8006268:	3101      	adds	r1, #1
 800626a:	f7ff ff79 	bl	8006160 <_Balloc>
 800626e:	4680      	mov	r8, r0
 8006270:	b928      	cbnz	r0, 800627e <__multadd+0x5a>
 8006272:	4602      	mov	r2, r0
 8006274:	21ba      	movs	r1, #186	; 0xba
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <__multadd+0x84>)
 8006278:	480c      	ldr	r0, [pc, #48]	; (80062ac <__multadd+0x88>)
 800627a:	f000 fd23 	bl	8006cc4 <__assert_func>
 800627e:	6922      	ldr	r2, [r4, #16]
 8006280:	f104 010c 	add.w	r1, r4, #12
 8006284:	3202      	adds	r2, #2
 8006286:	0092      	lsls	r2, r2, #2
 8006288:	300c      	adds	r0, #12
 800628a:	f000 fd0d 	bl	8006ca8 <memcpy>
 800628e:	4621      	mov	r1, r4
 8006290:	4638      	mov	r0, r7
 8006292:	f7ff ffa5 	bl	80061e0 <_Bfree>
 8006296:	4644      	mov	r4, r8
 8006298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800629c:	3501      	adds	r5, #1
 800629e:	615e      	str	r6, [r3, #20]
 80062a0:	6125      	str	r5, [r4, #16]
 80062a2:	4620      	mov	r0, r4
 80062a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a8:	0800744c 	.word	0x0800744c
 80062ac:	0800745d 	.word	0x0800745d

080062b0 <__hi0bits>:
 80062b0:	0c02      	lsrs	r2, r0, #16
 80062b2:	0412      	lsls	r2, r2, #16
 80062b4:	4603      	mov	r3, r0
 80062b6:	b9ca      	cbnz	r2, 80062ec <__hi0bits+0x3c>
 80062b8:	0403      	lsls	r3, r0, #16
 80062ba:	2010      	movs	r0, #16
 80062bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80062c0:	bf04      	itt	eq
 80062c2:	021b      	lsleq	r3, r3, #8
 80062c4:	3008      	addeq	r0, #8
 80062c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80062ca:	bf04      	itt	eq
 80062cc:	011b      	lsleq	r3, r3, #4
 80062ce:	3004      	addeq	r0, #4
 80062d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80062d4:	bf04      	itt	eq
 80062d6:	009b      	lsleq	r3, r3, #2
 80062d8:	3002      	addeq	r0, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	db05      	blt.n	80062ea <__hi0bits+0x3a>
 80062de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80062e2:	f100 0001 	add.w	r0, r0, #1
 80062e6:	bf08      	it	eq
 80062e8:	2020      	moveq	r0, #32
 80062ea:	4770      	bx	lr
 80062ec:	2000      	movs	r0, #0
 80062ee:	e7e5      	b.n	80062bc <__hi0bits+0xc>

080062f0 <__lo0bits>:
 80062f0:	6803      	ldr	r3, [r0, #0]
 80062f2:	4602      	mov	r2, r0
 80062f4:	f013 0007 	ands.w	r0, r3, #7
 80062f8:	d00b      	beq.n	8006312 <__lo0bits+0x22>
 80062fa:	07d9      	lsls	r1, r3, #31
 80062fc:	d421      	bmi.n	8006342 <__lo0bits+0x52>
 80062fe:	0798      	lsls	r0, r3, #30
 8006300:	bf49      	itett	mi
 8006302:	085b      	lsrmi	r3, r3, #1
 8006304:	089b      	lsrpl	r3, r3, #2
 8006306:	2001      	movmi	r0, #1
 8006308:	6013      	strmi	r3, [r2, #0]
 800630a:	bf5c      	itt	pl
 800630c:	2002      	movpl	r0, #2
 800630e:	6013      	strpl	r3, [r2, #0]
 8006310:	4770      	bx	lr
 8006312:	b299      	uxth	r1, r3
 8006314:	b909      	cbnz	r1, 800631a <__lo0bits+0x2a>
 8006316:	2010      	movs	r0, #16
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	b2d9      	uxtb	r1, r3
 800631c:	b909      	cbnz	r1, 8006322 <__lo0bits+0x32>
 800631e:	3008      	adds	r0, #8
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	0719      	lsls	r1, r3, #28
 8006324:	bf04      	itt	eq
 8006326:	091b      	lsreq	r3, r3, #4
 8006328:	3004      	addeq	r0, #4
 800632a:	0799      	lsls	r1, r3, #30
 800632c:	bf04      	itt	eq
 800632e:	089b      	lsreq	r3, r3, #2
 8006330:	3002      	addeq	r0, #2
 8006332:	07d9      	lsls	r1, r3, #31
 8006334:	d403      	bmi.n	800633e <__lo0bits+0x4e>
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	f100 0001 	add.w	r0, r0, #1
 800633c:	d003      	beq.n	8006346 <__lo0bits+0x56>
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4770      	bx	lr
 8006342:	2000      	movs	r0, #0
 8006344:	4770      	bx	lr
 8006346:	2020      	movs	r0, #32
 8006348:	4770      	bx	lr
	...

0800634c <__i2b>:
 800634c:	b510      	push	{r4, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	2101      	movs	r1, #1
 8006352:	f7ff ff05 	bl	8006160 <_Balloc>
 8006356:	4602      	mov	r2, r0
 8006358:	b928      	cbnz	r0, 8006366 <__i2b+0x1a>
 800635a:	f240 1145 	movw	r1, #325	; 0x145
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <__i2b+0x24>)
 8006360:	4804      	ldr	r0, [pc, #16]	; (8006374 <__i2b+0x28>)
 8006362:	f000 fcaf 	bl	8006cc4 <__assert_func>
 8006366:	2301      	movs	r3, #1
 8006368:	6144      	str	r4, [r0, #20]
 800636a:	6103      	str	r3, [r0, #16]
 800636c:	bd10      	pop	{r4, pc}
 800636e:	bf00      	nop
 8006370:	0800744c 	.word	0x0800744c
 8006374:	0800745d 	.word	0x0800745d

08006378 <__multiply>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	4691      	mov	r9, r2
 800637e:	690a      	ldr	r2, [r1, #16]
 8006380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006384:	460c      	mov	r4, r1
 8006386:	429a      	cmp	r2, r3
 8006388:	bfbe      	ittt	lt
 800638a:	460b      	movlt	r3, r1
 800638c:	464c      	movlt	r4, r9
 800638e:	4699      	movlt	r9, r3
 8006390:	6927      	ldr	r7, [r4, #16]
 8006392:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	6861      	ldr	r1, [r4, #4]
 800639a:	eb07 060a 	add.w	r6, r7, sl
 800639e:	42b3      	cmp	r3, r6
 80063a0:	b085      	sub	sp, #20
 80063a2:	bfb8      	it	lt
 80063a4:	3101      	addlt	r1, #1
 80063a6:	f7ff fedb 	bl	8006160 <_Balloc>
 80063aa:	b930      	cbnz	r0, 80063ba <__multiply+0x42>
 80063ac:	4602      	mov	r2, r0
 80063ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80063b2:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <__multiply+0x148>)
 80063b4:	4843      	ldr	r0, [pc, #268]	; (80064c4 <__multiply+0x14c>)
 80063b6:	f000 fc85 	bl	8006cc4 <__assert_func>
 80063ba:	f100 0514 	add.w	r5, r0, #20
 80063be:	462b      	mov	r3, r5
 80063c0:	2200      	movs	r2, #0
 80063c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063c6:	4543      	cmp	r3, r8
 80063c8:	d321      	bcc.n	800640e <__multiply+0x96>
 80063ca:	f104 0314 	add.w	r3, r4, #20
 80063ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80063d2:	f109 0314 	add.w	r3, r9, #20
 80063d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063da:	9202      	str	r2, [sp, #8]
 80063dc:	1b3a      	subs	r2, r7, r4
 80063de:	3a15      	subs	r2, #21
 80063e0:	f022 0203 	bic.w	r2, r2, #3
 80063e4:	3204      	adds	r2, #4
 80063e6:	f104 0115 	add.w	r1, r4, #21
 80063ea:	428f      	cmp	r7, r1
 80063ec:	bf38      	it	cc
 80063ee:	2204      	movcc	r2, #4
 80063f0:	9201      	str	r2, [sp, #4]
 80063f2:	9a02      	ldr	r2, [sp, #8]
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d80c      	bhi.n	8006414 <__multiply+0x9c>
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	dd03      	ble.n	8006406 <__multiply+0x8e>
 80063fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006402:	2b00      	cmp	r3, #0
 8006404:	d05a      	beq.n	80064bc <__multiply+0x144>
 8006406:	6106      	str	r6, [r0, #16]
 8006408:	b005      	add	sp, #20
 800640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640e:	f843 2b04 	str.w	r2, [r3], #4
 8006412:	e7d8      	b.n	80063c6 <__multiply+0x4e>
 8006414:	f8b3 a000 	ldrh.w	sl, [r3]
 8006418:	f1ba 0f00 	cmp.w	sl, #0
 800641c:	d023      	beq.n	8006466 <__multiply+0xee>
 800641e:	46a9      	mov	r9, r5
 8006420:	f04f 0c00 	mov.w	ip, #0
 8006424:	f104 0e14 	add.w	lr, r4, #20
 8006428:	f85e 2b04 	ldr.w	r2, [lr], #4
 800642c:	f8d9 1000 	ldr.w	r1, [r9]
 8006430:	fa1f fb82 	uxth.w	fp, r2
 8006434:	b289      	uxth	r1, r1
 8006436:	fb0a 110b 	mla	r1, sl, fp, r1
 800643a:	4461      	add	r1, ip
 800643c:	f8d9 c000 	ldr.w	ip, [r9]
 8006440:	0c12      	lsrs	r2, r2, #16
 8006442:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006446:	fb0a c202 	mla	r2, sl, r2, ip
 800644a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800644e:	b289      	uxth	r1, r1
 8006450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006454:	4577      	cmp	r7, lr
 8006456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800645a:	f849 1b04 	str.w	r1, [r9], #4
 800645e:	d8e3      	bhi.n	8006428 <__multiply+0xb0>
 8006460:	9a01      	ldr	r2, [sp, #4]
 8006462:	f845 c002 	str.w	ip, [r5, r2]
 8006466:	9a03      	ldr	r2, [sp, #12]
 8006468:	3304      	adds	r3, #4
 800646a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800646e:	f1b9 0f00 	cmp.w	r9, #0
 8006472:	d021      	beq.n	80064b8 <__multiply+0x140>
 8006474:	46ae      	mov	lr, r5
 8006476:	f04f 0a00 	mov.w	sl, #0
 800647a:	6829      	ldr	r1, [r5, #0]
 800647c:	f104 0c14 	add.w	ip, r4, #20
 8006480:	f8bc b000 	ldrh.w	fp, [ip]
 8006484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006488:	b289      	uxth	r1, r1
 800648a:	fb09 220b 	mla	r2, r9, fp, r2
 800648e:	4452      	add	r2, sl
 8006490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006494:	f84e 1b04 	str.w	r1, [lr], #4
 8006498:	f85c 1b04 	ldr.w	r1, [ip], #4
 800649c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064a0:	f8be 1000 	ldrh.w	r1, [lr]
 80064a4:	4567      	cmp	r7, ip
 80064a6:	fb09 110a 	mla	r1, r9, sl, r1
 80064aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80064ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064b2:	d8e5      	bhi.n	8006480 <__multiply+0x108>
 80064b4:	9a01      	ldr	r2, [sp, #4]
 80064b6:	50a9      	str	r1, [r5, r2]
 80064b8:	3504      	adds	r5, #4
 80064ba:	e79a      	b.n	80063f2 <__multiply+0x7a>
 80064bc:	3e01      	subs	r6, #1
 80064be:	e79c      	b.n	80063fa <__multiply+0x82>
 80064c0:	0800744c 	.word	0x0800744c
 80064c4:	0800745d 	.word	0x0800745d

080064c8 <__pow5mult>:
 80064c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	4615      	mov	r5, r2
 80064ce:	f012 0203 	ands.w	r2, r2, #3
 80064d2:	4606      	mov	r6, r0
 80064d4:	460f      	mov	r7, r1
 80064d6:	d007      	beq.n	80064e8 <__pow5mult+0x20>
 80064d8:	4c25      	ldr	r4, [pc, #148]	; (8006570 <__pow5mult+0xa8>)
 80064da:	3a01      	subs	r2, #1
 80064dc:	2300      	movs	r3, #0
 80064de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064e2:	f7ff fe9f 	bl	8006224 <__multadd>
 80064e6:	4607      	mov	r7, r0
 80064e8:	10ad      	asrs	r5, r5, #2
 80064ea:	d03d      	beq.n	8006568 <__pow5mult+0xa0>
 80064ec:	69f4      	ldr	r4, [r6, #28]
 80064ee:	b97c      	cbnz	r4, 8006510 <__pow5mult+0x48>
 80064f0:	2010      	movs	r0, #16
 80064f2:	f7ff fd81 	bl	8005ff8 <malloc>
 80064f6:	4602      	mov	r2, r0
 80064f8:	61f0      	str	r0, [r6, #28]
 80064fa:	b928      	cbnz	r0, 8006508 <__pow5mult+0x40>
 80064fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006500:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <__pow5mult+0xac>)
 8006502:	481d      	ldr	r0, [pc, #116]	; (8006578 <__pow5mult+0xb0>)
 8006504:	f000 fbde 	bl	8006cc4 <__assert_func>
 8006508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800650c:	6004      	str	r4, [r0, #0]
 800650e:	60c4      	str	r4, [r0, #12]
 8006510:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006518:	b94c      	cbnz	r4, 800652e <__pow5mult+0x66>
 800651a:	f240 2171 	movw	r1, #625	; 0x271
 800651e:	4630      	mov	r0, r6
 8006520:	f7ff ff14 	bl	800634c <__i2b>
 8006524:	2300      	movs	r3, #0
 8006526:	4604      	mov	r4, r0
 8006528:	f8c8 0008 	str.w	r0, [r8, #8]
 800652c:	6003      	str	r3, [r0, #0]
 800652e:	f04f 0900 	mov.w	r9, #0
 8006532:	07eb      	lsls	r3, r5, #31
 8006534:	d50a      	bpl.n	800654c <__pow5mult+0x84>
 8006536:	4639      	mov	r1, r7
 8006538:	4622      	mov	r2, r4
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ff1c 	bl	8006378 <__multiply>
 8006540:	4680      	mov	r8, r0
 8006542:	4639      	mov	r1, r7
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff fe4b 	bl	80061e0 <_Bfree>
 800654a:	4647      	mov	r7, r8
 800654c:	106d      	asrs	r5, r5, #1
 800654e:	d00b      	beq.n	8006568 <__pow5mult+0xa0>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	b938      	cbnz	r0, 8006564 <__pow5mult+0x9c>
 8006554:	4622      	mov	r2, r4
 8006556:	4621      	mov	r1, r4
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff ff0d 	bl	8006378 <__multiply>
 800655e:	6020      	str	r0, [r4, #0]
 8006560:	f8c0 9000 	str.w	r9, [r0]
 8006564:	4604      	mov	r4, r0
 8006566:	e7e4      	b.n	8006532 <__pow5mult+0x6a>
 8006568:	4638      	mov	r0, r7
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	bf00      	nop
 8006570:	080075a8 	.word	0x080075a8
 8006574:	080073dd 	.word	0x080073dd
 8006578:	0800745d 	.word	0x0800745d

0800657c <__lshift>:
 800657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006580:	460c      	mov	r4, r1
 8006582:	4607      	mov	r7, r0
 8006584:	4691      	mov	r9, r2
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	6849      	ldr	r1, [r1, #4]
 800658a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006594:	f108 0601 	add.w	r6, r8, #1
 8006598:	42b3      	cmp	r3, r6
 800659a:	db0b      	blt.n	80065b4 <__lshift+0x38>
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff fddf 	bl	8006160 <_Balloc>
 80065a2:	4605      	mov	r5, r0
 80065a4:	b948      	cbnz	r0, 80065ba <__lshift+0x3e>
 80065a6:	4602      	mov	r2, r0
 80065a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80065ac:	4b27      	ldr	r3, [pc, #156]	; (800664c <__lshift+0xd0>)
 80065ae:	4828      	ldr	r0, [pc, #160]	; (8006650 <__lshift+0xd4>)
 80065b0:	f000 fb88 	bl	8006cc4 <__assert_func>
 80065b4:	3101      	adds	r1, #1
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	e7ee      	b.n	8006598 <__lshift+0x1c>
 80065ba:	2300      	movs	r3, #0
 80065bc:	f100 0114 	add.w	r1, r0, #20
 80065c0:	f100 0210 	add.w	r2, r0, #16
 80065c4:	4618      	mov	r0, r3
 80065c6:	4553      	cmp	r3, sl
 80065c8:	db33      	blt.n	8006632 <__lshift+0xb6>
 80065ca:	6920      	ldr	r0, [r4, #16]
 80065cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065d0:	f104 0314 	add.w	r3, r4, #20
 80065d4:	f019 091f 	ands.w	r9, r9, #31
 80065d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065e0:	d02b      	beq.n	800663a <__lshift+0xbe>
 80065e2:	468a      	mov	sl, r1
 80065e4:	2200      	movs	r2, #0
 80065e6:	f1c9 0e20 	rsb	lr, r9, #32
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	fa00 f009 	lsl.w	r0, r0, r9
 80065f0:	4310      	orrs	r0, r2
 80065f2:	f84a 0b04 	str.w	r0, [sl], #4
 80065f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fa:	459c      	cmp	ip, r3
 80065fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006600:	d8f3      	bhi.n	80065ea <__lshift+0x6e>
 8006602:	ebac 0304 	sub.w	r3, ip, r4
 8006606:	3b15      	subs	r3, #21
 8006608:	f023 0303 	bic.w	r3, r3, #3
 800660c:	3304      	adds	r3, #4
 800660e:	f104 0015 	add.w	r0, r4, #21
 8006612:	4584      	cmp	ip, r0
 8006614:	bf38      	it	cc
 8006616:	2304      	movcc	r3, #4
 8006618:	50ca      	str	r2, [r1, r3]
 800661a:	b10a      	cbz	r2, 8006620 <__lshift+0xa4>
 800661c:	f108 0602 	add.w	r6, r8, #2
 8006620:	3e01      	subs	r6, #1
 8006622:	4638      	mov	r0, r7
 8006624:	4621      	mov	r1, r4
 8006626:	612e      	str	r6, [r5, #16]
 8006628:	f7ff fdda 	bl	80061e0 <_Bfree>
 800662c:	4628      	mov	r0, r5
 800662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006632:	f842 0f04 	str.w	r0, [r2, #4]!
 8006636:	3301      	adds	r3, #1
 8006638:	e7c5      	b.n	80065c6 <__lshift+0x4a>
 800663a:	3904      	subs	r1, #4
 800663c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006640:	459c      	cmp	ip, r3
 8006642:	f841 2f04 	str.w	r2, [r1, #4]!
 8006646:	d8f9      	bhi.n	800663c <__lshift+0xc0>
 8006648:	e7ea      	b.n	8006620 <__lshift+0xa4>
 800664a:	bf00      	nop
 800664c:	0800744c 	.word	0x0800744c
 8006650:	0800745d 	.word	0x0800745d

08006654 <__mcmp>:
 8006654:	4603      	mov	r3, r0
 8006656:	690a      	ldr	r2, [r1, #16]
 8006658:	6900      	ldr	r0, [r0, #16]
 800665a:	b530      	push	{r4, r5, lr}
 800665c:	1a80      	subs	r0, r0, r2
 800665e:	d10d      	bne.n	800667c <__mcmp+0x28>
 8006660:	3314      	adds	r3, #20
 8006662:	3114      	adds	r1, #20
 8006664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800666c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006674:	4295      	cmp	r5, r2
 8006676:	d002      	beq.n	800667e <__mcmp+0x2a>
 8006678:	d304      	bcc.n	8006684 <__mcmp+0x30>
 800667a:	2001      	movs	r0, #1
 800667c:	bd30      	pop	{r4, r5, pc}
 800667e:	42a3      	cmp	r3, r4
 8006680:	d3f4      	bcc.n	800666c <__mcmp+0x18>
 8006682:	e7fb      	b.n	800667c <__mcmp+0x28>
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	e7f8      	b.n	800667c <__mcmp+0x28>
	...

0800668c <__mdiff>:
 800668c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	460d      	mov	r5, r1
 8006692:	4607      	mov	r7, r0
 8006694:	4611      	mov	r1, r2
 8006696:	4628      	mov	r0, r5
 8006698:	4614      	mov	r4, r2
 800669a:	f7ff ffdb 	bl	8006654 <__mcmp>
 800669e:	1e06      	subs	r6, r0, #0
 80066a0:	d111      	bne.n	80066c6 <__mdiff+0x3a>
 80066a2:	4631      	mov	r1, r6
 80066a4:	4638      	mov	r0, r7
 80066a6:	f7ff fd5b 	bl	8006160 <_Balloc>
 80066aa:	4602      	mov	r2, r0
 80066ac:	b928      	cbnz	r0, 80066ba <__mdiff+0x2e>
 80066ae:	f240 2137 	movw	r1, #567	; 0x237
 80066b2:	4b3a      	ldr	r3, [pc, #232]	; (800679c <__mdiff+0x110>)
 80066b4:	483a      	ldr	r0, [pc, #232]	; (80067a0 <__mdiff+0x114>)
 80066b6:	f000 fb05 	bl	8006cc4 <__assert_func>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80066c0:	4610      	mov	r0, r2
 80066c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	bfa4      	itt	ge
 80066c8:	4623      	movge	r3, r4
 80066ca:	462c      	movge	r4, r5
 80066cc:	4638      	mov	r0, r7
 80066ce:	6861      	ldr	r1, [r4, #4]
 80066d0:	bfa6      	itte	ge
 80066d2:	461d      	movge	r5, r3
 80066d4:	2600      	movge	r6, #0
 80066d6:	2601      	movlt	r6, #1
 80066d8:	f7ff fd42 	bl	8006160 <_Balloc>
 80066dc:	4602      	mov	r2, r0
 80066de:	b918      	cbnz	r0, 80066e8 <__mdiff+0x5c>
 80066e0:	f240 2145 	movw	r1, #581	; 0x245
 80066e4:	4b2d      	ldr	r3, [pc, #180]	; (800679c <__mdiff+0x110>)
 80066e6:	e7e5      	b.n	80066b4 <__mdiff+0x28>
 80066e8:	f102 0814 	add.w	r8, r2, #20
 80066ec:	46c2      	mov	sl, r8
 80066ee:	f04f 0c00 	mov.w	ip, #0
 80066f2:	6927      	ldr	r7, [r4, #16]
 80066f4:	60c6      	str	r6, [r0, #12]
 80066f6:	692e      	ldr	r6, [r5, #16]
 80066f8:	f104 0014 	add.w	r0, r4, #20
 80066fc:	f105 0914 	add.w	r9, r5, #20
 8006700:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006704:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006708:	3410      	adds	r4, #16
 800670a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800670e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006712:	fa1f f18b 	uxth.w	r1, fp
 8006716:	4461      	add	r1, ip
 8006718:	fa1f fc83 	uxth.w	ip, r3
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	eba1 010c 	sub.w	r1, r1, ip
 8006722:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006726:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800672a:	b289      	uxth	r1, r1
 800672c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006730:	454e      	cmp	r6, r9
 8006732:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006736:	f84a 1b04 	str.w	r1, [sl], #4
 800673a:	d8e6      	bhi.n	800670a <__mdiff+0x7e>
 800673c:	1b73      	subs	r3, r6, r5
 800673e:	3b15      	subs	r3, #21
 8006740:	f023 0303 	bic.w	r3, r3, #3
 8006744:	3515      	adds	r5, #21
 8006746:	3304      	adds	r3, #4
 8006748:	42ae      	cmp	r6, r5
 800674a:	bf38      	it	cc
 800674c:	2304      	movcc	r3, #4
 800674e:	4418      	add	r0, r3
 8006750:	4443      	add	r3, r8
 8006752:	461e      	mov	r6, r3
 8006754:	4605      	mov	r5, r0
 8006756:	4575      	cmp	r5, lr
 8006758:	d30e      	bcc.n	8006778 <__mdiff+0xec>
 800675a:	f10e 0103 	add.w	r1, lr, #3
 800675e:	1a09      	subs	r1, r1, r0
 8006760:	f021 0103 	bic.w	r1, r1, #3
 8006764:	3803      	subs	r0, #3
 8006766:	4586      	cmp	lr, r0
 8006768:	bf38      	it	cc
 800676a:	2100      	movcc	r1, #0
 800676c:	440b      	add	r3, r1
 800676e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006772:	b189      	cbz	r1, 8006798 <__mdiff+0x10c>
 8006774:	6117      	str	r7, [r2, #16]
 8006776:	e7a3      	b.n	80066c0 <__mdiff+0x34>
 8006778:	f855 8b04 	ldr.w	r8, [r5], #4
 800677c:	fa1f f188 	uxth.w	r1, r8
 8006780:	4461      	add	r1, ip
 8006782:	140c      	asrs	r4, r1, #16
 8006784:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006788:	b289      	uxth	r1, r1
 800678a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800678e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006792:	f846 1b04 	str.w	r1, [r6], #4
 8006796:	e7de      	b.n	8006756 <__mdiff+0xca>
 8006798:	3f01      	subs	r7, #1
 800679a:	e7e8      	b.n	800676e <__mdiff+0xe2>
 800679c:	0800744c 	.word	0x0800744c
 80067a0:	0800745d 	.word	0x0800745d

080067a4 <__d2b>:
 80067a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a6:	2101      	movs	r1, #1
 80067a8:	4617      	mov	r7, r2
 80067aa:	461c      	mov	r4, r3
 80067ac:	9e08      	ldr	r6, [sp, #32]
 80067ae:	f7ff fcd7 	bl	8006160 <_Balloc>
 80067b2:	4605      	mov	r5, r0
 80067b4:	b930      	cbnz	r0, 80067c4 <__d2b+0x20>
 80067b6:	4602      	mov	r2, r0
 80067b8:	f240 310f 	movw	r1, #783	; 0x30f
 80067bc:	4b22      	ldr	r3, [pc, #136]	; (8006848 <__d2b+0xa4>)
 80067be:	4823      	ldr	r0, [pc, #140]	; (800684c <__d2b+0xa8>)
 80067c0:	f000 fa80 	bl	8006cc4 <__assert_func>
 80067c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80067c8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80067cc:	bb24      	cbnz	r4, 8006818 <__d2b+0x74>
 80067ce:	2f00      	cmp	r7, #0
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	d026      	beq.n	8006822 <__d2b+0x7e>
 80067d4:	4668      	mov	r0, sp
 80067d6:	9700      	str	r7, [sp, #0]
 80067d8:	f7ff fd8a 	bl	80062f0 <__lo0bits>
 80067dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067e0:	b1e8      	cbz	r0, 800681e <__d2b+0x7a>
 80067e2:	f1c0 0320 	rsb	r3, r0, #32
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	430b      	orrs	r3, r1
 80067ec:	40c2      	lsrs	r2, r0
 80067ee:	616b      	str	r3, [r5, #20]
 80067f0:	9201      	str	r2, [sp, #4]
 80067f2:	9b01      	ldr	r3, [sp, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bf14      	ite	ne
 80067f8:	2102      	movne	r1, #2
 80067fa:	2101      	moveq	r1, #1
 80067fc:	61ab      	str	r3, [r5, #24]
 80067fe:	6129      	str	r1, [r5, #16]
 8006800:	b1bc      	cbz	r4, 8006832 <__d2b+0x8e>
 8006802:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006806:	4404      	add	r4, r0
 8006808:	6034      	str	r4, [r6, #0]
 800680a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006810:	6018      	str	r0, [r3, #0]
 8006812:	4628      	mov	r0, r5
 8006814:	b003      	add	sp, #12
 8006816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800681c:	e7d7      	b.n	80067ce <__d2b+0x2a>
 800681e:	6169      	str	r1, [r5, #20]
 8006820:	e7e7      	b.n	80067f2 <__d2b+0x4e>
 8006822:	a801      	add	r0, sp, #4
 8006824:	f7ff fd64 	bl	80062f0 <__lo0bits>
 8006828:	9b01      	ldr	r3, [sp, #4]
 800682a:	2101      	movs	r1, #1
 800682c:	616b      	str	r3, [r5, #20]
 800682e:	3020      	adds	r0, #32
 8006830:	e7e5      	b.n	80067fe <__d2b+0x5a>
 8006832:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006836:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800683a:	6030      	str	r0, [r6, #0]
 800683c:	6918      	ldr	r0, [r3, #16]
 800683e:	f7ff fd37 	bl	80062b0 <__hi0bits>
 8006842:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006846:	e7e2      	b.n	800680e <__d2b+0x6a>
 8006848:	0800744c 	.word	0x0800744c
 800684c:	0800745d 	.word	0x0800745d

08006850 <__ssputs_r>:
 8006850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006854:	461f      	mov	r7, r3
 8006856:	688e      	ldr	r6, [r1, #8]
 8006858:	4682      	mov	sl, r0
 800685a:	42be      	cmp	r6, r7
 800685c:	460c      	mov	r4, r1
 800685e:	4690      	mov	r8, r2
 8006860:	680b      	ldr	r3, [r1, #0]
 8006862:	d82c      	bhi.n	80068be <__ssputs_r+0x6e>
 8006864:	898a      	ldrh	r2, [r1, #12]
 8006866:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800686a:	d026      	beq.n	80068ba <__ssputs_r+0x6a>
 800686c:	6965      	ldr	r5, [r4, #20]
 800686e:	6909      	ldr	r1, [r1, #16]
 8006870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006874:	eba3 0901 	sub.w	r9, r3, r1
 8006878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800687c:	1c7b      	adds	r3, r7, #1
 800687e:	444b      	add	r3, r9
 8006880:	106d      	asrs	r5, r5, #1
 8006882:	429d      	cmp	r5, r3
 8006884:	bf38      	it	cc
 8006886:	461d      	movcc	r5, r3
 8006888:	0553      	lsls	r3, r2, #21
 800688a:	d527      	bpl.n	80068dc <__ssputs_r+0x8c>
 800688c:	4629      	mov	r1, r5
 800688e:	f7ff fbdb 	bl	8006048 <_malloc_r>
 8006892:	4606      	mov	r6, r0
 8006894:	b360      	cbz	r0, 80068f0 <__ssputs_r+0xa0>
 8006896:	464a      	mov	r2, r9
 8006898:	6921      	ldr	r1, [r4, #16]
 800689a:	f000 fa05 	bl	8006ca8 <memcpy>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	6126      	str	r6, [r4, #16]
 80068ac:	444e      	add	r6, r9
 80068ae:	6026      	str	r6, [r4, #0]
 80068b0:	463e      	mov	r6, r7
 80068b2:	6165      	str	r5, [r4, #20]
 80068b4:	eba5 0509 	sub.w	r5, r5, r9
 80068b8:	60a5      	str	r5, [r4, #8]
 80068ba:	42be      	cmp	r6, r7
 80068bc:	d900      	bls.n	80068c0 <__ssputs_r+0x70>
 80068be:	463e      	mov	r6, r7
 80068c0:	4632      	mov	r2, r6
 80068c2:	4641      	mov	r1, r8
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	f000 f9c5 	bl	8006c54 <memmove>
 80068ca:	2000      	movs	r0, #0
 80068cc:	68a3      	ldr	r3, [r4, #8]
 80068ce:	1b9b      	subs	r3, r3, r6
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	4433      	add	r3, r6
 80068d6:	6023      	str	r3, [r4, #0]
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	462a      	mov	r2, r5
 80068de:	f000 fa35 	bl	8006d4c <_realloc_r>
 80068e2:	4606      	mov	r6, r0
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d1e0      	bne.n	80068aa <__ssputs_r+0x5a>
 80068e8:	4650      	mov	r0, sl
 80068ea:	6921      	ldr	r1, [r4, #16]
 80068ec:	f7ff fb3c 	bl	8005f68 <_free_r>
 80068f0:	230c      	movs	r3, #12
 80068f2:	f8ca 3000 	str.w	r3, [sl]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	e7e9      	b.n	80068d8 <__ssputs_r+0x88>

08006904 <_svfiprintf_r>:
 8006904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	4698      	mov	r8, r3
 800690a:	898b      	ldrh	r3, [r1, #12]
 800690c:	4607      	mov	r7, r0
 800690e:	061b      	lsls	r3, r3, #24
 8006910:	460d      	mov	r5, r1
 8006912:	4614      	mov	r4, r2
 8006914:	b09d      	sub	sp, #116	; 0x74
 8006916:	d50e      	bpl.n	8006936 <_svfiprintf_r+0x32>
 8006918:	690b      	ldr	r3, [r1, #16]
 800691a:	b963      	cbnz	r3, 8006936 <_svfiprintf_r+0x32>
 800691c:	2140      	movs	r1, #64	; 0x40
 800691e:	f7ff fb93 	bl	8006048 <_malloc_r>
 8006922:	6028      	str	r0, [r5, #0]
 8006924:	6128      	str	r0, [r5, #16]
 8006926:	b920      	cbnz	r0, 8006932 <_svfiprintf_r+0x2e>
 8006928:	230c      	movs	r3, #12
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	e0d0      	b.n	8006ad4 <_svfiprintf_r+0x1d0>
 8006932:	2340      	movs	r3, #64	; 0x40
 8006934:	616b      	str	r3, [r5, #20]
 8006936:	2300      	movs	r3, #0
 8006938:	9309      	str	r3, [sp, #36]	; 0x24
 800693a:	2320      	movs	r3, #32
 800693c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006940:	2330      	movs	r3, #48	; 0x30
 8006942:	f04f 0901 	mov.w	r9, #1
 8006946:	f8cd 800c 	str.w	r8, [sp, #12]
 800694a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006aec <_svfiprintf_r+0x1e8>
 800694e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006952:	4623      	mov	r3, r4
 8006954:	469a      	mov	sl, r3
 8006956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800695a:	b10a      	cbz	r2, 8006960 <_svfiprintf_r+0x5c>
 800695c:	2a25      	cmp	r2, #37	; 0x25
 800695e:	d1f9      	bne.n	8006954 <_svfiprintf_r+0x50>
 8006960:	ebba 0b04 	subs.w	fp, sl, r4
 8006964:	d00b      	beq.n	800697e <_svfiprintf_r+0x7a>
 8006966:	465b      	mov	r3, fp
 8006968:	4622      	mov	r2, r4
 800696a:	4629      	mov	r1, r5
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ff6f 	bl	8006850 <__ssputs_r>
 8006972:	3001      	adds	r0, #1
 8006974:	f000 80a9 	beq.w	8006aca <_svfiprintf_r+0x1c6>
 8006978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800697a:	445a      	add	r2, fp
 800697c:	9209      	str	r2, [sp, #36]	; 0x24
 800697e:	f89a 3000 	ldrb.w	r3, [sl]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80a1 	beq.w	8006aca <_svfiprintf_r+0x1c6>
 8006988:	2300      	movs	r3, #0
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006992:	f10a 0a01 	add.w	sl, sl, #1
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	9307      	str	r3, [sp, #28]
 800699a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800699e:	931a      	str	r3, [sp, #104]	; 0x68
 80069a0:	4654      	mov	r4, sl
 80069a2:	2205      	movs	r2, #5
 80069a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a8:	4850      	ldr	r0, [pc, #320]	; (8006aec <_svfiprintf_r+0x1e8>)
 80069aa:	f7fe fc62 	bl	8005272 <memchr>
 80069ae:	9a04      	ldr	r2, [sp, #16]
 80069b0:	b9d8      	cbnz	r0, 80069ea <_svfiprintf_r+0xe6>
 80069b2:	06d0      	lsls	r0, r2, #27
 80069b4:	bf44      	itt	mi
 80069b6:	2320      	movmi	r3, #32
 80069b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069bc:	0711      	lsls	r1, r2, #28
 80069be:	bf44      	itt	mi
 80069c0:	232b      	movmi	r3, #43	; 0x2b
 80069c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c6:	f89a 3000 	ldrb.w	r3, [sl]
 80069ca:	2b2a      	cmp	r3, #42	; 0x2a
 80069cc:	d015      	beq.n	80069fa <_svfiprintf_r+0xf6>
 80069ce:	4654      	mov	r4, sl
 80069d0:	2000      	movs	r0, #0
 80069d2:	f04f 0c0a 	mov.w	ip, #10
 80069d6:	9a07      	ldr	r2, [sp, #28]
 80069d8:	4621      	mov	r1, r4
 80069da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069de:	3b30      	subs	r3, #48	; 0x30
 80069e0:	2b09      	cmp	r3, #9
 80069e2:	d94d      	bls.n	8006a80 <_svfiprintf_r+0x17c>
 80069e4:	b1b0      	cbz	r0, 8006a14 <_svfiprintf_r+0x110>
 80069e6:	9207      	str	r2, [sp, #28]
 80069e8:	e014      	b.n	8006a14 <_svfiprintf_r+0x110>
 80069ea:	eba0 0308 	sub.w	r3, r0, r8
 80069ee:	fa09 f303 	lsl.w	r3, r9, r3
 80069f2:	4313      	orrs	r3, r2
 80069f4:	46a2      	mov	sl, r4
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	e7d2      	b.n	80069a0 <_svfiprintf_r+0x9c>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	1d19      	adds	r1, r3, #4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	9103      	str	r1, [sp, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bfbb      	ittet	lt
 8006a06:	425b      	neglt	r3, r3
 8006a08:	f042 0202 	orrlt.w	r2, r2, #2
 8006a0c:	9307      	strge	r3, [sp, #28]
 8006a0e:	9307      	strlt	r3, [sp, #28]
 8006a10:	bfb8      	it	lt
 8006a12:	9204      	strlt	r2, [sp, #16]
 8006a14:	7823      	ldrb	r3, [r4, #0]
 8006a16:	2b2e      	cmp	r3, #46	; 0x2e
 8006a18:	d10c      	bne.n	8006a34 <_svfiprintf_r+0x130>
 8006a1a:	7863      	ldrb	r3, [r4, #1]
 8006a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1e:	d134      	bne.n	8006a8a <_svfiprintf_r+0x186>
 8006a20:	9b03      	ldr	r3, [sp, #12]
 8006a22:	3402      	adds	r4, #2
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	9203      	str	r2, [sp, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfb8      	it	lt
 8006a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a32:	9305      	str	r3, [sp, #20]
 8006a34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006af0 <_svfiprintf_r+0x1ec>
 8006a38:	2203      	movs	r2, #3
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	7821      	ldrb	r1, [r4, #0]
 8006a3e:	f7fe fc18 	bl	8005272 <memchr>
 8006a42:	b138      	cbz	r0, 8006a54 <_svfiprintf_r+0x150>
 8006a44:	2240      	movs	r2, #64	; 0x40
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	eba0 000a 	sub.w	r0, r0, sl
 8006a4c:	4082      	lsls	r2, r0
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	3401      	adds	r4, #1
 8006a52:	9304      	str	r3, [sp, #16]
 8006a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a58:	2206      	movs	r2, #6
 8006a5a:	4826      	ldr	r0, [pc, #152]	; (8006af4 <_svfiprintf_r+0x1f0>)
 8006a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a60:	f7fe fc07 	bl	8005272 <memchr>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d038      	beq.n	8006ada <_svfiprintf_r+0x1d6>
 8006a68:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <_svfiprintf_r+0x1f4>)
 8006a6a:	bb1b      	cbnz	r3, 8006ab4 <_svfiprintf_r+0x1b0>
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	3307      	adds	r3, #7
 8006a70:	f023 0307 	bic.w	r3, r3, #7
 8006a74:	3308      	adds	r3, #8
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	4433      	add	r3, r6
 8006a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7e:	e768      	b.n	8006952 <_svfiprintf_r+0x4e>
 8006a80:	460c      	mov	r4, r1
 8006a82:	2001      	movs	r0, #1
 8006a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a88:	e7a6      	b.n	80069d8 <_svfiprintf_r+0xd4>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f04f 0c0a 	mov.w	ip, #10
 8006a90:	4619      	mov	r1, r3
 8006a92:	3401      	adds	r4, #1
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	4620      	mov	r0, r4
 8006a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a9c:	3a30      	subs	r2, #48	; 0x30
 8006a9e:	2a09      	cmp	r2, #9
 8006aa0:	d903      	bls.n	8006aaa <_svfiprintf_r+0x1a6>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0c6      	beq.n	8006a34 <_svfiprintf_r+0x130>
 8006aa6:	9105      	str	r1, [sp, #20]
 8006aa8:	e7c4      	b.n	8006a34 <_svfiprintf_r+0x130>
 8006aaa:	4604      	mov	r4, r0
 8006aac:	2301      	movs	r3, #1
 8006aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab2:	e7f0      	b.n	8006a96 <_svfiprintf_r+0x192>
 8006ab4:	ab03      	add	r3, sp, #12
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	462a      	mov	r2, r5
 8006aba:	4638      	mov	r0, r7
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <_svfiprintf_r+0x1f8>)
 8006abe:	a904      	add	r1, sp, #16
 8006ac0:	f7fd fe5c 	bl	800477c <_printf_float>
 8006ac4:	1c42      	adds	r2, r0, #1
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	d1d6      	bne.n	8006a78 <_svfiprintf_r+0x174>
 8006aca:	89ab      	ldrh	r3, [r5, #12]
 8006acc:	065b      	lsls	r3, r3, #25
 8006ace:	f53f af2d 	bmi.w	800692c <_svfiprintf_r+0x28>
 8006ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad4:	b01d      	add	sp, #116	; 0x74
 8006ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ada:	ab03      	add	r3, sp, #12
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	462a      	mov	r2, r5
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <_svfiprintf_r+0x1f8>)
 8006ae4:	a904      	add	r1, sp, #16
 8006ae6:	f7fe f8e9 	bl	8004cbc <_printf_i>
 8006aea:	e7eb      	b.n	8006ac4 <_svfiprintf_r+0x1c0>
 8006aec:	080075b4 	.word	0x080075b4
 8006af0:	080075ba 	.word	0x080075ba
 8006af4:	080075be 	.word	0x080075be
 8006af8:	0800477d 	.word	0x0800477d
 8006afc:	08006851 	.word	0x08006851

08006b00 <__sflush_r>:
 8006b00:	898a      	ldrh	r2, [r1, #12]
 8006b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b04:	4605      	mov	r5, r0
 8006b06:	0710      	lsls	r0, r2, #28
 8006b08:	460c      	mov	r4, r1
 8006b0a:	d457      	bmi.n	8006bbc <__sflush_r+0xbc>
 8006b0c:	684b      	ldr	r3, [r1, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc04      	bgt.n	8006b1c <__sflush_r+0x1c>
 8006b12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc01      	bgt.n	8006b1c <__sflush_r+0x1c>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b1e:	2e00      	cmp	r6, #0
 8006b20:	d0fa      	beq.n	8006b18 <__sflush_r+0x18>
 8006b22:	2300      	movs	r3, #0
 8006b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b28:	682f      	ldr	r7, [r5, #0]
 8006b2a:	6a21      	ldr	r1, [r4, #32]
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	d032      	beq.n	8006b96 <__sflush_r+0x96>
 8006b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	075a      	lsls	r2, r3, #29
 8006b36:	d505      	bpl.n	8006b44 <__sflush_r+0x44>
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	1ac0      	subs	r0, r0, r3
 8006b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b3e:	b10b      	cbz	r3, 8006b44 <__sflush_r+0x44>
 8006b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b42:	1ac0      	subs	r0, r0, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	4602      	mov	r2, r0
 8006b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	6a21      	ldr	r1, [r4, #32]
 8006b4e:	47b0      	blx	r6
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	d106      	bne.n	8006b64 <__sflush_r+0x64>
 8006b56:	6829      	ldr	r1, [r5, #0]
 8006b58:	291d      	cmp	r1, #29
 8006b5a:	d82b      	bhi.n	8006bb4 <__sflush_r+0xb4>
 8006b5c:	4a28      	ldr	r2, [pc, #160]	; (8006c00 <__sflush_r+0x100>)
 8006b5e:	410a      	asrs	r2, r1
 8006b60:	07d6      	lsls	r6, r2, #31
 8006b62:	d427      	bmi.n	8006bb4 <__sflush_r+0xb4>
 8006b64:	2200      	movs	r2, #0
 8006b66:	6062      	str	r2, [r4, #4]
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	04d9      	lsls	r1, r3, #19
 8006b6c:	6022      	str	r2, [r4, #0]
 8006b6e:	d504      	bpl.n	8006b7a <__sflush_r+0x7a>
 8006b70:	1c42      	adds	r2, r0, #1
 8006b72:	d101      	bne.n	8006b78 <__sflush_r+0x78>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b903      	cbnz	r3, 8006b7a <__sflush_r+0x7a>
 8006b78:	6560      	str	r0, [r4, #84]	; 0x54
 8006b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b7c:	602f      	str	r7, [r5, #0]
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	d0ca      	beq.n	8006b18 <__sflush_r+0x18>
 8006b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b86:	4299      	cmp	r1, r3
 8006b88:	d002      	beq.n	8006b90 <__sflush_r+0x90>
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f7ff f9ec 	bl	8005f68 <_free_r>
 8006b90:	2000      	movs	r0, #0
 8006b92:	6360      	str	r0, [r4, #52]	; 0x34
 8006b94:	e7c1      	b.n	8006b1a <__sflush_r+0x1a>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b0      	blx	r6
 8006b9c:	1c41      	adds	r1, r0, #1
 8006b9e:	d1c8      	bne.n	8006b32 <__sflush_r+0x32>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0c5      	beq.n	8006b32 <__sflush_r+0x32>
 8006ba6:	2b1d      	cmp	r3, #29
 8006ba8:	d001      	beq.n	8006bae <__sflush_r+0xae>
 8006baa:	2b16      	cmp	r3, #22
 8006bac:	d101      	bne.n	8006bb2 <__sflush_r+0xb2>
 8006bae:	602f      	str	r7, [r5, #0]
 8006bb0:	e7b2      	b.n	8006b18 <__sflush_r+0x18>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	e7ae      	b.n	8006b1a <__sflush_r+0x1a>
 8006bbc:	690f      	ldr	r7, [r1, #16]
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	d0aa      	beq.n	8006b18 <__sflush_r+0x18>
 8006bc2:	0793      	lsls	r3, r2, #30
 8006bc4:	bf18      	it	ne
 8006bc6:	2300      	movne	r3, #0
 8006bc8:	680e      	ldr	r6, [r1, #0]
 8006bca:	bf08      	it	eq
 8006bcc:	694b      	ldreq	r3, [r1, #20]
 8006bce:	1bf6      	subs	r6, r6, r7
 8006bd0:	600f      	str	r7, [r1, #0]
 8006bd2:	608b      	str	r3, [r1, #8]
 8006bd4:	2e00      	cmp	r6, #0
 8006bd6:	dd9f      	ble.n	8006b18 <__sflush_r+0x18>
 8006bd8:	4633      	mov	r3, r6
 8006bda:	463a      	mov	r2, r7
 8006bdc:	4628      	mov	r0, r5
 8006bde:	6a21      	ldr	r1, [r4, #32]
 8006be0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006be4:	47e0      	blx	ip
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dc06      	bgt.n	8006bf8 <__sflush_r+0xf8>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	e790      	b.n	8006b1a <__sflush_r+0x1a>
 8006bf8:	4407      	add	r7, r0
 8006bfa:	1a36      	subs	r6, r6, r0
 8006bfc:	e7ea      	b.n	8006bd4 <__sflush_r+0xd4>
 8006bfe:	bf00      	nop
 8006c00:	dfbffffe 	.word	0xdfbffffe

08006c04 <_fflush_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	690b      	ldr	r3, [r1, #16]
 8006c08:	4605      	mov	r5, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	b913      	cbnz	r3, 8006c14 <_fflush_r+0x10>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	4628      	mov	r0, r5
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	b118      	cbz	r0, 8006c1e <_fflush_r+0x1a>
 8006c16:	6a03      	ldr	r3, [r0, #32]
 8006c18:	b90b      	cbnz	r3, 8006c1e <_fflush_r+0x1a>
 8006c1a:	f7fe f9fd 	bl	8005018 <__sinit>
 8006c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f3      	beq.n	8006c0e <_fflush_r+0xa>
 8006c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c28:	07d0      	lsls	r0, r2, #31
 8006c2a:	d404      	bmi.n	8006c36 <_fflush_r+0x32>
 8006c2c:	0599      	lsls	r1, r3, #22
 8006c2e:	d402      	bmi.n	8006c36 <_fflush_r+0x32>
 8006c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c32:	f7fe fb1c 	bl	800526e <__retarget_lock_acquire_recursive>
 8006c36:	4628      	mov	r0, r5
 8006c38:	4621      	mov	r1, r4
 8006c3a:	f7ff ff61 	bl	8006b00 <__sflush_r>
 8006c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c40:	4605      	mov	r5, r0
 8006c42:	07da      	lsls	r2, r3, #31
 8006c44:	d4e4      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	059b      	lsls	r3, r3, #22
 8006c4a:	d4e1      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c4e:	f7fe fb0f 	bl	8005270 <__retarget_lock_release_recursive>
 8006c52:	e7dd      	b.n	8006c10 <_fflush_r+0xc>

08006c54 <memmove>:
 8006c54:	4288      	cmp	r0, r1
 8006c56:	b510      	push	{r4, lr}
 8006c58:	eb01 0402 	add.w	r4, r1, r2
 8006c5c:	d902      	bls.n	8006c64 <memmove+0x10>
 8006c5e:	4284      	cmp	r4, r0
 8006c60:	4623      	mov	r3, r4
 8006c62:	d807      	bhi.n	8006c74 <memmove+0x20>
 8006c64:	1e43      	subs	r3, r0, #1
 8006c66:	42a1      	cmp	r1, r4
 8006c68:	d008      	beq.n	8006c7c <memmove+0x28>
 8006c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c72:	e7f8      	b.n	8006c66 <memmove+0x12>
 8006c74:	4601      	mov	r1, r0
 8006c76:	4402      	add	r2, r0
 8006c78:	428a      	cmp	r2, r1
 8006c7a:	d100      	bne.n	8006c7e <memmove+0x2a>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c86:	e7f7      	b.n	8006c78 <memmove+0x24>

08006c88 <_sbrk_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4d05      	ldr	r5, [pc, #20]	; (8006ca4 <_sbrk_r+0x1c>)
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f7fa fe32 	bl	80018fc <_sbrk>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_sbrk_r+0x1a>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_sbrk_r+0x1a>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000460 	.word	0x20000460

08006ca8 <memcpy>:
 8006ca8:	440a      	add	r2, r1
 8006caa:	4291      	cmp	r1, r2
 8006cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cb0:	d100      	bne.n	8006cb4 <memcpy+0xc>
 8006cb2:	4770      	bx	lr
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cba:	4291      	cmp	r1, r2
 8006cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cc0:	d1f9      	bne.n	8006cb6 <memcpy+0xe>
 8006cc2:	bd10      	pop	{r4, pc}

08006cc4 <__assert_func>:
 8006cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cc6:	4614      	mov	r4, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <__assert_func+0x2c>)
 8006ccc:	4605      	mov	r5, r0
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68d8      	ldr	r0, [r3, #12]
 8006cd2:	b14c      	cbz	r4, 8006ce8 <__assert_func+0x24>
 8006cd4:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <__assert_func+0x30>)
 8006cd6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cda:	9100      	str	r1, [sp, #0]
 8006cdc:	462b      	mov	r3, r5
 8006cde:	4906      	ldr	r1, [pc, #24]	; (8006cf8 <__assert_func+0x34>)
 8006ce0:	f000 f870 	bl	8006dc4 <fiprintf>
 8006ce4:	f000 f880 	bl	8006de8 <abort>
 8006ce8:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <__assert_func+0x38>)
 8006cea:	461c      	mov	r4, r3
 8006cec:	e7f3      	b.n	8006cd6 <__assert_func+0x12>
 8006cee:	bf00      	nop
 8006cf0:	20000074 	.word	0x20000074
 8006cf4:	080075cf 	.word	0x080075cf
 8006cf8:	080075dc 	.word	0x080075dc
 8006cfc:	0800760a 	.word	0x0800760a

08006d00 <_calloc_r>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	fba1 5402 	umull	r5, r4, r1, r2
 8006d06:	b934      	cbnz	r4, 8006d16 <_calloc_r+0x16>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7ff f99d 	bl	8006048 <_malloc_r>
 8006d0e:	4606      	mov	r6, r0
 8006d10:	b928      	cbnz	r0, 8006d1e <_calloc_r+0x1e>
 8006d12:	4630      	mov	r0, r6
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
 8006d16:	220c      	movs	r2, #12
 8006d18:	2600      	movs	r6, #0
 8006d1a:	6002      	str	r2, [r0, #0]
 8006d1c:	e7f9      	b.n	8006d12 <_calloc_r+0x12>
 8006d1e:	462a      	mov	r2, r5
 8006d20:	4621      	mov	r1, r4
 8006d22:	f7fe fa26 	bl	8005172 <memset>
 8006d26:	e7f4      	b.n	8006d12 <_calloc_r+0x12>

08006d28 <__ascii_mbtowc>:
 8006d28:	b082      	sub	sp, #8
 8006d2a:	b901      	cbnz	r1, 8006d2e <__ascii_mbtowc+0x6>
 8006d2c:	a901      	add	r1, sp, #4
 8006d2e:	b142      	cbz	r2, 8006d42 <__ascii_mbtowc+0x1a>
 8006d30:	b14b      	cbz	r3, 8006d46 <__ascii_mbtowc+0x1e>
 8006d32:	7813      	ldrb	r3, [r2, #0]
 8006d34:	600b      	str	r3, [r1, #0]
 8006d36:	7812      	ldrb	r2, [r2, #0]
 8006d38:	1e10      	subs	r0, r2, #0
 8006d3a:	bf18      	it	ne
 8006d3c:	2001      	movne	r0, #1
 8006d3e:	b002      	add	sp, #8
 8006d40:	4770      	bx	lr
 8006d42:	4610      	mov	r0, r2
 8006d44:	e7fb      	b.n	8006d3e <__ascii_mbtowc+0x16>
 8006d46:	f06f 0001 	mvn.w	r0, #1
 8006d4a:	e7f8      	b.n	8006d3e <__ascii_mbtowc+0x16>

08006d4c <_realloc_r>:
 8006d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d50:	4680      	mov	r8, r0
 8006d52:	4614      	mov	r4, r2
 8006d54:	460e      	mov	r6, r1
 8006d56:	b921      	cbnz	r1, 8006d62 <_realloc_r+0x16>
 8006d58:	4611      	mov	r1, r2
 8006d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5e:	f7ff b973 	b.w	8006048 <_malloc_r>
 8006d62:	b92a      	cbnz	r2, 8006d70 <_realloc_r+0x24>
 8006d64:	f7ff f900 	bl	8005f68 <_free_r>
 8006d68:	4625      	mov	r5, r4
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d70:	f000 f841 	bl	8006df6 <_malloc_usable_size_r>
 8006d74:	4284      	cmp	r4, r0
 8006d76:	4607      	mov	r7, r0
 8006d78:	d802      	bhi.n	8006d80 <_realloc_r+0x34>
 8006d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d7e:	d812      	bhi.n	8006da6 <_realloc_r+0x5a>
 8006d80:	4621      	mov	r1, r4
 8006d82:	4640      	mov	r0, r8
 8006d84:	f7ff f960 	bl	8006048 <_malloc_r>
 8006d88:	4605      	mov	r5, r0
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0ed      	beq.n	8006d6a <_realloc_r+0x1e>
 8006d8e:	42bc      	cmp	r4, r7
 8006d90:	4622      	mov	r2, r4
 8006d92:	4631      	mov	r1, r6
 8006d94:	bf28      	it	cs
 8006d96:	463a      	movcs	r2, r7
 8006d98:	f7ff ff86 	bl	8006ca8 <memcpy>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4640      	mov	r0, r8
 8006da0:	f7ff f8e2 	bl	8005f68 <_free_r>
 8006da4:	e7e1      	b.n	8006d6a <_realloc_r+0x1e>
 8006da6:	4635      	mov	r5, r6
 8006da8:	e7df      	b.n	8006d6a <_realloc_r+0x1e>

08006daa <__ascii_wctomb>:
 8006daa:	4603      	mov	r3, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	b141      	cbz	r1, 8006dc2 <__ascii_wctomb+0x18>
 8006db0:	2aff      	cmp	r2, #255	; 0xff
 8006db2:	d904      	bls.n	8006dbe <__ascii_wctomb+0x14>
 8006db4:	228a      	movs	r2, #138	; 0x8a
 8006db6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	4770      	bx	lr
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	700a      	strb	r2, [r1, #0]
 8006dc2:	4770      	bx	lr

08006dc4 <fiprintf>:
 8006dc4:	b40e      	push	{r1, r2, r3}
 8006dc6:	b503      	push	{r0, r1, lr}
 8006dc8:	4601      	mov	r1, r0
 8006dca:	ab03      	add	r3, sp, #12
 8006dcc:	4805      	ldr	r0, [pc, #20]	; (8006de4 <fiprintf+0x20>)
 8006dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd2:	6800      	ldr	r0, [r0, #0]
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	f000 f83d 	bl	8006e54 <_vfiprintf_r>
 8006dda:	b002      	add	sp, #8
 8006ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de0:	b003      	add	sp, #12
 8006de2:	4770      	bx	lr
 8006de4:	20000074 	.word	0x20000074

08006de8 <abort>:
 8006de8:	2006      	movs	r0, #6
 8006dea:	b508      	push	{r3, lr}
 8006dec:	f000 fa0a 	bl	8007204 <raise>
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7fa fd0f 	bl	8001814 <_exit>

08006df6 <_malloc_usable_size_r>:
 8006df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dfa:	1f18      	subs	r0, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bfbc      	itt	lt
 8006e00:	580b      	ldrlt	r3, [r1, r0]
 8006e02:	18c0      	addlt	r0, r0, r3
 8006e04:	4770      	bx	lr

08006e06 <__sfputc_r>:
 8006e06:	6893      	ldr	r3, [r2, #8]
 8006e08:	b410      	push	{r4}
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	6093      	str	r3, [r2, #8]
 8006e10:	da07      	bge.n	8006e22 <__sfputc_r+0x1c>
 8006e12:	6994      	ldr	r4, [r2, #24]
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	db01      	blt.n	8006e1c <__sfputc_r+0x16>
 8006e18:	290a      	cmp	r1, #10
 8006e1a:	d102      	bne.n	8006e22 <__sfputc_r+0x1c>
 8006e1c:	bc10      	pop	{r4}
 8006e1e:	f000 b933 	b.w	8007088 <__swbuf_r>
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	1c58      	adds	r0, r3, #1
 8006e26:	6010      	str	r0, [r2, #0]
 8006e28:	7019      	strb	r1, [r3, #0]
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	bc10      	pop	{r4}
 8006e2e:	4770      	bx	lr

08006e30 <__sfputs_r>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	4606      	mov	r6, r0
 8006e34:	460f      	mov	r7, r1
 8006e36:	4614      	mov	r4, r2
 8006e38:	18d5      	adds	r5, r2, r3
 8006e3a:	42ac      	cmp	r4, r5
 8006e3c:	d101      	bne.n	8006e42 <__sfputs_r+0x12>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e007      	b.n	8006e52 <__sfputs_r+0x22>
 8006e42:	463a      	mov	r2, r7
 8006e44:	4630      	mov	r0, r6
 8006e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4a:	f7ff ffdc 	bl	8006e06 <__sfputc_r>
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	d1f3      	bne.n	8006e3a <__sfputs_r+0xa>
 8006e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e54 <_vfiprintf_r>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	460d      	mov	r5, r1
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	4698      	mov	r8, r3
 8006e5e:	4606      	mov	r6, r0
 8006e60:	b09d      	sub	sp, #116	; 0x74
 8006e62:	b118      	cbz	r0, 8006e6c <_vfiprintf_r+0x18>
 8006e64:	6a03      	ldr	r3, [r0, #32]
 8006e66:	b90b      	cbnz	r3, 8006e6c <_vfiprintf_r+0x18>
 8006e68:	f7fe f8d6 	bl	8005018 <__sinit>
 8006e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e6e:	07d9      	lsls	r1, r3, #31
 8006e70:	d405      	bmi.n	8006e7e <_vfiprintf_r+0x2a>
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	059a      	lsls	r2, r3, #22
 8006e76:	d402      	bmi.n	8006e7e <_vfiprintf_r+0x2a>
 8006e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e7a:	f7fe f9f8 	bl	800526e <__retarget_lock_acquire_recursive>
 8006e7e:	89ab      	ldrh	r3, [r5, #12]
 8006e80:	071b      	lsls	r3, r3, #28
 8006e82:	d501      	bpl.n	8006e88 <_vfiprintf_r+0x34>
 8006e84:	692b      	ldr	r3, [r5, #16]
 8006e86:	b99b      	cbnz	r3, 8006eb0 <_vfiprintf_r+0x5c>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f000 f93a 	bl	8007104 <__swsetup_r>
 8006e90:	b170      	cbz	r0, 8006eb0 <_vfiprintf_r+0x5c>
 8006e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e94:	07dc      	lsls	r4, r3, #31
 8006e96:	d504      	bpl.n	8006ea2 <_vfiprintf_r+0x4e>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	b01d      	add	sp, #116	; 0x74
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	0598      	lsls	r0, r3, #22
 8006ea6:	d4f7      	bmi.n	8006e98 <_vfiprintf_r+0x44>
 8006ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eaa:	f7fe f9e1 	bl	8005270 <__retarget_lock_release_recursive>
 8006eae:	e7f3      	b.n	8006e98 <_vfiprintf_r+0x44>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb4:	2320      	movs	r3, #32
 8006eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eba:	2330      	movs	r3, #48	; 0x30
 8006ebc:	f04f 0901 	mov.w	r9, #1
 8006ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007074 <_vfiprintf_r+0x220>
 8006ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ecc:	4623      	mov	r3, r4
 8006ece:	469a      	mov	sl, r3
 8006ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed4:	b10a      	cbz	r2, 8006eda <_vfiprintf_r+0x86>
 8006ed6:	2a25      	cmp	r2, #37	; 0x25
 8006ed8:	d1f9      	bne.n	8006ece <_vfiprintf_r+0x7a>
 8006eda:	ebba 0b04 	subs.w	fp, sl, r4
 8006ede:	d00b      	beq.n	8006ef8 <_vfiprintf_r+0xa4>
 8006ee0:	465b      	mov	r3, fp
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f7ff ffa2 	bl	8006e30 <__sfputs_r>
 8006eec:	3001      	adds	r0, #1
 8006eee:	f000 80a9 	beq.w	8007044 <_vfiprintf_r+0x1f0>
 8006ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ef4:	445a      	add	r2, fp
 8006ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80a1 	beq.w	8007044 <_vfiprintf_r+0x1f0>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f04f 32ff 	mov.w	r2, #4294967295
 8006f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f0c:	f10a 0a01 	add.w	sl, sl, #1
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	9307      	str	r3, [sp, #28]
 8006f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f18:	931a      	str	r3, [sp, #104]	; 0x68
 8006f1a:	4654      	mov	r4, sl
 8006f1c:	2205      	movs	r2, #5
 8006f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f22:	4854      	ldr	r0, [pc, #336]	; (8007074 <_vfiprintf_r+0x220>)
 8006f24:	f7fe f9a5 	bl	8005272 <memchr>
 8006f28:	9a04      	ldr	r2, [sp, #16]
 8006f2a:	b9d8      	cbnz	r0, 8006f64 <_vfiprintf_r+0x110>
 8006f2c:	06d1      	lsls	r1, r2, #27
 8006f2e:	bf44      	itt	mi
 8006f30:	2320      	movmi	r3, #32
 8006f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f36:	0713      	lsls	r3, r2, #28
 8006f38:	bf44      	itt	mi
 8006f3a:	232b      	movmi	r3, #43	; 0x2b
 8006f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f40:	f89a 3000 	ldrb.w	r3, [sl]
 8006f44:	2b2a      	cmp	r3, #42	; 0x2a
 8006f46:	d015      	beq.n	8006f74 <_vfiprintf_r+0x120>
 8006f48:	4654      	mov	r4, sl
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	f04f 0c0a 	mov.w	ip, #10
 8006f50:	9a07      	ldr	r2, [sp, #28]
 8006f52:	4621      	mov	r1, r4
 8006f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f58:	3b30      	subs	r3, #48	; 0x30
 8006f5a:	2b09      	cmp	r3, #9
 8006f5c:	d94d      	bls.n	8006ffa <_vfiprintf_r+0x1a6>
 8006f5e:	b1b0      	cbz	r0, 8006f8e <_vfiprintf_r+0x13a>
 8006f60:	9207      	str	r2, [sp, #28]
 8006f62:	e014      	b.n	8006f8e <_vfiprintf_r+0x13a>
 8006f64:	eba0 0308 	sub.w	r3, r0, r8
 8006f68:	fa09 f303 	lsl.w	r3, r9, r3
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	46a2      	mov	sl, r4
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	e7d2      	b.n	8006f1a <_vfiprintf_r+0xc6>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	1d19      	adds	r1, r3, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	9103      	str	r1, [sp, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bfbb      	ittet	lt
 8006f80:	425b      	neglt	r3, r3
 8006f82:	f042 0202 	orrlt.w	r2, r2, #2
 8006f86:	9307      	strge	r3, [sp, #28]
 8006f88:	9307      	strlt	r3, [sp, #28]
 8006f8a:	bfb8      	it	lt
 8006f8c:	9204      	strlt	r2, [sp, #16]
 8006f8e:	7823      	ldrb	r3, [r4, #0]
 8006f90:	2b2e      	cmp	r3, #46	; 0x2e
 8006f92:	d10c      	bne.n	8006fae <_vfiprintf_r+0x15a>
 8006f94:	7863      	ldrb	r3, [r4, #1]
 8006f96:	2b2a      	cmp	r3, #42	; 0x2a
 8006f98:	d134      	bne.n	8007004 <_vfiprintf_r+0x1b0>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	3402      	adds	r4, #2
 8006f9e:	1d1a      	adds	r2, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	9203      	str	r2, [sp, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfb8      	it	lt
 8006fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fac:	9305      	str	r3, [sp, #20]
 8006fae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007078 <_vfiprintf_r+0x224>
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	7821      	ldrb	r1, [r4, #0]
 8006fb8:	f7fe f95b 	bl	8005272 <memchr>
 8006fbc:	b138      	cbz	r0, 8006fce <_vfiprintf_r+0x17a>
 8006fbe:	2240      	movs	r2, #64	; 0x40
 8006fc0:	9b04      	ldr	r3, [sp, #16]
 8006fc2:	eba0 000a 	sub.w	r0, r0, sl
 8006fc6:	4082      	lsls	r2, r0
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	3401      	adds	r4, #1
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd2:	2206      	movs	r2, #6
 8006fd4:	4829      	ldr	r0, [pc, #164]	; (800707c <_vfiprintf_r+0x228>)
 8006fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fda:	f7fe f94a 	bl	8005272 <memchr>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d03f      	beq.n	8007062 <_vfiprintf_r+0x20e>
 8006fe2:	4b27      	ldr	r3, [pc, #156]	; (8007080 <_vfiprintf_r+0x22c>)
 8006fe4:	bb1b      	cbnz	r3, 800702e <_vfiprintf_r+0x1da>
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	3307      	adds	r3, #7
 8006fea:	f023 0307 	bic.w	r3, r3, #7
 8006fee:	3308      	adds	r3, #8
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff4:	443b      	add	r3, r7
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	e768      	b.n	8006ecc <_vfiprintf_r+0x78>
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007002:	e7a6      	b.n	8006f52 <_vfiprintf_r+0xfe>
 8007004:	2300      	movs	r3, #0
 8007006:	f04f 0c0a 	mov.w	ip, #10
 800700a:	4619      	mov	r1, r3
 800700c:	3401      	adds	r4, #1
 800700e:	9305      	str	r3, [sp, #20]
 8007010:	4620      	mov	r0, r4
 8007012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007016:	3a30      	subs	r2, #48	; 0x30
 8007018:	2a09      	cmp	r2, #9
 800701a:	d903      	bls.n	8007024 <_vfiprintf_r+0x1d0>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0c6      	beq.n	8006fae <_vfiprintf_r+0x15a>
 8007020:	9105      	str	r1, [sp, #20]
 8007022:	e7c4      	b.n	8006fae <_vfiprintf_r+0x15a>
 8007024:	4604      	mov	r4, r0
 8007026:	2301      	movs	r3, #1
 8007028:	fb0c 2101 	mla	r1, ip, r1, r2
 800702c:	e7f0      	b.n	8007010 <_vfiprintf_r+0x1bc>
 800702e:	ab03      	add	r3, sp, #12
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	462a      	mov	r2, r5
 8007034:	4630      	mov	r0, r6
 8007036:	4b13      	ldr	r3, [pc, #76]	; (8007084 <_vfiprintf_r+0x230>)
 8007038:	a904      	add	r1, sp, #16
 800703a:	f7fd fb9f 	bl	800477c <_printf_float>
 800703e:	4607      	mov	r7, r0
 8007040:	1c78      	adds	r0, r7, #1
 8007042:	d1d6      	bne.n	8006ff2 <_vfiprintf_r+0x19e>
 8007044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007046:	07d9      	lsls	r1, r3, #31
 8007048:	d405      	bmi.n	8007056 <_vfiprintf_r+0x202>
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	059a      	lsls	r2, r3, #22
 800704e:	d402      	bmi.n	8007056 <_vfiprintf_r+0x202>
 8007050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007052:	f7fe f90d 	bl	8005270 <__retarget_lock_release_recursive>
 8007056:	89ab      	ldrh	r3, [r5, #12]
 8007058:	065b      	lsls	r3, r3, #25
 800705a:	f53f af1d 	bmi.w	8006e98 <_vfiprintf_r+0x44>
 800705e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007060:	e71c      	b.n	8006e9c <_vfiprintf_r+0x48>
 8007062:	ab03      	add	r3, sp, #12
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	462a      	mov	r2, r5
 8007068:	4630      	mov	r0, r6
 800706a:	4b06      	ldr	r3, [pc, #24]	; (8007084 <_vfiprintf_r+0x230>)
 800706c:	a904      	add	r1, sp, #16
 800706e:	f7fd fe25 	bl	8004cbc <_printf_i>
 8007072:	e7e4      	b.n	800703e <_vfiprintf_r+0x1ea>
 8007074:	080075b4 	.word	0x080075b4
 8007078:	080075ba 	.word	0x080075ba
 800707c:	080075be 	.word	0x080075be
 8007080:	0800477d 	.word	0x0800477d
 8007084:	08006e31 	.word	0x08006e31

08007088 <__swbuf_r>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	460e      	mov	r6, r1
 800708c:	4614      	mov	r4, r2
 800708e:	4605      	mov	r5, r0
 8007090:	b118      	cbz	r0, 800709a <__swbuf_r+0x12>
 8007092:	6a03      	ldr	r3, [r0, #32]
 8007094:	b90b      	cbnz	r3, 800709a <__swbuf_r+0x12>
 8007096:	f7fd ffbf 	bl	8005018 <__sinit>
 800709a:	69a3      	ldr	r3, [r4, #24]
 800709c:	60a3      	str	r3, [r4, #8]
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	071a      	lsls	r2, r3, #28
 80070a2:	d525      	bpl.n	80070f0 <__swbuf_r+0x68>
 80070a4:	6923      	ldr	r3, [r4, #16]
 80070a6:	b31b      	cbz	r3, 80070f0 <__swbuf_r+0x68>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	6922      	ldr	r2, [r4, #16]
 80070ac:	b2f6      	uxtb	r6, r6
 80070ae:	1a98      	subs	r0, r3, r2
 80070b0:	6963      	ldr	r3, [r4, #20]
 80070b2:	4637      	mov	r7, r6
 80070b4:	4283      	cmp	r3, r0
 80070b6:	dc04      	bgt.n	80070c2 <__swbuf_r+0x3a>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f7ff fda2 	bl	8006c04 <_fflush_r>
 80070c0:	b9e0      	cbnz	r0, 80070fc <__swbuf_r+0x74>
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	60a3      	str	r3, [r4, #8]
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	6022      	str	r2, [r4, #0]
 80070ce:	701e      	strb	r6, [r3, #0]
 80070d0:	6962      	ldr	r2, [r4, #20]
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d004      	beq.n	80070e2 <__swbuf_r+0x5a>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	07db      	lsls	r3, r3, #31
 80070dc:	d506      	bpl.n	80070ec <__swbuf_r+0x64>
 80070de:	2e0a      	cmp	r6, #10
 80070e0:	d104      	bne.n	80070ec <__swbuf_r+0x64>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	f7ff fd8d 	bl	8006c04 <_fflush_r>
 80070ea:	b938      	cbnz	r0, 80070fc <__swbuf_r+0x74>
 80070ec:	4638      	mov	r0, r7
 80070ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f0:	4621      	mov	r1, r4
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f806 	bl	8007104 <__swsetup_r>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d0d5      	beq.n	80070a8 <__swbuf_r+0x20>
 80070fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007100:	e7f4      	b.n	80070ec <__swbuf_r+0x64>
	...

08007104 <__swsetup_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <__swsetup_r+0xac>)
 8007108:	4605      	mov	r5, r0
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	460c      	mov	r4, r1
 800710e:	b118      	cbz	r0, 8007118 <__swsetup_r+0x14>
 8007110:	6a03      	ldr	r3, [r0, #32]
 8007112:	b90b      	cbnz	r3, 8007118 <__swsetup_r+0x14>
 8007114:	f7fd ff80 	bl	8005018 <__sinit>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800711e:	0718      	lsls	r0, r3, #28
 8007120:	d422      	bmi.n	8007168 <__swsetup_r+0x64>
 8007122:	06d9      	lsls	r1, r3, #27
 8007124:	d407      	bmi.n	8007136 <__swsetup_r+0x32>
 8007126:	2309      	movs	r3, #9
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800712e:	f04f 30ff 	mov.w	r0, #4294967295
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	e034      	b.n	80071a0 <__swsetup_r+0x9c>
 8007136:	0758      	lsls	r0, r3, #29
 8007138:	d512      	bpl.n	8007160 <__swsetup_r+0x5c>
 800713a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713c:	b141      	cbz	r1, 8007150 <__swsetup_r+0x4c>
 800713e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007142:	4299      	cmp	r1, r3
 8007144:	d002      	beq.n	800714c <__swsetup_r+0x48>
 8007146:	4628      	mov	r0, r5
 8007148:	f7fe ff0e 	bl	8005f68 <_free_r>
 800714c:	2300      	movs	r3, #0
 800714e:	6363      	str	r3, [r4, #52]	; 0x34
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	2300      	movs	r3, #0
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f043 0308 	orr.w	r3, r3, #8
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	b94b      	cbnz	r3, 8007180 <__swsetup_r+0x7c>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007176:	d003      	beq.n	8007180 <__swsetup_r+0x7c>
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 f883 	bl	8007286 <__smakebuf_r>
 8007180:	89a0      	ldrh	r0, [r4, #12]
 8007182:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007186:	f010 0301 	ands.w	r3, r0, #1
 800718a:	d00a      	beq.n	80071a2 <__swsetup_r+0x9e>
 800718c:	2300      	movs	r3, #0
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	6963      	ldr	r3, [r4, #20]
 8007192:	425b      	negs	r3, r3
 8007194:	61a3      	str	r3, [r4, #24]
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	b943      	cbnz	r3, 80071ac <__swsetup_r+0xa8>
 800719a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800719e:	d1c4      	bne.n	800712a <__swsetup_r+0x26>
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	0781      	lsls	r1, r0, #30
 80071a4:	bf58      	it	pl
 80071a6:	6963      	ldrpl	r3, [r4, #20]
 80071a8:	60a3      	str	r3, [r4, #8]
 80071aa:	e7f4      	b.n	8007196 <__swsetup_r+0x92>
 80071ac:	2000      	movs	r0, #0
 80071ae:	e7f7      	b.n	80071a0 <__swsetup_r+0x9c>
 80071b0:	20000074 	.word	0x20000074

080071b4 <_raise_r>:
 80071b4:	291f      	cmp	r1, #31
 80071b6:	b538      	push	{r3, r4, r5, lr}
 80071b8:	4604      	mov	r4, r0
 80071ba:	460d      	mov	r5, r1
 80071bc:	d904      	bls.n	80071c8 <_raise_r+0x14>
 80071be:	2316      	movs	r3, #22
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80071ca:	b112      	cbz	r2, 80071d2 <_raise_r+0x1e>
 80071cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071d0:	b94b      	cbnz	r3, 80071e6 <_raise_r+0x32>
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 f830 	bl	8007238 <_getpid_r>
 80071d8:	462a      	mov	r2, r5
 80071da:	4601      	mov	r1, r0
 80071dc:	4620      	mov	r0, r4
 80071de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e2:	f000 b817 	b.w	8007214 <_kill_r>
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d00a      	beq.n	8007200 <_raise_r+0x4c>
 80071ea:	1c59      	adds	r1, r3, #1
 80071ec:	d103      	bne.n	80071f6 <_raise_r+0x42>
 80071ee:	2316      	movs	r3, #22
 80071f0:	6003      	str	r3, [r0, #0]
 80071f2:	2001      	movs	r0, #1
 80071f4:	e7e7      	b.n	80071c6 <_raise_r+0x12>
 80071f6:	2400      	movs	r4, #0
 80071f8:	4628      	mov	r0, r5
 80071fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071fe:	4798      	blx	r3
 8007200:	2000      	movs	r0, #0
 8007202:	e7e0      	b.n	80071c6 <_raise_r+0x12>

08007204 <raise>:
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <raise+0xc>)
 8007206:	4601      	mov	r1, r0
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	f7ff bfd3 	b.w	80071b4 <_raise_r>
 800720e:	bf00      	nop
 8007210:	20000074 	.word	0x20000074

08007214 <_kill_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	2300      	movs	r3, #0
 8007218:	4d06      	ldr	r5, [pc, #24]	; (8007234 <_kill_r+0x20>)
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	f7fa fae7 	bl	80017f4 <_kill>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d102      	bne.n	8007230 <_kill_r+0x1c>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	b103      	cbz	r3, 8007230 <_kill_r+0x1c>
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	bd38      	pop	{r3, r4, r5, pc}
 8007232:	bf00      	nop
 8007234:	20000460 	.word	0x20000460

08007238 <_getpid_r>:
 8007238:	f7fa bad5 	b.w	80017e6 <_getpid>

0800723c <__swhatbuf_r>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	460c      	mov	r4, r1
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	4615      	mov	r5, r2
 8007246:	2900      	cmp	r1, #0
 8007248:	461e      	mov	r6, r3
 800724a:	b096      	sub	sp, #88	; 0x58
 800724c:	da0c      	bge.n	8007268 <__swhatbuf_r+0x2c>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	2100      	movs	r1, #0
 8007252:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007256:	bf0c      	ite	eq
 8007258:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800725c:	2340      	movne	r3, #64	; 0x40
 800725e:	2000      	movs	r0, #0
 8007260:	6031      	str	r1, [r6, #0]
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	b016      	add	sp, #88	; 0x58
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	466a      	mov	r2, sp
 800726a:	f000 f849 	bl	8007300 <_fstat_r>
 800726e:	2800      	cmp	r0, #0
 8007270:	dbed      	blt.n	800724e <__swhatbuf_r+0x12>
 8007272:	9901      	ldr	r1, [sp, #4]
 8007274:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007278:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800727c:	4259      	negs	r1, r3
 800727e:	4159      	adcs	r1, r3
 8007280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007284:	e7eb      	b.n	800725e <__swhatbuf_r+0x22>

08007286 <__smakebuf_r>:
 8007286:	898b      	ldrh	r3, [r1, #12]
 8007288:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800728a:	079d      	lsls	r5, r3, #30
 800728c:	4606      	mov	r6, r0
 800728e:	460c      	mov	r4, r1
 8007290:	d507      	bpl.n	80072a2 <__smakebuf_r+0x1c>
 8007292:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	2301      	movs	r3, #1
 800729c:	6163      	str	r3, [r4, #20]
 800729e:	b002      	add	sp, #8
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	466a      	mov	r2, sp
 80072a4:	ab01      	add	r3, sp, #4
 80072a6:	f7ff ffc9 	bl	800723c <__swhatbuf_r>
 80072aa:	9900      	ldr	r1, [sp, #0]
 80072ac:	4605      	mov	r5, r0
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7fe feca 	bl	8006048 <_malloc_r>
 80072b4:	b948      	cbnz	r0, 80072ca <__smakebuf_r+0x44>
 80072b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ba:	059a      	lsls	r2, r3, #22
 80072bc:	d4ef      	bmi.n	800729e <__smakebuf_r+0x18>
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	f043 0302 	orr.w	r3, r3, #2
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	e7e3      	b.n	8007292 <__smakebuf_r+0xc>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	6020      	str	r0, [r4, #0]
 80072ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	9b00      	ldr	r3, [sp, #0]
 80072d6:	6120      	str	r0, [r4, #16]
 80072d8:	6163      	str	r3, [r4, #20]
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	b15b      	cbz	r3, 80072f6 <__smakebuf_r+0x70>
 80072de:	4630      	mov	r0, r6
 80072e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072e4:	f000 f81e 	bl	8007324 <_isatty_r>
 80072e8:	b128      	cbz	r0, 80072f6 <__smakebuf_r+0x70>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	431d      	orrs	r5, r3
 80072fa:	81a5      	strh	r5, [r4, #12]
 80072fc:	e7cf      	b.n	800729e <__smakebuf_r+0x18>
	...

08007300 <_fstat_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	2300      	movs	r3, #0
 8007304:	4d06      	ldr	r5, [pc, #24]	; (8007320 <_fstat_r+0x20>)
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	4611      	mov	r1, r2
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	f7fa facf 	bl	80018b0 <_fstat>
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	d102      	bne.n	800731c <_fstat_r+0x1c>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	b103      	cbz	r3, 800731c <_fstat_r+0x1c>
 800731a:	6023      	str	r3, [r4, #0]
 800731c:	bd38      	pop	{r3, r4, r5, pc}
 800731e:	bf00      	nop
 8007320:	20000460 	.word	0x20000460

08007324 <_isatty_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	2300      	movs	r3, #0
 8007328:	4d05      	ldr	r5, [pc, #20]	; (8007340 <_isatty_r+0x1c>)
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	f7fa facd 	bl	80018ce <_isatty>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_isatty_r+0x1a>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_isatty_r+0x1a>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	20000460 	.word	0x20000460

08007344 <_init>:
 8007344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007346:	bf00      	nop
 8007348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734a:	bc08      	pop	{r3}
 800734c:	469e      	mov	lr, r3
 800734e:	4770      	bx	lr

08007350 <_fini>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr
